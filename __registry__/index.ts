import React from 'react'

export const components = {
  // ui preview
  sidebar: {
    name: 'sidebar',
    type: 'registry:block',
    dependencies: ['lucide-react'],
    registryDependencies: ['sidebar', 'button', 'collapsible', 'badge', 'input', 'dropdown-menu', 'avatar'],
    files: [
      {
        path: './src/registry/blocks/sidebar/block/app-sidebar.tsx',
        content:
          "'use client'\r\nimport React from 'react'\r\nimport { Sidebar, SidebarContent, SidebarFooter, SidebarHeader, SidebarRail } from '@/components/ui/sidebar'\r\nimport { NavGroup } from '@/registry/blocks/sidebar/block/nav-group'\r\nimport { NavUser } from '@/registry/blocks/sidebar/block/nav-user'\r\nimport { TeamSwitcher } from '@/registry/blocks/sidebar/block/team-switcher'\r\nimport { sidebarData } from '@/registry/blocks/sidebar/lib/data/sidebar'\r\n\r\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\r\n  return (\r\n    <Sidebar\r\n      className=\"h-[700px] absolute top-1/2  2xl:top-[38%] left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\r\n      collapsible=\"icon\"\r\n      variant=\"floating\"\r\n      {...props}\r\n    >\r\n      <SidebarHeader>\r\n        <TeamSwitcher teams={sidebarData.teams} />\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        {sidebarData.navGroups.map((props) => (\r\n          <NavGroup key={props.title} {...props} />\r\n        ))}\r\n      </SidebarContent>\r\n      <SidebarFooter>\r\n        <NavUser user={sidebarData.user} />\r\n      </SidebarFooter>\r\n      <SidebarRail />\r\n    </Sidebar>\r\n  )\r\n}\r\n",
        type: 'registry:block',
        target: 'components/block/sidebar/app-sidebar.tsx'
      },
      {
        path: './src/registry/blocks/sidebar/lib/data/sidebar.ts',
        content:
          "import {\r\n  Aperture,\r\n  AudioWaveform,\r\n  BadgeHelp,\r\n  Ban,\r\n  Bug,\r\n  BugPlay,\r\n  Check,\r\n  CircleHelp,\r\n  Command,\r\n  Construction,\r\n  X\r\n} from 'lucide-react'\r\nimport { type SidebarData } from '@/registry/blocks/sidebar/lib/types/sidebar'\r\n\r\nexport const sidebarData: SidebarData = {\r\n  user: {\r\n    name: 'hilman',\r\n    email: 'hilmarch03@gmail.com',\r\n    avatar: '/logo.jpg'\r\n  },\r\n  teams: [\r\n    {\r\n      name: 'Std-UI',\r\n      logo: Aperture,\r\n      plan: 'Components'\r\n    },\r\n    {\r\n      name: 'Std-FN',\r\n      logo: AudioWaveform,\r\n      plan: 'Functions'\r\n    }\r\n  ],\r\n  navGroups: [\r\n    {\r\n      title: 'General',\r\n      items: [\r\n        {\r\n          title: 'Demo',\r\n          url: '/demo',\r\n          icon: Command\r\n        },\r\n        {\r\n          title: 'Tasks',\r\n          url: '/tasks',\r\n          icon: Check\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Pages',\r\n      items: [\r\n        {\r\n          title: 'Errors',\r\n          icon: Bug,\r\n          items: [\r\n            {\r\n              title: 'Unauthorized',\r\n              url: '/401',\r\n              icon: Ban\r\n            },\r\n            {\r\n              title: 'Forbidden',\r\n              url: '/403',\r\n              icon: X\r\n            },\r\n            {\r\n              title: 'Not Found',\r\n              url: '/404',\r\n              icon: BadgeHelp\r\n            },\r\n            {\r\n              title: 'Internal Server Error',\r\n              url: '/500',\r\n              icon: BugPlay\r\n            },\r\n            {\r\n              title: 'Maintenance Error',\r\n              url: '/503',\r\n              icon: Construction\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Other',\r\n      items: [\r\n        {\r\n          title: 'Help Center',\r\n          url: '/help-center',\r\n          icon: CircleHelp\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
        type: 'registry:lib',
        target: 'lib/data/sidebar.ts'
      },
      {
        path: './src/registry/blocks/sidebar/lib/types/sidebar.ts',
        content:
          "import { LinkProps } from 'next/link'\r\n\r\ninterface User {\r\n  name: string\r\n  email: string\r\n  avatar: string\r\n}\r\n\r\ninterface Team {\r\n  name: string\r\n  logo: React.ElementType\r\n  plan: string\r\n}\r\n\r\ninterface BaseNavItem {\r\n  title: string\r\n  badge?: string\r\n  icon?: React.ElementType\r\n}\r\n\r\ntype NavLink = BaseNavItem & {\r\n  url: LinkProps['href']\r\n  items?: never\r\n}\r\n\r\ntype NavCollapsible = BaseNavItem & {\r\n  items: (BaseNavItem & { url: LinkProps['href'] })[]\r\n  url?: never\r\n}\r\n\r\ntype NavItem = NavCollapsible | NavLink\r\n\r\ninterface NavGroup {\r\n  title: string\r\n  items: NavItem[]\r\n}\r\n\r\ninterface SidebarData {\r\n  user: User\r\n  teams: Team[]\r\n  navGroups: NavGroup[]\r\n}\r\n\r\nexport type { SidebarData, NavGroup, NavItem, NavCollapsible, NavLink }",
        type: 'registry:lib',
        target: 'lib/types/sidebar.ts'
      },
      {
        path: './src/registry/blocks/sidebar/block/nav-group.tsx',
        content:
          "'use client'\r\nimport { ReactNode } from 'react'\r\nimport { ChevronRight } from 'lucide-react'\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  useSidebar\r\n} from '@/components/ui/sidebar'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { NavCollapsible, NavLink, type NavGroup } from '@/registry/blocks/sidebar/lib/types/sidebar'\r\nimport Link from 'next/link'\r\nimport { usePathname } from 'next/navigation'\r\n\r\nexport function NavGroup({ title, items }: NavGroup) {\r\n  const { state } = useSidebar()\r\n  const pathname = usePathname()\r\n\r\n  return (\r\n    <SidebarGroup>\r\n      <SidebarGroupLabel>{title}</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        {items.map((item) => {\r\n          const key = `${item.title}-${item.url}`\r\n\r\n          if (!item.items) return <SidebarMenuLink key={key} item={item} href={pathname} />\r\n\r\n          if (state === 'collapsed') return <SidebarMenuCollapsedDropdown key={key} item={item} href={pathname} />\r\n\r\n          return <SidebarMenuCollapsible key={key} item={item} href={pathname} />\r\n        })}\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nconst NavBadge = ({ children }: { children: ReactNode }) => (\r\n  <Badge className=\"text-xs rounded-full px-1 py-0\">{children}</Badge>\r\n)\r\n\r\nconst SidebarMenuLink = ({ item, href }: { item: NavLink; href: string }) => {\r\n  const { setOpenMobile } = useSidebar()\r\n  return (\r\n    <SidebarMenuItem>\r\n      <SidebarMenuButton asChild isActive={checkIsActive(href, item)} tooltip={item.title}>\r\n        <Link href={item.url} onClick={() => setOpenMobile(false)}>\r\n          {item.icon && <item.icon />}\r\n          <span>{item.title}</span>\r\n          {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n        </Link>\r\n      </SidebarMenuButton>\r\n    </SidebarMenuItem>\r\n  )\r\n}\r\n\r\nconst SidebarMenuCollapsible = ({ item, href }: { item: NavCollapsible; href: string }) => {\r\n  const { setOpenMobile } = useSidebar()\r\n  return (\r\n    <Collapsible asChild defaultOpen={checkIsActive(href, item, true)} className=\"group/collapsible\">\r\n      <SidebarMenuItem>\r\n        <CollapsibleTrigger asChild>\r\n          <SidebarMenuButton tooltip={item.title}>\r\n            {item.icon && <item.icon />}\r\n            <span>{item.title}</span>\r\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\r\n          </SidebarMenuButton>\r\n        </CollapsibleTrigger>\r\n        <CollapsibleContent className=\"CollapsibleContent\">\r\n          <SidebarMenuSub>\r\n            {item.items.map((subItem) => (\r\n              <SidebarMenuSubItem key={subItem.title}>\r\n                <SidebarMenuSubButton\r\n                  className={checkIsActive(href, subItem) ? 'bg-primary' : ''}\r\n                  asChild\r\n                  isActive={checkIsActive(href, subItem)}\r\n                >\r\n                  <Link href={subItem.url} onClick={() => setOpenMobile(false)}>\r\n                    {subItem.icon && <subItem.icon />}\r\n                    <span>{subItem.title}</span>\r\n                    {subItem.badge && <NavBadge>{subItem.badge}</NavBadge>}\r\n                  </Link>\r\n                </SidebarMenuSubButton>\r\n              </SidebarMenuSubItem>\r\n            ))}\r\n          </SidebarMenuSub>\r\n        </CollapsibleContent>\r\n      </SidebarMenuItem>\r\n    </Collapsible>\r\n  )\r\n}\r\n\r\nconst SidebarMenuCollapsedDropdown = ({ item, href }: { item: NavCollapsible; href: string }) => {\r\n  return (\r\n    <SidebarMenuItem>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <SidebarMenuButton tooltip={item.title} isActive={checkIsActive(href, item)}>\r\n            {item.icon && <item.icon />}\r\n            <span>{item.title}</span>\r\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\r\n          </SidebarMenuButton>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent side=\"right\" align=\"start\" sideOffset={4}>\r\n          <DropdownMenuLabel>\r\n            {item.title} {item.badge ? `(${item.badge})` : ''}\r\n          </DropdownMenuLabel>\r\n          <DropdownMenuSeparator />\r\n          {item.items.map((sub) => (\r\n            <DropdownMenuItem key={`${sub.title}-${sub.url}`} asChild>\r\n              <Link href={sub.url} className={`${checkIsActive(href, sub) ? 'bg-secondary' : ''}`}>\r\n                {sub.icon && <sub.icon />}\r\n                <span className=\"max-w-52 text-wrap\">{sub.title}</span>\r\n                {sub.badge && <span className=\"ml-auto text-xs\">{sub.badge}</span>}\r\n              </Link>\r\n            </DropdownMenuItem>\r\n          ))}\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </SidebarMenuItem>\r\n  )\r\n}\r\n\r\n/**\r\n * Checks if a navigation item is active based on the current URL path\r\n * @param currentPath - Current pathname from Next.js router\r\n * @param item - Navigation item to check\r\n * @param checkChildren - Whether to check child items for active state\r\n * @returns boolean indicating if the item is active\r\n */\r\nconst checkIsActive = (\r\n  currentPath: string,\r\n  item: NavLink | NavCollapsible | (NavLink & { url: string }),\r\n  checkChildren: boolean = false\r\n): boolean => {\r\n  // For items with direct URLs (NavLink)\r\n  if ('url' in item) {\r\n    // Convert both paths to strings for comparison\r\n    const itemPath = item.url!.toString()\r\n\r\n    // Exact match\r\n    if (itemPath === currentPath) {\r\n      return true\r\n    }\r\n\r\n    // Check if current path starts with item path (for nested routes)\r\n    // Only match if item path is not just \"/\"\r\n    if (itemPath !== '/' && currentPath.startsWith(itemPath)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  // For collapsible items with children (NavCollapsible)\r\n  if (checkChildren && 'items' in item && Array.isArray(item.items)) {\r\n    // Check if any child item is active\r\n    const result = item.items.some((subItem) => checkIsActive(currentPath, subItem as NavLink & { url: string }, false))\r\n    return result\r\n  }\r\n\r\n  return false\r\n}\r\n",
        type: 'registry:block',
        target: 'components/block/sidebar/nav-group.tsx'
      },
      {
        path: './src/registry/blocks/sidebar/block/nav-user.tsx',
        content:
          '\'use client\'\r\nimport { BadgeCheck, Bell, ChevronsUpDown, CreditCard, LogOut, Sparkles } from \'lucide-react\'\r\nimport { Avatar, AvatarFallback, AvatarImage } from \'@/components/ui/avatar\'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from \'@/components/ui/dropdown-menu\'\r\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from \'@/components/ui/sidebar\'\r\nimport Link from \'next/link\'\r\n\r\ntype NavUserProps = {\r\n  user: {\r\n    name: string\r\n    email: string\r\n    avatar: string\r\n  }\r\n}\r\n\r\nexport function NavUser({ user }: NavUserProps) {\r\n  const { isMobile } = useSidebar()\r\n\r\n  if (!user) {\r\n    throw new Error(\'NavUser: user is required\')\r\n  }\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <SidebarMenuButton\r\n              size="lg"\r\n              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"\r\n            >\r\n              <Avatar className="h-8 w-8 rounded-lg">\r\n                <AvatarImage src={user.avatar} alt={user.name} />\r\n                <AvatarFallback className="rounded-lg">SN</AvatarFallback>\r\n              </Avatar>\r\n              <div className="grid flex-1 text-left text-sm leading-tight">\r\n                <span className="truncate font-semibold">{user.name}</span>\r\n                <span className="truncate text-xs">{user.email}</span>\r\n              </div>\r\n              <ChevronsUpDown className="ml-auto size-4" />\r\n            </SidebarMenuButton>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"\r\n            side={isMobile ? \'bottom\' : \'right\'}\r\n            align="end"\r\n            sideOffset={4}\r\n          >\r\n            <DropdownMenuLabel className="p-0 font-normal">\r\n              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">\r\n                <Avatar className="h-8 w-8 rounded-lg">\r\n                  <AvatarImage src={user.avatar} alt={user.name} />\r\n                  <AvatarFallback className="rounded-lg">SN</AvatarFallback>\r\n                </Avatar>\r\n                <div className="grid flex-1 text-left text-sm leading-tight">\r\n                  <span className="truncate font-semibold">{user.name}</span>\r\n                  <span className="truncate text-xs">{user.email}</span>\r\n                </div>\r\n              </div>\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <Sparkles />\r\n                Upgrade to Pro\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem asChild>\r\n                <Link href="/settings/account">\r\n                  <BadgeCheck />\r\n                  Account\r\n                </Link>\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem asChild>\r\n                <Link href="/settings">\r\n                  <CreditCard />\r\n                  Billing\r\n                </Link>\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem asChild>\r\n                <Link href="/settings/notifications">\r\n                  <Bell />\r\n                  Notifications\r\n                </Link>\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n              <LogOut />\r\n              Log out\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n',
        type: 'registry:block',
        target: 'components/block/sidebar/nav-user.tsx'
      },
      {
        path: './src/registry/blocks/sidebar/block/team-switcher.tsx',
        content:
          '\'use client\'\r\nimport * as React from \'react\'\r\nimport { ChevronsUpDown, Plus } from \'lucide-react\'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuTrigger\r\n} from \'@/components/ui/dropdown-menu\'\r\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from \'@/components/ui/sidebar\'\r\n\r\ntype TeamSwitcherProps = {\r\n  teams: {\r\n    name: string\r\n    logo: React.ElementType\r\n    plan: string\r\n  }[]\r\n}\r\n\r\nexport function TeamSwitcher({ teams }: TeamSwitcherProps) {\r\n  const { isMobile } = useSidebar()\r\n  const [activeTeam, setActiveTeam] = React.useState(teams[0])\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <SidebarMenuButton\r\n              size="lg"\r\n              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"\r\n            >\r\n              <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">\r\n                {activeTeam && <activeTeam.logo className="size-4" />}\r\n              </div>\r\n              <div className="grid flex-1 text-left text-sm leading-tight">\r\n                <span className="truncate font-semibold">{activeTeam?.name ?? \'Your team\'}</span>\r\n                <span className="truncate text-xs">{activeTeam?.plan ?? \'Free\'}</span>\r\n              </div>\r\n              <ChevronsUpDown className="ml-auto" />\r\n            </SidebarMenuButton>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"\r\n            align="start"\r\n            side={isMobile ? \'bottom\' : \'right\'}\r\n            sideOffset={4}\r\n          >\r\n            <DropdownMenuLabel className="text-xs text-muted-foreground">Teams</DropdownMenuLabel>\r\n            {teams.map((team, index) => (\r\n              <DropdownMenuItem key={team.name} onClick={() => setActiveTeam(team)} className="gap-2 p-2">\r\n                <div className="flex size-6 items-center justify-center rounded-sm border">\r\n                  <team.logo className="size-4 shrink-0" />\r\n                </div>\r\n                {team.name}\r\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\r\n              </DropdownMenuItem>\r\n            ))}\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem className="gap-2 p-2">\r\n              <div className="flex size-6 items-center justify-center rounded-md border bg-background">\r\n                <Plus className="size-4" />\r\n              </div>\r\n              <div className="font-medium text-muted-foreground">Add team</div>\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n',
        type: 'registry:block',
        target: 'components/block/sidebar/team-switcher.tsx'
      }
    ],
    component: React.lazy(() => import('./preview/block/sidebar'))
  },
  'date-time-picker': {
    name: 'date-time-picker',
    type: 'registry:ui',
    dependencies: ['lucide-react', 'date-fns', 'react-day-picker'],
    registryDependencies: ['label', 'input', 'button', 'popover', 'select', 'https://std-ui.vercel.app/r/calendar'],
    files: [
      {
        path: './src/registry/ui/date-time-picker.tsx',
        content:
          "'use client'\r\n\r\nimport type React from 'react'\r\n\r\nimport { useState, useId } from 'react'\r\nimport { format, set } from 'date-fns'\r\nimport { CalendarIcon, ClockIcon } from 'lucide-react'\r\nimport { Calendar } from '@/registry/ui/calendar'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { cn } from '@/lib/utils'\r\nimport type { DropdownNavProps, DropdownProps } from 'react-day-picker'\r\nimport { id as indonesianLocale } from 'date-fns/locale'\r\n\r\ntype DateTimePickerProps = {\r\n  label?: string\r\n  value?: Date\r\n  onChange?: (date: Date) => void\r\n  locale?: 'en' | 'id'\r\n  dateTimeFormat?: string\r\n}\r\n\r\nexport function DateTimePicker({\r\n  label = 'Date and Time',\r\n  value,\r\n  onChange,\r\n  locale = 'en',\r\n  dateTimeFormat\r\n}: DateTimePickerProps) {\r\n  const id = useId()\r\n  const [dateTime, setDateTime] = useState<Date | undefined>(value || new Date())\r\n\r\n  // Format time as HH:MM:SS for the time input\r\n  const timeString = dateTime ? format(dateTime, 'HH:mm:ss') : '12:00:00'\r\n\r\n  const handleDateChange = (date: Date | undefined) => {\r\n    if (!date) return\r\n\r\n    // Preserve the time from the current dateTime\r\n    if (dateTime) {\r\n      const newDateTime = set(date, {\r\n        hours: dateTime.getHours(),\r\n        minutes: dateTime.getMinutes(),\r\n        seconds: dateTime.getSeconds()\r\n      })\r\n      setDateTime(newDateTime)\r\n      onChange?.(newDateTime)\r\n    } else {\r\n      setDateTime(date)\r\n      onChange?.(date)\r\n    }\r\n  }\r\n\r\n  const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const timeValue = e.target.value\r\n    if (!timeValue || !dateTime) return\r\n\r\n    // Parse the time string and update the dateTime with the new time values\r\n    const [hours, minutes, seconds] = timeValue.split(':').map(Number)\r\n    const newDateTime = set(dateTime, { hours, minutes, seconds: seconds || 0 })\r\n\r\n    setDateTime(newDateTime)\r\n    onChange?.(newDateTime)\r\n  }\r\n\r\n  const handleCalendarChange = (_value: string | number, _e: React.ChangeEventHandler<HTMLSelectElement>) => {\r\n    const _event = {\r\n      target: {\r\n        value: String(_value)\r\n      }\r\n    } as React.ChangeEvent<HTMLSelectElement>\r\n    _e(_event)\r\n  }\r\n\r\n  const getLocale = () => {\r\n    switch (locale) {\r\n      case 'id':\r\n        return indonesianLocale\r\n      default:\r\n        return undefined // Default English locale\r\n    }\r\n  }\r\n\r\n  const getDefaultFormat = () => {\r\n    switch (locale) {\r\n      case 'id':\r\n        return 'dd MMMM yyyy, HH:mm:ss'\r\n      default:\r\n        return 'PPP p' // Default English format\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <div className={cn('grid w-full items-center gap-1.5')}>\r\n          <Label htmlFor={id}>{label}</Label>\r\n          <Button\r\n            id={id}\r\n            variant=\"outline\"\r\n            className={cn(\r\n              'w-full min-w-[240px] justify-start text-left font-normal',\r\n              !dateTime && 'text-muted-foreground'\r\n            )}\r\n          >\r\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n            {dateTime ? (\r\n              format(dateTime, dateTimeFormat || getDefaultFormat(), { locale: getLocale() })\r\n            ) : (\r\n              <span>Pick a date and time</span>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </PopoverTrigger>\r\n      <PopoverContent side=\"top\" className=\"p-0 w-auto\" align=\"start\">\r\n        <div className=\"rounded-md border\">\r\n          <Calendar\r\n            mode=\"single\"\r\n            selected={dateTime}\r\n            onSelect={handleDateChange}\r\n            className=\"p-2\"\r\n            classNames={{\r\n              month_caption: 'mx-0'\r\n            }}\r\n            captionLayout=\"dropdown\"\r\n            defaultMonth={dateTime || new Date()}\r\n            startMonth={new Date(1980, 6)}\r\n            hideNavigation\r\n            components={{\r\n              DropdownNav: (props: DropdownNavProps) => {\r\n                return <div className=\"flex w-full gap-2 items-center\">{props.children}</div>\r\n              },\r\n              Dropdown: (props: DropdownProps) => {\r\n                return (\r\n                  <Select\r\n                    value={String(props.value)}\r\n                    onValueChange={(value) => {\r\n                      if (props.onChange) {\r\n                        handleCalendarChange(value, props.onChange)\r\n                      }\r\n                    }}\r\n                  >\r\n                    <SelectTrigger className=\"h-8 w-fit first:grow font-medium\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent className=\"max-h-[min(26rem,var(--radix-select-content-available-height))]\">\r\n                      {props.options?.map((option) => (\r\n                        <SelectItem key={option.value} value={String(option.value)} disabled={option.disabled}>\r\n                          {option.label}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                )\r\n              }\r\n            }}\r\n          />\r\n          <div className=\"border-t p-3\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Label htmlFor={`${id}-time`} className=\"text-xs\">\r\n                Enter time\r\n              </Label>\r\n              <div className=\"relative grow\">\r\n                <Input\r\n                  id={`${id}-time`}\r\n                  type=\"time\"\r\n                  onChange={handleTimeChange}\r\n                  step=\"1\"\r\n                  value={timeString}\r\n                  className=\"peer appearance-none ps-9 [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\r\n                />\r\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                  <ClockIcon size={16} aria-hidden=\"true\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
        type: 'registry:ui'
      }
    ],
    component: React.lazy(() => import('./preview/ui/date-time-picker'))
  },
  'floating-input': {
    name: 'floating-input',
    type: 'registry:ui',
    registryDependencies: ['input', 'label'],
    files: [
      {
        path: './src/registry/ui/floating-input.tsx',
        content:
          "import * as React from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Input } from '@/components/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\n\r\ninterface FloatingInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label: string\r\n}\r\n\r\nconst FloatingInput: React.FC<FloatingInputProps> = ({ label, id, className, ...props }) => {\r\n  const inputId = id || React.useId()\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Input id={inputId} placeholder=\"\" className={cn('dark:bg-background peer', className)} {...props} />\r\n      <Label\r\n        htmlFor={inputId}\r\n        className={cn(\r\n          'rounded-t-[2px] absolute start-2 top-2 z-10 origin-[0] -translate-y-4 scale-75 transform bg-background px-2 text-sm text-primary duration-300',\r\n          'peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:scale-100',\r\n          'peer-focus:top-2 peer-focus:-translate-y-4 peer-focus:scale-75 peer-focus:px-2',\r\n          'dark:bg-background rtl:peer-focus:left-auto rtl:peer-focus:translate-x-1/4 cursor-text'\r\n        )}\r\n      >\r\n        {label}\r\n      </Label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { FloatingInput }\r\n",
        type: 'registry:ui'
      }
    ],
    component: React.lazy(() => import('./preview/ui/floating-input'))
  },
  'input-file': {
    name: 'input-file',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    registryDependencies: ['button'],
    files: [
      {
        path: './src/registry/ui/input-file.tsx',
        content:
          '\'use client\'\r\n\r\nimport { useState, useRef, type ChangeEvent } from \'react\'\r\nimport { Button } from \'@/components/ui/button\'\r\nimport { Eye, SendIcon, Trash2, Upload } from \'lucide-react\'\r\nimport { cn } from \'@/lib/utils\'\r\nimport { useModal } from \'../hooks/use-modal\'\r\n\r\ninterface InputFileProps {\r\n  id: string\r\n  name: string\r\n  className?: string\r\n  accept?: string\r\n  multiple?: boolean\r\n  onChange?: (files: File[] | null) => void\r\n}\r\n\r\nexport function InputFile({\r\n  id,\r\n  name,\r\n  className,\r\n  accept,\r\n  multiple = false,\r\n  onChange,\r\n  ...props\r\n}: InputFileProps) {\r\n  const [files, setFiles] = useState<File[] | null>(null)\r\n  const [preview, setPreview] = useState<string | null>(null)\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const { openModal, closeModal } = useModal()\r\n\r\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files ? Array.from(e.target.files) : null\r\n    setFiles(selectedFiles)\r\n\r\n    if (preview) {\r\n      URL.revokeObjectURL(preview)\r\n      setPreview(null)\r\n    }\r\n\r\n    if (selectedFiles && selectedFiles.length > 0 && selectedFiles[0]?.type.startsWith(\'image/\')) {\r\n      const url = URL.createObjectURL(selectedFiles[0])\r\n      setPreview(url)\r\n    }\r\n\r\n    if (onChange) {\r\n      onChange(selectedFiles)\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.value = \'\'\r\n    }\r\n\r\n    if (preview) {\r\n      URL.revokeObjectURL(preview)\r\n    }\r\n\r\n    setFiles(null)\r\n    setPreview(null)\r\n    closeModal()\r\n\r\n    if (onChange) {\r\n      onChange(null)\r\n    }\r\n  }\r\n\r\n  const togglePreview = () => {\r\n    openModal(\'Preview\', previewFile())\r\n  }\r\n\r\n  const truncateFileName = (fileName: string, maxLength: number) => {\r\n    if (fileName.length > maxLength) {\r\n      const extensionIndex = fileName.lastIndexOf(\'.\')\r\n      const extension = fileName.substring(extensionIndex)\r\n      return `${fileName.substring(0, maxLength)}...${extension}`\r\n    }\r\n    return fileName\r\n  }\r\n\r\n  function previewFile() {\r\n    return (\r\n      <div className="p-1.5 rounded-md bg-muted/20 grid gap-1.5">\r\n        <img src={preview || \'/placeholder.svg\'} alt="File preview" className="max-w-full object-contain mx-auto" />\r\n        {files && files.length > 0 && (\r\n          <div className="text-xs text-muted-foreground">\r\n            {files.map((file, index) => (\r\n              <div key={index} className="flex items-center gap-2">\r\n                <span className="truncate">{truncateFileName(file.name, 30)}</span>\r\n                <span>({(file.size / 1024).toFixed(2)} KB)</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\'space-y-2\', className)}>\r\n      <div className="flex items-center">\r\n        <div className="relative flex-1">\r\n          <input\r\n            id={id}\r\n            ref={inputRef}\r\n            type="file"\r\n            name={name}\r\n            accept={accept}\r\n            multiple={multiple}\r\n            onChange={handleFileChange}\r\n            className="absolute inset-0 opacity-0 w-full h-full cursor-pointer z-10"\r\n            {...props}\r\n          />\r\n          <div\r\n            className={`${\r\n              files ? \'rounded-l-md\' : \'rounded-md\'\r\n            } flex items-center gap-2 p-2 border bg-background text-sm`}\r\n          >\r\n            <Upload className="h-4 w-4 text-muted-foreground" />\r\n            <span className="text-muted-foreground truncate">\r\n              {files && files.length > 0\r\n                ? multiple\r\n                  ? `${files.length} files selected`\r\n                  : truncateFileName(files[0]?.name || \'\', 20) // Adjust `20` as needed\r\n                : \'Choose file...\'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {files && files.length > 0 && (\r\n          <div className="border border-l-0 rounded-r-md flex">\r\n            <Button\r\n              className="border-none rounded-none"\r\n              type="button"\r\n              variant="outline"\r\n              size="icon"\r\n              onClick={togglePreview}\r\n              disabled={!preview}\r\n              d-title="view file"\r\n            >\r\n              <Eye size={16} />\r\n              <span className="sr-only">View file</span>\r\n            </Button>\r\n            <Button\r\n              className="border-none rounded-none"\r\n              type="button"\r\n              variant="outline"\r\n              size="icon"\r\n              onClick={handleDelete}\r\n              d-title="remove file"\r\n            >\r\n              <Trash2 size={16} />\r\n              <span className="sr-only">Delete file</span>\r\n            </Button>\r\n            <Button\r\n              className="border-none rounded-l-none rounded-r-md"\r\n              type="button"\r\n              variant="outline"\r\n              size="icon"\r\n              d-title="save file"\r\n            >\r\n              <SendIcon size={16} />\r\n              <span className="sr-only">Save file</span>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n',
        type: 'registry:ui'
      },
      {
        path: './src/registry/hooks/use-modal.tsx',
        content:
          '"use client";\r\n\r\nimport type React from "react";\r\nimport {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  type ReactNode,\r\n  useCallback,\r\n  useMemo,\r\n} from "react";\r\n\r\ntype ModalContextType = {\r\n  title: string;\r\n  isOpen: boolean;\r\n  content: ReactNode | null;\r\n  openModal: (title: string, content: ReactNode) => void;\r\n  closeModal: () => void;\r\n};\r\n\r\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\r\n\r\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [title, setTitle] = useState("");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<ReactNode | null>(null);\r\n\r\n  const openModal = useCallback((title: string, content: ReactNode) => {\r\n    setTitle(title);\r\n    setContent(content);\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setTitle("");\r\n    setIsOpen(false);\r\n    setContent(null);\r\n  }, []);\r\n\r\n  const value = useMemo(\r\n    () => ({ title, isOpen, content, openModal, closeModal }),\r\n    [title, isOpen, content, openModal, closeModal]\r\n  );\r\n\r\n  return (\r\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useModal = () => {\r\n  const context = useContext(ModalContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      "useModal must be used within a ModalProvider. " +\r\n        "Please wrap your component with <ModalProvider>"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n',
        type: 'registry:hook'
      }
    ],
    component: React.lazy(() => import('./preview/ui/input-file'))
  },
  modal: {
    name: 'modal',
    type: 'registry:ui',
    dependencies: ['@radix-ui/react-visually-hidden'],
    registryDependencies: ['dialog', 'drawer', 'button'],
    files: [
      {
        path: './src/registry/hooks/use-media-query.tsx',
        content:
          'import * as React from "react";\r\n\r\nexport function useMediaQuery(query: string) {\r\n  const [value, setValue] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    function onChange(event: MediaQueryListEvent) {\r\n      setValue(event.matches);\r\n    }\r\n\r\n    const result = matchMedia(query);\r\n    result.addEventListener("change", onChange);\r\n    setValue(result.matches);\r\n\r\n    return () => result.removeEventListener("change", onChange);\r\n  }, [query]);\r\n\r\n  return value;\r\n}\r\n',
        type: 'registry:hook'
      },
      {
        path: './src/registry/hooks/use-modal.tsx',
        content:
          '"use client";\r\n\r\nimport type React from "react";\r\nimport {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  type ReactNode,\r\n  useCallback,\r\n  useMemo,\r\n} from "react";\r\n\r\ntype ModalContextType = {\r\n  title: string;\r\n  isOpen: boolean;\r\n  content: ReactNode | null;\r\n  openModal: (title: string, content: ReactNode) => void;\r\n  closeModal: () => void;\r\n};\r\n\r\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\r\n\r\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [title, setTitle] = useState("");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<ReactNode | null>(null);\r\n\r\n  const openModal = useCallback((title: string, content: ReactNode) => {\r\n    setTitle(title);\r\n    setContent(content);\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setTitle("");\r\n    setIsOpen(false);\r\n    setContent(null);\r\n  }, []);\r\n\r\n  const value = useMemo(\r\n    () => ({ title, isOpen, content, openModal, closeModal }),\r\n    [title, isOpen, content, openModal, closeModal]\r\n  );\r\n\r\n  return (\r\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useModal = () => {\r\n  const context = useContext(ModalContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      "useModal must be used within a ModalProvider. " +\r\n        "Please wrap your component with <ModalProvider>"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n',
        type: 'registry:hook'
      },
      {
        path: './src/registry/ui/modals.tsx',
        content:
          'import {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from "@/components/ui/dialog";\r\nimport {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n} from "@/components/ui/drawer";\r\nimport { useModal } from "@/registry/hooks/use-modal";\r\nimport { VisuallyHidden } from "@radix-ui/react-visually-hidden";\r\nimport React from "react";\r\nimport { useMediaQuery } from "@/registry/hooks/use-media-query";\r\nimport { Button } from "@/components/ui/button";\r\n\r\nexport function Modals() {\r\n  const { isOpen, title, content, closeModal } = useModal();\r\n\r\n  const isDesktop = useMediaQuery("(min-width: 768px)");\r\n\r\n  if (!title || !content) {\r\n    return null;\r\n  }\r\n\r\n  if (isDesktop) {\r\n    return (\r\n      <Dialog open={isOpen} onOpenChange={closeModal}>\r\n        <DialogContent className="flex flex-col gap-0 p-0 min-w-sm sm:max-h-[min(640px,80vh)] w-auto sm:max-w-lg md:max-w-5xl [&>button:last-child]:top-3.5">\r\n          <DialogHeader className="contents space-y-0 text-left">\r\n            <DialogTitle className="capitalize border-b border-border px-6 py-4 text-base">\r\n              {title}\r\n            </DialogTitle>\r\n            <VisuallyHidden>\r\n              <DialogDescription>@Hilmarch</DialogDescription>\r\n            </VisuallyHidden>\r\n            <div className="overflow-y-auto">\r\n              <div className="p-6 text-base">{content}</div>\r\n            </div>\r\n          </DialogHeader>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Drawer open={isOpen} onOpenChange={closeModal}>\r\n      <DrawerContent className="max-h-[min(640px,80vh)]">\r\n        <DrawerHeader className="text-left">\r\n          <DrawerTitle>{title}</DrawerTitle>\r\n          <VisuallyHidden>\r\n            <DrawerDescription>@Hilmarch</DrawerDescription>\r\n          </VisuallyHidden>\r\n        </DrawerHeader>\r\n        <div className="overflow-y-auto">\r\n          <div className="text-base px-4">{content}</div>\r\n        </div>\r\n        <DrawerFooter>\r\n          <DrawerClose asChild>\r\n            <Button size={\'sm\'} variant="outline">\r\n              Cancel\r\n            </Button>\r\n          </DrawerClose>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  )\r\n}\r\n',
        type: 'registry:ui'
      }
    ],
    component: React.lazy(() => import('./preview/ui/modal'))
  },
  layout: {
    name: 'layout',
    type: 'registry:component',
    title: 'Layout Component',
    description: 'A simple layouts',
    dependencies: ['lucide-react', 'next-themes'],
    registryDependencies: ['separator', 'sidebar', 'dropdown-menu', 'button', 'avatar'],
    files: [
      {
        path: 'src/registry/components/layouts/header.tsx',
        content:
          "import React from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { SidebarTrigger } from '@/components/ui/sidebar'\r\n\r\ntype HeaderProps = {\r\n    fixed?: boolean\r\n}\r\n\r\nexport const Header = ({ className, fixed, children, ...props }: HeaderProps & React.HTMLAttributes<HTMLElement>) => {\r\n    const [offset, setOffset] = React.useState(0)\r\n\r\n    React.useEffect(() => {\r\n        const onScroll = () => {\r\n            setOffset(document.body.scrollTop || document.documentElement.scrollTop)\r\n        }\r\n\r\n        // Add scroll listener to the body\r\n        document.addEventListener('scroll', onScroll, { passive: true })\r\n\r\n        // Clean up the event listener on unmount\r\n        return () => document.removeEventListener('scroll', onScroll)\r\n    }, [])\r\n\r\n    return (\r\n        <header\r\n            className={cn(\r\n                'flex h-16 items-center gap-3 bg-background p-4 sm:gap-4',\r\n                fixed && 'header-fixed peer/header fixed z-50 w-[inherit] rounded-md',\r\n                offset > 10 && fixed ? 'shadow' : 'shadow-none',\r\n                className\r\n            )}\r\n            {...props}\r\n        >\r\n            <SidebarTrigger variant=\"outline\" className=\"scale-125 sm:scale-100\" />\r\n            <Separator orientation=\"vertical\" className=\"h-6\" />\r\n            {children}\r\n        </header>\r\n    )\r\n}",
        type: 'registry:component',
        target: 'components/layouts/header.tsx'
      },
      {
        path: 'src/registry/components/layouts/main.tsx',
        content:
          "import React from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\ntype MainProps = {\r\n  fixed?: boolean\r\n}\r\n\r\nexport const Main = ({ fixed, ...props }: MainProps & React.HTMLAttributes<HTMLElement>) => {\r\n  return (\r\n    <main\r\n      className={cn(\r\n        'peer-[.header-fixed]/header:mt-16',\r\n        'px-4 py-6',\r\n        fixed && 'fixed-main flex flex-grow flex-col overflow-hidden'\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n",
        type: 'registry:component',
        target: 'components/layouts/main.tsx'
      },
      {
        path: 'src/registry/components/profile-dropdown.tsx',
        content:
          'import { Avatar, AvatarFallback, AvatarImage } from \'@/components/ui/avatar\'\r\nimport { Button } from \'@/components/ui/button\'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuTrigger\r\n} from \'@/components/ui/dropdown-menu\'\r\nimport Link from \'next/link\'\r\n\r\nexport function ProfileDropdown() {\r\n  return (\r\n    <DropdownMenu modal={false}>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant="ghost" className="relative h-8 w-8 rounded-full">\r\n          <Avatar className="h-8 w-8">\r\n            <AvatarImage src="/avatars/01.png" alt="@shadcn" />\r\n            <AvatarFallback>SN</AvatarFallback>\r\n          </Avatar>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent className="w-56" align="end" forceMount>\r\n        <DropdownMenuLabel className="font-normal">\r\n          <div className="flex flex-col space-y-1">\r\n            <p className="text-sm font-medium leading-none">satnaing</p>\r\n            <p className="text-xs leading-none text-muted-foreground">satnaingdev@gmail.com</p>\r\n          </div>\r\n        </DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuGroup>\r\n          <DropdownMenuItem asChild>\r\n            <Link href="/settings">\r\n              Profile\r\n              <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\r\n            </Link>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem asChild>\r\n            <Link href="/settings">\r\n              Billing\r\n              <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\r\n            </Link>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem asChild>\r\n            <Link href="/settings">\r\n              Settings\r\n              <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\r\n            </Link>\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem>New Team</DropdownMenuItem>\r\n        </DropdownMenuGroup>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>\r\n          Log out\r\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n}\r\n',
        type: 'registry:component',
        target: 'components/profile-dropdown.tsx'
      },
      {
        path: 'src/registry/components/theme-switch.tsx',
        content:
          "import { useEffect } from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\r\nimport { useTheme } from 'next-themes'\r\nimport { Check, Moon, Sun } from 'lucide-react'\r\n\r\nexport function ThemeSwitch() {\r\n  const { theme, setTheme } = useTheme()\r\n\r\n  /* Update theme-color meta tag\r\n   * when theme is updated */\r\n  useEffect(() => {\r\n    const themeColor = theme === 'dark' ? '#020817' : '#fff'\r\n    const metaThemeColor = document.querySelector(\"meta[name='theme-color']\")\r\n    if (metaThemeColor) metaThemeColor.setAttribute('content', themeColor)\r\n  }, [theme])\r\n\r\n  return (\r\n    <DropdownMenu modal={false}>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"icon\" className=\"scale-95 rounded-full\">\r\n          <Sun className=\"size-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\r\n          <Moon className=\"absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\r\n          <span className=\"sr-only\">Toggle theme</span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\">\r\n        <DropdownMenuItem onClick={() => setTheme('light')}>\r\n          Light <Check size={14} className={cn('ml-auto', theme !== 'light' && 'hidden')} />\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\r\n          Dark\r\n          <Check size={14} className={cn('ml-auto', theme !== 'dark' && 'hidden')} />\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem onClick={() => setTheme('system')}>\r\n          System\r\n          <Check size={14} className={cn('ml-auto', theme !== 'system' && 'hidden')} />\r\n        </DropdownMenuItem>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n}\r\n",
        type: 'registry:component',
        target: 'components/theme-switch.tsx'
      },
      {
        path: 'src/registry/components/top-nav.tsx',
        content:
          "import { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\r\nimport { Menu } from 'lucide-react'\r\nimport Link from 'next/link'\r\n\r\ntype TopNavProps = {\r\n  links: {\r\n    title: string\r\n    href: string\r\n    isActive: boolean\r\n  }[]\r\n}\r\n\r\nexport function TopNav({ className, links, ...props }: TopNavProps & React.HTMLAttributes<HTMLElement>) {\r\n  return (\r\n    <>\r\n      <div className=\"md:hidden\">\r\n        <DropdownMenu modal={false}>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button size=\"icon\" variant=\"outline\">\r\n              <Menu />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent side=\"bottom\" align=\"start\">\r\n            {links.map(({ title, href, isActive }) => (\r\n              <DropdownMenuItem key={`${title}-${href}`} asChild>\r\n                <Link href={href} className={!isActive ? 'text-muted-foreground' : ''}>\r\n                  {title}\r\n                </Link>\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n\r\n      <nav className={cn('hidden items-center space-x-4 md:flex lg:space-x-6', className)} {...props}>\r\n        {links.map(({ title, href, isActive }) => (\r\n          <Link\r\n            key={`${title}-${href}`}\r\n            href={href}\r\n            className={`text-sm font-medium transition-colors hover:text-primary ${\r\n              isActive ? '' : 'text-muted-foreground'\r\n            }`}\r\n          >\r\n            {title}\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n",
        type: 'registry:component',
        target: 'components/top-nav.tsx'
      }
    ],
    component: React.lazy(() => import('./preview/components/layout'))
  }
} as const
