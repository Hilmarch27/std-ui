{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "server-table",
  "type": "registry:block",
  "title": "Server Side Table",
  "description": "A simple Server Side Table",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table",
    "zod",
    "sonner",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "table",
    "button",
    "dropdown-menu",
    "checkbox",
    "badge",
    "command",
    "popover",
    "separator",
    "select",
    "alert-dialog",
    "input",
    "sonner"
  ],
  "files": [
    {
      "path": "./src/registry/blocks/server-table/hooks/use-data-table.ts",
      "content": "import {\n  ColumnDef,\n  ColumnFiltersState,\n  ExpandedState,\n  SortingState,\n  VisibilityState,\n  getCoreRowModel,\n  getExpandedRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  Row,\n  PaginationState,\n  Updater,\n} from \"@tanstack/react-table\";\nimport React from \"react\";\nimport { parseAsInteger, parseAsString, useQueryState } from \"nuqs\";\n\ninterface UseDataTableProps<TData extends { id: string }> {\n  columns: ColumnDef<TData>[];\n  data: TData[];\n  originalData?: TData[];\n  createEmptyRow?: () => TData;\n  setData?: React.Dispatch<React.SetStateAction<TData[]>>;\n  updateRow?: (id: string, payload: TData) => void;\n  createRow?: (payload: TData) => void;\n  removeRow?: (id: string) => void;\n  getRowCanExpand?: (row: Row<TData>) => boolean;\n  onRemove?: (id: string) => void;\n  onUpdate?: (payload: TData) => void;\n  pageCount?: number;\n}\n\nexport function useDataTable<TData extends { id: string }>({\n  columns,\n  data,\n  originalData,\n  createEmptyRow,\n  setData,\n  updateRow,\n  createRow,\n  removeRow,\n  getRowCanExpand,\n  onRemove,\n  onUpdate,\n  pageCount = -1,\n  ...props\n}: UseDataTableProps<TData>) {\n  // * states\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  );\n\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [editedRows, setEditedRows] = React.useState<Record<string, boolean>>(\n    {}\n  );\n  const [validRows, setValidRows] = React.useState<\n    Record<string, Record<string, boolean>>\n  >({});\n  const [pendingCreate, setPendingCreate] = React.useState<{\n    data: TData;\n    index: number;\n  } | null>(null);\n  const [expanded, setExpanded] = React.useState<ExpandedState>({});\n\n  const [page, setPage] = useQueryState(\n    \"page\",\n    parseAsInteger.withDefault(1).withOptions({ shallow: false })\n  );\n  const [perPage, setPerPage] = useQueryState(\n    \"perPage\",\n    parseAsInteger.withDefault(10).withOptions({ shallow: false })\n  );\n\n  const [globalFilter, setGlobalFilter] = useQueryState(\n    \"search\",\n    parseAsString.withDefault(\"\").withOptions({ shallow: false })\n  );\n\n  // * helper functions\n  const initializeValidationState = () => {\n    const validationState: Record<string, boolean> = {};\n    columns.forEach((column: any) => {\n      if (column.meta?.zod) {\n        validationState[column.accessorKey as string] = false;\n      }\n    });\n    return validationState;\n  };\n\n  // * row actions\n  const handleOnRemove = (id: string) => {\n    onRemove!(id);\n  };\n\n  const handleUpdate = (payload: TData) => {\n    onUpdate!(payload);\n  };\n\n  // * paginate\n  const pagination: PaginationState = {\n    pageIndex: page - 1, // zero-based index -> one-based index\n    pageSize: perPage,\n  };\n\n  function onPaginationChange(updaterOrValue: Updater<PaginationState>) {\n    if (typeof updaterOrValue === \"function\") {\n      const newPagination = updaterOrValue(pagination);\n      void setPage(newPagination.pageIndex + 1);\n      void setPerPage(newPagination.pageSize);\n    } else {\n      void setPage(updaterOrValue.pageIndex + 1);\n      void setPerPage(updaterOrValue.pageSize);\n    }\n  }\n\n  // * editable functions\n  const handleRevertData = (rowIndex: number) => {\n    if (pendingCreate?.index === rowIndex) {\n      setData!((old) => old.filter((_, index) => index !== rowIndex));\n      setPendingCreate(null);\n      setValidRows((old) => {\n        const newValidRows = { ...old };\n        delete newValidRows[rowIndex];\n        return newValidRows;\n      });\n    } else {\n      setData!((old) =>\n        old.map((row, index) =>\n          index === rowIndex ? originalData![rowIndex]! : row\n        )\n      );\n    }\n  };\n\n  const handleUpdateRow = (rowIndex: number) => {\n    if (pendingCreate?.index === rowIndex) {\n      createRow!(data[rowIndex]!);\n      setPendingCreate(null);\n    } else {\n      updateRow!(data[rowIndex]!.id, data[rowIndex]!);\n    }\n  };\n\n  const handleUpdateData = (\n    rowIndex: number,\n    columnId: string,\n    value: TData,\n    isValid: boolean\n  ) => {\n    setData!((old: TData[]) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex]!,\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n    setValidRows((old) => ({\n      ...old,\n      [rowIndex]: { ...old[rowIndex], [columnId]: isValid },\n    }));\n  };\n\n  const handleCreateRow = () => {\n    const newRow = createEmptyRow!();\n    setData!((old) => [newRow, ...old]);\n\n    setPendingCreate({\n      data: newRow,\n      index: 0,\n    });\n\n    setEditedRows((old) => ({\n      ...old,\n      0: true,\n    }));\n\n    const initialValidation = initializeValidationState();\n    setValidRows((old) => ({\n      ...old,\n      0: initialValidation,\n    }));\n  };\n\n  const handleRemoveRow = (rowIndex: number) => {\n    if (pendingCreate?.index === rowIndex) {\n      setData!((old) => old.filter((_, index) => index !== rowIndex));\n      setPendingCreate(null);\n      setValidRows((old) => {\n        const newValidRows = { ...old };\n        delete newValidRows[rowIndex];\n        return newValidRows;\n      });\n    } else {\n      removeRow!(data[rowIndex]!.id);\n    }\n  };\n\n  const handleRemoveSelectedRows = (selectedRows: number[]) => {\n    selectedRows.forEach((rowIndex) => {\n      if (pendingCreate?.index !== rowIndex) {\n        removeRow!(data[rowIndex]!.id);\n      }\n    });\n  };\n\n  /**\n   ** Table Configuration\n   */\n  const table = useReactTable({\n    ...props,\n    data,\n    columns,\n    pageCount,\n    state: {\n      pagination,\n      sorting,\n      columnVisibility,\n      rowSelection,\n      columnFilters,\n      expanded,\n      globalFilter,\n    },\n    globalFilterFn: \"includesString\",\n    enableRowSelection: true,\n    onPaginationChange,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onGlobalFilterChange: setGlobalFilter,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n    onExpandedChange: setExpanded,\n    getExpandedRowModel: getExpandedRowModel(),\n    getRowCanExpand,\n    meta: {\n      editedRows,\n      setEditedRows,\n      validRows,\n      setValidRows,\n      pendingCreate,\n      setPendingCreate,\n      onRemove: handleOnRemove,\n      onUpdate: handleUpdate,\n      revertData: handleRevertData,\n      updateRow: handleUpdateRow,\n      updateData: handleUpdateData,\n      createRow: handleCreateRow,\n      removeRow: handleRemoveRow,\n      removeSelectedRows: handleRemoveSelectedRows,\n    },\n    manualPagination: true,\n    manualFiltering: true,\n  });\n\n  return { table };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/blocks/server-table/hooks/use-querry.ts",
      "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nexport interface Student {\n  id: string;\n  studentNumber: string;\n  name: string;\n  dateOfBirth: string;\n  major: string;\n  createdAt: string;\n}\n\nconst url = \"http://localhost:5000/students\";\n\nasync function updateRequest(id: string, data: Student) {\n  const response = await fetch(`${url}/${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  return response.json();\n}\n\nasync function addRequest(data: Student) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  });\n  return response.json();\n}\n\nasync function deleteRequest(id: string) {\n  const response = await fetch(`${url}/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.json();\n}\n\nasync function getRequest() {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  // Mengurutkan data secara descending berdasarkan createdAt\n  const sortedData = data.sort(\n    (a: Student, b: Student) =>\n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n  );\n\n  return sortedData;\n}\n\nexport default function useStudents() {\n  const queryClient = useQueryClient();\n\n  // Query for fetching students\n  const { data, isLoading } = useQuery({\n    queryKey: [\"students\"],\n    queryFn: getRequest,\n    initialData: [],\n  });\n\n  // Mutation for updating a student\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Student }) =>\n      updateRequest(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\n    },\n  });\n\n  // Mutation for deleting a student\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => deleteRequest(id),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\n    },\n  });\n\n  // Mutation for adding a student\n  const addMutation = useMutation({\n    mutationFn: (data: Student) => addRequest(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\n    },\n  });\n\n  return {\n    data: data ?? [],\n    isLoading,\n    createRow: (postData: Student) => addMutation.mutate(postData),\n    updateRow: (id: string, postData: Student) =>\n      updateMutation.mutate({ id, data: postData }),\n    removeRow: (id: string) => deleteMutation.mutate(id),\n  };\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/schema/table.ts",
      "content": "import {\n  createSearchParamsCache,\n  parseAsInteger,\n  parseAsString,\n} from \"nuqs/server\";\nimport { z, ZodType } from \"zod\";\n\nexport const searchParamsCache = createSearchParamsCache({\n  page: parseAsInteger.withDefault(1),\n  perPage: parseAsInteger.withDefault(10),\n  search: parseAsString.withDefault(\"\"),\n});\n\nexport type QuerySchema = Awaited<ReturnType<typeof searchParamsCache.parse>>;\n\n\nexport class UserSchema {\n  static readonly CREATE: ZodType = z.object({\n    name: z.string(),\n    email: z.string().email(),\n    phone: z.string(),\n    image: z.string(),\n  });\n\n  static readonly UPDATE: ZodType = z.object({\n    id: z.string(),\n    name: z.string().optional(),\n    email: z.string().email().optional(),\n    phone: z.string().optional(),\n    image: z.string().optional(),\n  });\n}\n\nexport const searchParams = z.object({\n  page: z.number().default(1),\n  perPage: z.number().max(50).default(10),\n  search: z.string().optional(),\n});\n",
      "type": "registry:lib",
      "target": "lib/schema/table.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/types/data-table.d.ts",
      "content": "import \"@tanstack/react-table\";\nimport { ColumnDef, Row, RowData } from \"@tanstack/react-table\";\nimport { ZodType, ZodTypeDef } from \"zod\";\n\nexport interface BaseData {\n  id: string;\n}\n\nexport interface PendingCreate<TData> {\n  data: TData;\n  index: number;\n}\n\nexport interface RowValidationState {\n  isValid: boolean;\n  fields: Record<string, boolean>;\n}\n\ndeclare module \"@tanstack/react-table\" {\n  interface ColumnMeta<TData extends RowData, TValue> {\n    disabled?: boolean | ((row: Row<TData>) => boolean)\n    type?: 'text' | 'number' | 'date' | 'select' | 'combobox' | 'password'\n    schema?: ZodType<any, ZodTypeDef, any>,\n    options?: { label: string; value: string }[]\n  }\n\n  interface TableMeta<TData extends RowData> {\n    editedRows?: Record<string, boolean>;\n    setEditedRows?: React.Dispatch<\n      React.SetStateAction<Record<string, boolean>>\n    >;\n    validRows?: Record<string, Record<string, boolean>>;\n    setValidRows?: React.Dispatch<\n      React.SetStateAction<Record<string, Record<string, boolean>>>\n    >;\n    rowOriginal?: TData | undefined;\n    setRowOriginal?: React.Dispatch<React.SetStateAction<TData | undefined>>;\n    revertData?: (rowIndex: number) => void;\n    updateRow?: (rowIndex: number) => void;\n    updateData?: (\n      rowIndex: number,\n      columnId: string,\n      value: TData,\n      isValid: boolean\n    ) => void;\n    createRow?: () => void;\n    removeRow?: (rowIndex: number) => void;\n    removeSelectedRows?: (selectedRows: number[]) => void;\n    onRemove?: (id: string) => void;\n    onUpdate?: (payload: TData) => void;\n    pendingCreate?: PendingCreate<TData> | null;\n    setPendingCreate?: React.Dispatch<\n      React.SetStateAction<PendingCreate<TData> | null>\n    >;\n  }\n}",
      "type": "registry:lib",
      "target": "lib/types/table.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/types/index.ts",
      "content": "export type Option = {\n  label: string;\n  value: string;\n};\n",
      "type": "registry:lib",
      "target": "lib/types/index.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/block/columns.tsx",
      "content": "import { ColumnDef } from '@tanstack/react-table'\nimport { DataTableColumnHeader } from '@/registry/blocks/server-table/block/data-table-column-header'\nimport { EditedCell } from './edit-table-row-action'\nimport { EditTableCell } from '@/registry/blocks/server-table/block/edit-table-cell'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Student } from '@/registry/blocks/server-table/hooks/use-querry'\nimport { z } from 'zod'\n\nexport const columns: ColumnDef<Student>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        className=\"translate-y-[2px]\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: 'no',\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"No\" />,\n    cell: ({ row }) => <div className=\"w-[80px]\">{row.index + 1}</div>,\n    enableSorting: false,\n    enableHiding: false\n  },\n  {\n    accessorKey: 'name',\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Full Name\" />,\n    cell: ({ column, getValue, row, table }) => (\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\n    ),\n    meta: {\n      type: 'text',\n      schema: z.string().min(1, { message: 'Name is required boss' })\n    }\n  },\n  {\n    accessorKey: 'dateOfBirth',\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Date Of Birth\" />,\n    cell: ({ column, getValue, row, table }) => (\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\n    ),\n    meta: {\n      type: 'date',\n    }\n  },\n  {\n    accessorKey: 'major',\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Major\" />,\n    cell: ({ column, getValue, row, table }) => (\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\n    ),\n    meta: {\n      type: 'select',\n      options: [\n        { value: 'Computer Science', label: 'Computer Science' },\n        { value: 'Communications', label: 'Communications' },\n        { value: 'Business', label: 'Business' },\n        { value: 'Psychology', label: 'Psychology' }\n      ],\n    }\n  },\n  {\n    id: 'actions',\n    cell: ({ row, table }) => <EditedCell title={row.getValue('name')} row={row} table={table} />\n  }\n]\n",
      "type": "registry:component",
      "target": "components/block/server-table/columns.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\";\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title: string;\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>;\n  }\n\n  return (\n    <div className={cn(\"flex items-center space-x-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ChevronsUpDown />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUp className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDown className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeOff className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-column-header.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-faceted-filter.tsx",
      "content": "import * as React from \"react\";\nimport { Column } from \"@tanstack/react-table\";\nimport { Check, PlusCircle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface DataTableFacetedFilterProps<TData, TValue> {\n  column?: Column<TData, TValue>;\n  title?: string;\n  options: {\n    label: string;\n    value: string;\n    icon?: React.ComponentType<{ className?: string }>;\n  }[];\n}\n\nexport function DataTableFacetedFilter<TData, TValue>({\n  column,\n  title,\n  options,\n}: DataTableFacetedFilterProps<TData, TValue>) {\n  const facets = column?.getFacetedUniqueValues();\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\n          <PlusCircle />\n          {title}\n          {selectedValues?.size > 0 && (\n            <>\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\n              <Badge\n                variant=\"secondary\"\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\n              >\n                {selectedValues.size}\n              </Badge>\n              <div className=\"hidden space-x-1 lg:flex\">\n                {selectedValues.size > 2 ? (\n                  <Badge\n                    variant=\"secondary\"\n                    className=\"rounded-sm px-1 font-normal\"\n                  >\n                    {selectedValues.size} selected\n                  </Badge>\n                ) : (\n                  options\n                    .filter((option) => selectedValues.has(option.value))\n                    .map((option) => (\n                      <Badge\n                        variant=\"secondary\"\n                        key={option.value}\n                        className=\"rounded-sm px-1 font-normal\"\n                      >\n                        {option.label}\n                      </Badge>\n                    ))\n                )}\n              </div>\n            </>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder={title} />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => {\n                const isSelected = selectedValues.has(option.value);\n                return (\n                  <CommandItem\n                    key={option.value}\n                    onSelect={() => {\n                      if (isSelected) {\n                        selectedValues.delete(option.value);\n                      } else {\n                        selectedValues.add(option.value);\n                      }\n                      const filterValues = Array.from(selectedValues);\n                      column?.setFilterValue(\n                        filterValues.length ? filterValues : undefined\n                      );\n                    }}\n                  >\n                    <div\n                      className={cn(\n                        \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\n                        isSelected\n                          ? \"bg-primary text-primary-foreground\"\n                          : \"opacity-50 [&_svg]:invisible\"\n                      )}\n                    >\n                      <Check />\n                    </div>\n                    {option.icon && (\n                      <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\n                    )}\n                    <span>{option.label}</span>\n                    {facets?.get(option.value) && (\n                      <span className=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\">\n                        {facets.get(option.value)}\n                      </span>\n                    )}\n                  </CommandItem>\n                );\n              })}\n            </CommandGroup>\n            {selectedValues.size > 0 && (\n              <>\n                <CommandSeparator />\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => column?.setFilterValue(undefined)}\n                    className=\"justify-center text-center\"\n                  >\n                    Clear filters\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-faceted-filter.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>;\n  pageSizeOptions?: number[];\n}\n\nexport function DataTablePagination<TData>({\n  table,\n  pageSizeOptions = [10, 20, 30, 40, 50],\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between px-2\">\n      <div className=\"flex-1 text-sm text-muted-foreground\">\n        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s) selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {pageSizeOptions.map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"h-8 w-8 p-0\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-pagination.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-toolbar.tsx",
      "content": "'use client'\n\nimport { Table } from '@tanstack/react-table'\nimport { X } from 'lucide-react'\n\nimport { Button } from '@/components/ui/button'\nimport { DataTableViewOptions } from './data-table-view-options'\nimport { DataTableFacetedFilter } from '@/registry/blocks/server-table/block/data-table-faceted-filter'\nimport { cn } from '@/lib/utils'\nimport { DebouncedInput } from '@/registry/ui/debounce-input'\n\ninterface DataTableToolbarProps<TData> extends React.HTMLAttributes<HTMLDivElement> {\n  table: Table<TData>\n  facetedFilters?: {\n    column: string\n    title: string\n    options: {\n      label: string\n      value: string\n      icon?: React.ComponentType<{ className?: string }>\n    }[]\n  }[]\n}\nexport function DataTableToolbar<TData>({\n  table,\n  facetedFilters,\n  children,\n  className,\n  ...props\n}: DataTableToolbarProps<TData>) {\n  const isFiltered = table.getState().columnFilters.length > 0\n  const meta = table.options.meta\n  const selectedRows = table.getSelectedRowModel().rows\n\n  const removeRows = () => {\n    meta?.removeSelectedRows!(table.getSelectedRowModel().rows.map((row) => row.index))\n    table.resetRowSelection()\n  }\n  const global = table.getState().globalFilter\n\n  return (\n    <div className={cn('flex w-full items-center justify-between gap-2 overflow-auto p-1', className)} {...props}>\n      <div className=\"flex flex-1 items-center space-x-2\">\n        <DebouncedInput\n          className=\"-ms-1 h-8 w-[150px] lg:w-[250px]\"\n          value={global}\n          placeholder=\"Search...\"\n          onChange={(value) => table.setGlobalFilter(String(value).trim())}\n        />\n        {facetedFilters?.map((filter) => (\n          <DataTableFacetedFilter\n            key={filter.column}\n            column={table.getColumn(filter.column)}\n            title={filter.title}\n            options={filter.options}\n          />\n        ))}\n        {isFiltered && (\n          <Button variant=\"ghost\" onClick={() => table.resetColumnFilters()} className=\"h-8 px-2 lg:px-3\">\n            Reset\n            <X />\n          </Button>\n        )}\n        {selectedRows.length > 0 && (\n          <Button variant=\"destructive\" size={'sm'} onClick={removeRows}>\n            {`Delete ${selectedRows.length} Selected`}\n          </Button>\n        )}\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        {children}\n        <DataTableViewOptions table={table} />\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-toolbar.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-view-options.tsx",
      "content": "\"use client\";\n\nimport { Table } from \"@tanstack/react-table\";\nimport { Settings2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface DataTableViewOptionsProps<TData> {\n  table: Table<TData>;\n}\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: DataTableViewOptionsProps<TData>) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"ml-auto hidden h-8 lg:flex\"\n        >\n          <Settings2 />\n          View\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        {table\n          .getAllColumns()\n          .filter(\n            (column) =>\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n          )\n          .map((column) => {\n            return (\n              <DropdownMenuCheckboxItem\n                key={column.id}\n                className=\"capitalize\"\n                checked={column.getIsVisible()}\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\n              >\n                {column.id}\n              </DropdownMenuCheckboxItem>\n            );\n          })}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-view-options.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  type Table as TanstackTable,\n  flexRender,\n  Row,\n} from \"@tanstack/react-table\";\nimport React from \"react\";\nimport { DataTablePagination } from \"./data-table-pagination\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface DataTableProps<TData>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The table instance returned from useDataTable hook with pagination, sorting, filtering, etc.\n   * @type TanstackTable<TData>\n   */\n  table: TanstackTable<TData>;\n  /**\n   * Callback for handling row clicks.\n   * @param row - The row data that was clicked.\n   */\n  onRowClick?: (row: TData) => void;\n\n  /**\n   * Function to render a sub-component for expandable rows.\n   * @param props - The row properties.\n   * @returns A React element.\n   */\n  renderSubComponent?: (props: { row: Row<TData> }) => React.ReactElement;\n\n  /**\n   * Whether to show pagination controls.\n   * @default true\n   */\n  showPagination?: boolean;\n}\n\nexport function DataTable<TData>({\n  table,\n  onRowClick,\n  renderSubComponent,\n  showPagination = true,\n  children,\n  className,\n  ...props\n}: DataTableProps<TData>) {\n  return (\n    <div className={cn('w-full space-y-2.5 overflow-auto', className)} {...props}>\n      {children}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id} colSpan={header.colSpan}>\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <React.Fragment key={`fragment-${row.id}`}>\n                  <TableRow\n                    className={onRowClick ? 'cursor-pointer' : ''}\n                    onClick={() => onRowClick && onRowClick(row.original)}\n                    data-state={row.getIsSelected() && 'selected'}\n                  >\n                    {row.getVisibleCells().map((cell) => (\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\n                    ))}\n                  </TableRow>\n                  {row.getIsExpanded() && renderSubComponent && (\n                    <TableRow>\n                      <TableCell colSpan={row.getVisibleCells().length}>{renderSubComponent({ row })}</TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={table.getAllColumns().length} className=\"h-24 text-center\">\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      {showPagination && <DataTablePagination table={table} />}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/edit-table-cell.tsx",
      "content": "import { Input } from '@/registry/ui/input'\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { cn } from '@/lib/utils'\nimport { Column, Row, Table } from '@tanstack/react-table'\nimport { useState, useEffect, ChangeEvent } from 'react'\nimport { Option } from '@/registry/blocks/server-table/lib/types'\nimport { ZodError } from 'zod'\n\ntype EditTableCellProps<TData> = {\n  getValue: () => any\n  row: Row<TData>\n  column: Column<TData>\n  table: Table<TData>\n}\n\nexport function EditTableCell<TData>({ getValue, row, column, table }: EditTableCellProps<TData>) {\n  const initValue = getValue()\n  const columnMeta = column.columnDef.meta\n  const tableMeta = table.options.meta\n  const [value, setValue] = useState(initValue)\n  const [valMsg, setvalMsg] = useState('')\n\n  if (!tableMeta || !columnMeta || !tableMeta.editedRows) {\n    throw new Error('Table meta or column meta is not defined')\n  }\n\n  useEffect(() => {\n    if (tableMeta.editedRows && tableMeta.editedRows[row.id]) {\n      validateInput(initValue)\n    }\n  }, [tableMeta.editedRows[row.id]])\n\n  useEffect(() => {\n    setValue(initValue)\n    if (tableMeta.editedRows && tableMeta.editedRows[row.id]) {\n      validateInput(initValue)\n    }\n  }, [initValue])\n\n  const validateInput = (inputValue: any) => {\n    let message = ''\n    let isValid = true\n\n    // Zod validation\n    if (columnMeta.schema) {\n      try {\n        columnMeta.schema.parse(inputValue)\n      } catch (error) {\n        if (error instanceof ZodError) {\n          message = error.errors[0]?.message ?? 'Invalid input'\n          isValid = false\n        }\n      }\n    }\n\n    setvalMsg(message)\n    tableMeta.updateData!(row.index, column.id, inputValue, isValid)\n    return isValid\n  }\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setValue(newValue)\n    validateInput(newValue)\n  }\n\n  const handleSelectChange = (newValue: string) => {\n    setValue(newValue)\n    validateInput(newValue)\n  }\n\n  const isDisabled = typeof columnMeta.disabled === 'function' ? columnMeta.disabled(row) : columnMeta.disabled\n\n  const renderInputField = () => {\n    switch (columnMeta.type) {\n      case 'select':\n        return (\n          <div className=\"w-full\">\n            <Select onValueChange={handleSelectChange} defaultValue={initValue}>\n              <SelectTrigger\n                data-error={!!valMsg}\n                title={valMsg}\n                disabled={isDisabled}\n                className={cn(\n                  'w-full data-[error=true]:text-destructive data-[error=true]:ring-destructive data-[error=true]:border-none'\n                )}\n              >\n                <SelectValue placeholder=\"Select an option\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectGroup>\n                  {columnMeta.options!.map((option: Option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectGroup>\n              </SelectContent>\n            </Select>\n            {valMsg && <p className=\"text-[10px] mt-0.5 text-destructive\">{valMsg}</p>}\n          </div>\n        )\n\n      default:\n        return (\n          <div className=\"w-full\">\n            <Input\n              className={cn(\n                'h-9 data-[error=true]:text-destructive data-[error=true]:ring-destructive data-[error=true]:border-none'\n              )}\n              value={value}\n              data-error={!!valMsg}\n              title={valMsg}\n              disabled={isDisabled}\n              onChange={handleChange}\n              type={columnMeta.type || 'text'}\n            />\n          </div>\n        )\n    }\n  }\n\n  if (!tableMeta.editedRows[row.id]) {\n    return <span className=\"w-auto\">{value}</span>\n  }\n\n  return renderInputField()\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/edit-table-cell.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/edit-table-row-action.tsx",
      "content": "import { MouseEvent, useEffect, useCallback } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Check, Pencil, Trash, X } from 'lucide-react'\nimport { Row, Table } from '@tanstack/react-table'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger\n} from '@/components/ui/alert-dialog'\n\ninterface EditedCellProps<TData> {\n  title: string\n  row: Row<TData>\n  table: Table<TData>\n}\n\nexport function EditedCell<TData>({ row, table, title }: EditedCellProps<TData>) {\n  const meta = table.options.meta\n\n  if (!meta || !meta.validRows || !meta.editedRows) {\n    throw new Error('Table meta is not defined')\n  }\n\n  const validRow = meta.validRows[row.id]\n  const removeRow = () => {\n    meta.removeRow!(row.index)\n  }\n\n\n  const disableSubmit = validRow ? Object.values(validRow).some((item) => !item) : false\n\n  const handleAction = useCallback(\n    (action: 'edit' | 'cancel' | 'done') => {\n      meta.setEditedRows!((old: Record<string, boolean>) => ({\n        ...old,\n        [row.id]: action === 'edit' ? true : false\n      }))\n\n      if (action !== 'edit') {\n        if (action === 'cancel') {\n          meta.revertData!(row.index)\n        } else {\n          meta.updateRow!(row.index)\n        }\n      }\n    },\n    [row.id, row.index, meta]\n  )\n\n  const setEditedRows = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      const action = e.currentTarget.name as 'edit' | 'cancel' | 'done'\n      handleAction(action)\n    },\n    [handleAction]\n  )\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Enter') {\n        event.preventDefault()\n        if (meta.editedRows && meta.editedRows[row.id] && !disableSubmit) {\n          handleAction('done')\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleAction, row.id, meta.editedRows, disableSubmit])\n\n  return meta.editedRows[row.id] ? (\n    <div className=\"flex items-center gap-2\">\n      <Button title=\"Cancel\" size={'icon'} onClick={setEditedRows} name=\"cancel\">\n        <X size={16} />\n      </Button>\n\n      <Button\n        size={'icon'}\n        onClick={setEditedRows}\n        name=\"done\"\n        title=\"Done\"\n        disabled={disableSubmit}\n        className={disableSubmit ? 'cursor-not-allowed' : ''}\n      >\n        <Check size={16} />\n      </Button>\n    </div>\n  ) : (\n    <div className=\"flex items-center gap-2\">\n      <Button title=\"Edit\" size={'icon'} onClick={setEditedRows} name=\"edit\">\n        <Pencil size={16} />\n      </Button>\n\n      <AlertDialog>\n        <AlertDialogTrigger title=\"Delete\" asChild>\n          <Button size={'icon'} variant={'destructive'} name=\"delete\">\n            <Trash size={16} />\n          </Button>\n        </AlertDialogTrigger>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Apakah Kamu yakin?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Menghapus data <span className=\"font-bold\">{title}</span>?.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={removeRow}>Continue</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/server-table/edit-table-row-action.tsx"
    }
  ]
}