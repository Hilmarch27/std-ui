{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "server-table",
  "type": "registry:block",
  "title": "Server Side Table",
  "description": "A simple Server Side Table",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table",
    "zod",
    "sonner",
    "@tanstack/react-query",
    "nuqs"
  ],
  "registryDependencies": [
    "table",
    "button",
    "dropdown-menu",
    "checkbox",
    "badge",
    "command",
    "popover",
    "separator",
    "select",
    "alert-dialog",
    "input",
    "sonner",
    "https://std-ui.vercel.app/r/calendar"
  ],
  "files": [
    {
      "path": "src/registry/blocks/server-table/hooks/use-data-table.ts",
      "content": "import {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  ExpandedState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getExpandedRowModel,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  Row,\r\n  PaginationState,\r\n  Updater,\r\n  TableState,\r\n  TableOptions,\r\n  RowSelectionState\r\n} from '@tanstack/react-table'\r\nimport React from 'react'\r\nimport { parseAsArrayOf, parseAsInteger, parseAsString, Parser, useQueryState, useQueryStates } from 'nuqs'\r\nimport { sortByToState, stateToSortBy } from '../lib/table-utils'\r\nimport { useDebouncedCallback } from '@/registry/hooks/use-debounced-callback'\r\n\r\ninterface UseDataTableProps<TData>\r\n  extends Omit<\r\n      TableOptions<TData>,\r\n      'state' | 'pageCount' | 'getCoreRowModel' | 'manualFiltering' | 'manualPagination' | 'manualSorting'\r\n    >,\r\n    Required<Pick<TableOptions<TData>, 'pageCount'>> {\r\n  columns: ColumnDef<TData>[]\r\n  data: TData[]\r\n  originalData?: TData[]\r\n  createEmptyRow?: () => Partial<TData>\r\n  setData?: React.Dispatch<React.SetStateAction<TData[]>>\r\n  updateRow?: (id: string, payload: TData) => void\r\n  createRow?: (payload: TData) => void\r\n  removeRow?: (id: string) => void\r\n  getRowCanExpand?: (row: Row<TData>) => boolean\r\n  onRemove?: (id: string) => void\r\n  onUpdate?: (payload: TData) => void\r\n  initialState?: Partial<TableState>\r\n}\r\n\r\nexport function useDataTable<TData>(props: UseDataTableProps<TData>) {\r\n  const {\r\n    columns,\r\n    data,\r\n    originalData,\r\n    initialState,\r\n    createEmptyRow,\r\n    setData,\r\n    updateRow,\r\n    createRow,\r\n    removeRow,\r\n    getRowCanExpand,\r\n    onRemove,\r\n    onUpdate,\r\n    pageCount = -1,\r\n    ...tableProps\r\n  } = props\r\n\r\n  // * states\r\n  const [rowSelection, setRowSelection] = React.useState<RowSelectionState>(initialState?.rowSelection ?? {})\r\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(initialState?.columnVisibility ?? {})\r\n\r\n  const [editedRows, setEditedRows] = React.useState<Record<string, boolean>>({})\r\n\r\n  const [validRows, setValidRows] = React.useState<Record<string, Record<string, boolean>>>({})\r\n  const [pendingCreate, setPendingCreate] = React.useState<{\r\n    data: TData\r\n    index: number\r\n  } | null>(null)\r\n  const [expanded, setExpanded] = React.useState<ExpandedState>({})\r\n\r\n  const [page, setPage] = useQueryState('page', parseAsInteger.withDefault(1).withOptions({ shallow: false }))\r\n  const [perPage, setPerPage] = useQueryState(\r\n    'perPage',\r\n    parseAsInteger\r\n      .withDefault(10)\r\n      .withOptions({ shallow: false })\r\n      .withDefault(initialState?.pagination?.pageSize ?? 10)\r\n  )\r\n\r\n  // * row actions\r\n  const handleOnRemove = (id: string) => {\r\n    onRemove!(id)\r\n  }\r\n\r\n  const handleUpdate = (payload: TData) => {\r\n    onUpdate!(payload)\r\n  }\r\n\r\n  // * paginate\r\n  const pagination: PaginationState = {\r\n    pageIndex: page - 1, // zero-based index -> one-based index\r\n    pageSize: perPage\r\n  }\r\n\r\n  function onPaginationChange(updaterOrValue: Updater<PaginationState>) {\r\n    if (typeof updaterOrValue === 'function') {\r\n      const newPagination = updaterOrValue(pagination)\r\n      void setPage(newPagination.pageIndex + 1)\r\n      void setPerPage(newPagination.pageSize)\r\n    } else {\r\n      void setPage(updaterOrValue.pageIndex + 1)\r\n      void setPerPage(updaterOrValue.pageSize)\r\n    }\r\n  }\r\n\r\n  // * sorting\r\n  const [sorting, setSorting] = useQueryState(\r\n    'sort',\r\n    parseAsString.withDefault(stateToSortBy(initialState?.sorting) ?? '').withOptions({ shallow: false })\r\n  )\r\n  const sortingState = sortByToState(sorting)\r\n\r\n  const onSortingChange = React.useCallback(\r\n    (updaterOrValue: Updater<SortingState>) => {\r\n      const newSortingState = typeof updaterOrValue === 'function' ? updaterOrValue(sortingState) : updaterOrValue\r\n\r\n      // Pastikan kita tidak pernah melewatkan undefined ke setSorting\r\n      const newSortValue = stateToSortBy(newSortingState)\r\n      return setSorting(newSortValue)\r\n    },\r\n    [sorting, setSorting]\r\n  )\r\n\r\n  // * filtering\r\n  const filterableColumns = React.useMemo(() => {\r\n    return columns.filter((column) => column.enableColumnFilter)\r\n  }, [columns])\r\n\r\n  const filterParsers = React.useMemo(() => {\r\n    return filterableColumns.reduce<Record<string, Parser<string> | Parser<string[]>>>((acc, column) => {\r\n      if (column.meta?.options) {\r\n        acc[column.id ?? ''] = parseAsArrayOf(parseAsString, ',').withOptions({ shallow: false })\r\n      } else {\r\n        acc[column.id ?? ''] = parseAsString.withOptions({ shallow: false })\r\n      }\r\n      return acc\r\n    }, {})\r\n  }, [filterableColumns])\r\n\r\n  const [filterValues, setFilterValues] = useQueryStates(filterParsers)\r\n\r\n  const debouncedSetFilterValues = useDebouncedCallback((values: typeof filterValues) => {\r\n    void setPage(1)\r\n    void setFilterValues(values)\r\n  }, 300)\r\n\r\n  const initialColumnFilters: ColumnFiltersState = React.useMemo(() => {\r\n    return Object.entries(filterValues).reduce<ColumnFiltersState>((filters, [key, value]) => {\r\n      if (value !== null) {\r\n        const processedValue = Array.isArray(value)\r\n          ? value\r\n          : typeof value === 'string' && /[^a-zA-Z0-9]/.test(value)\r\n          ? value.split(/[^a-zA-Z0-9]+/).filter(Boolean)\r\n          : [value]\r\n\r\n        filters.push({\r\n          id: key,\r\n          value: processedValue\r\n        })\r\n      }\r\n      return filters\r\n    }, [])\r\n  }, [filterValues])\r\n\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(initialColumnFilters)\r\n\r\n  const onColumnFiltersChange = React.useCallback(\r\n    (updaterOrValue: Updater<ColumnFiltersState>) => {\r\n      setColumnFilters((prev) => {\r\n        const next = typeof updaterOrValue === 'function' ? updaterOrValue(prev) : updaterOrValue\r\n\r\n        const filterUpdates = next.reduce<Record<string, string | string[] | null>>((acc, filter) => {\r\n          if (filterableColumns.find((column) => column.id === filter.id)) {\r\n            acc[filter.id] = filter.value as string | string[]\r\n          }\r\n          return acc\r\n        }, {})\r\n\r\n        for (const prevFilter of prev) {\r\n          if (!next.some((filter) => filter.id === prevFilter.id)) {\r\n            filterUpdates[prevFilter.id] = null\r\n          }\r\n        }\r\n\r\n        debouncedSetFilterValues(filterUpdates)\r\n        return next\r\n      })\r\n    },\r\n    [debouncedSetFilterValues, filterableColumns]\r\n  )\r\n\r\n  // * editable functions\r\n  const handleRevertData = (rowIndex: number) => {\r\n    if (pendingCreate?.index === rowIndex) {\r\n      setData!((old) => old.filter((_, index) => index !== rowIndex))\r\n      setPendingCreate(null)\r\n      setValidRows((old) => {\r\n        const newValidRows = { ...old }\r\n        delete newValidRows[rowIndex]\r\n        return newValidRows\r\n      })\r\n    } else {\r\n      setData!((old) => old.map((row, index) => (index === rowIndex ? originalData![rowIndex]! : row)))\r\n    }\r\n  }\r\n\r\n  const handleUpdateRow = (rowIndex: number, rowId: string) => {\r\n    if (pendingCreate?.index === rowIndex && createRow && data[rowIndex]) {\r\n      createRow(data[rowIndex])\r\n      setPendingCreate(null)\r\n    } else if (updateRow && data[rowIndex]) {\r\n      updateRow(rowId, data[rowIndex])\r\n    }\r\n  }\r\n\r\n  const handleUpdateData = (rowIndex: number, columnId: string, value: TData, isValid: boolean) => {\r\n    setData!((old: TData[]) =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex]!,\r\n            [columnId]: value\r\n          }\r\n        }\r\n        return row\r\n      })\r\n    )\r\n    setValidRows((old) => ({\r\n      ...old,\r\n      [rowIndex]: { ...old[rowIndex], [columnId]: isValid }\r\n    }))\r\n  }\r\n\r\n  const handleCreateRow = () => {\r\n    if (!createEmptyRow) throw new Error('createEmptyRow required')\r\n    const newRow = createEmptyRow() as TData\r\n    setData!((old) => [newRow, ...old])\r\n\r\n    setPendingCreate({\r\n      data: newRow,\r\n      index: 0\r\n    })\r\n\r\n    setEditedRows((old) => ({\r\n      ...old,\r\n      create: true\r\n    }))\r\n  }\r\n\r\n  const handleRemoveRow = (rowIndex: number, rowId: string) => {\r\n    if (pendingCreate?.index === rowIndex) {\r\n      setData!((old) => old.filter((_, index) => index !== rowIndex))\r\n      setPendingCreate(null)\r\n      setValidRows((old) => {\r\n        const newValidRows = { ...old }\r\n        delete newValidRows[rowIndex]\r\n        return newValidRows\r\n      })\r\n    } else if (removeRow) {\r\n      removeRow(rowId)\r\n    }\r\n  }\r\n\r\n  const handleRemoveSelectedRows = (rowIds: string[]) => {\r\n    rowIds.forEach((rowid, rowIndex) => {\r\n      if (pendingCreate?.index !== rowIndex && removeRow) {\r\n        removeRow(rowid)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   ** Table Configuration\r\n   */\r\n  const table = useReactTable({\r\n    ...tableProps,\r\n    initialState,\r\n    data,\r\n    columns,\r\n    pageCount,\r\n    state: {\r\n      pagination,\r\n      sorting: sortingState,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n      expanded\r\n    },\r\n    defaultColumn: {\r\n      ...tableProps.defaultColumn,\r\n      enableColumnFilter: false\r\n    },\r\n    columnResizeMode: 'onChange',\r\n    enableRowSelection: true,\r\n    onPaginationChange,\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange,\r\n    onColumnFiltersChange,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n    onExpandedChange: setExpanded,\r\n    getExpandedRowModel: getExpandedRowModel(),\r\n    getRowCanExpand,\r\n    meta: {\r\n      editedRows,\r\n      setEditedRows,\r\n      validRows,\r\n      setValidRows,\r\n      pendingCreate,\r\n      setPendingCreate,\r\n      onRemove: handleOnRemove,\r\n      onUpdate: handleUpdate,\r\n      revertData: handleRevertData,\r\n      updateRow: handleUpdateRow,\r\n      updateData: handleUpdateData,\r\n      createRow: handleCreateRow,\r\n      removeRow: handleRemoveRow,\r\n      removeSelectedRows: handleRemoveSelectedRows\r\n    },\r\n    manualPagination: true,\r\n    manualFiltering: true,\r\n    manualSorting: true\r\n  })\r\n\r\n  return { table }\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/blocks/server-table/hooks/use-querry.ts",
      "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nexport interface Student {\r\n  id: string;\r\n  studentNumber: string;\r\n  name: string;\r\n  dateOfBirth: string;\r\n  major: string;\r\n  createdAt: string;\r\n}\r\n\r\nconst url = \"http://localhost:5000/students\";\r\n\r\nasync function updateRequest(id: string, data: Student) {\r\n  const response = await fetch(`${url}/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function addRequest(data: Student) {\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function deleteRequest(id: string) {\r\n  const response = await fetch(`${url}/${id}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function getRequest() {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  // Mengurutkan data secara descending berdasarkan createdAt\r\n  const sortedData = data.sort(\r\n    (a: Student, b: Student) =>\r\n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n  );\r\n\r\n  return sortedData;\r\n}\r\n\r\nexport default function useStudents() {\r\n  const queryClient = useQueryClient();\r\n\r\n  // Query for fetching students\r\n  const { data, isLoading } = useQuery({\r\n    queryKey: [\"students\"],\r\n    queryFn: getRequest,\r\n    initialData: [],\r\n  });\r\n\r\n  // Mutation for updating a student\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: Student }) =>\r\n      updateRequest(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  // Mutation for deleting a student\r\n  const deleteMutation = useMutation({\r\n    mutationFn: (id: string) => deleteRequest(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  // Mutation for adding a student\r\n  const addMutation = useMutation({\r\n    mutationFn: (data: Student) => addRequest(data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  return {\r\n    data: data ?? [],\r\n    isLoading,\r\n    createRow: (postData: Student) => addMutation.mutate(postData),\r\n    updateRow: (id: string, postData: Student) =>\r\n      updateMutation.mutate({ id, data: postData }),\r\n    removeRow: (id: string) => deleteMutation.mutate(id),\r\n  };\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/hooks/use-callback-ref.ts",
      "content": "import * as React from 'react'\r\n\r\n/**\r\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\r\n */\r\n\r\n/**\r\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\r\n * prop or avoid re-executing effects when passed as a dependency\r\n */\r\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(callback: T | undefined): T {\r\n  const callbackRef = React.useRef(callback)\r\n\r\n  React.useEffect(() => {\r\n    callbackRef.current = callback\r\n  })\r\n\r\n  // https://github.com/facebook/react/issues/19240\r\n  return React.useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, [])\r\n}\r\n\r\nexport { useCallbackRef }\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/hooks/use-debounced-callback.ts",
      "content": "/**\r\n * @see https://github.com/mantinedev/mantine/blob/master/packages/@mantine/hooks/src/use-debounced-callback/use-debounced-callback.ts\r\n */\r\n\r\nimport * as React from 'react'\r\n\r\nimport { useCallbackRef } from '@/registry/hooks/use-callback-ref'\r\n\r\nexport function useDebouncedCallback<T extends (...args: never[]) => unknown>(callback: T, delay: number) {\r\n  const handleCallback = useCallbackRef(callback)\r\n  const debounceTimerRef = React.useRef(0)\r\n  React.useEffect(() => () => window.clearTimeout(debounceTimerRef.current), [])\r\n\r\n  const setValue = React.useCallback(\r\n    (...args: Parameters<T>) => {\r\n      window.clearTimeout(debounceTimerRef.current)\r\n      debounceTimerRef.current = window.setTimeout(() => handleCallback(...args), delay)\r\n    },\r\n    [handleCallback, delay]\r\n  )\r\n\r\n  return setValue\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/blocks/server-table/lib/table-utils.ts",
      "content": "import { SortingState } from \"@tanstack/react-table\"\r\n\r\n// Ubah fungsi untuk selalu mengembalikan string atau null (tidak undefined)\r\nexport const stateToSortBy = (sorting: SortingState | undefined): string | null => {\r\n    if (!sorting || sorting.length === 0) return null\r\n\r\n    const sort = sorting[0]\r\n\r\n    return sort ? `${sort.id}.${sort.desc ? 'desc' : 'asc'}` : null\r\n}\r\n\r\n// Pastikan fungsi ini menangani string | null dengan baik\r\nexport const sortByToState = (sortBy: string | null): SortingState => {\r\n  if (!sortBy) return []\r\n\r\n  const parts = sortBy.split('.')\r\n  if (parts.length !== 2) return []\r\n  \r\n  const [id, direction] = parts\r\n  // Pastikan id tidak undefined\r\n  if (!id) return []\r\n  \r\n  return [{ id, desc: direction === 'desc' }]\r\n}",
      "type": "registry:lib"
    },
    {
      "path": "src/registry/blocks/server-table/lib/config/table.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig\r\n\r\nexport const dataTableConfig = {\r\n  filterVariants: [\r\n    'text',\r\n    'number',\r\n    'range',\r\n    'date',\r\n    'dateRange',\r\n    'boolean',\r\n    'select',\r\n    'multiSelect',\r\n    'combobox',\r\n    'password'\r\n  ] as const\r\n}\r\n",
      "type": "registry:lib",
      "target": "lib/config/table.ts"
    },
    {
      "path": "src/registry/blocks/server-table/lib/schema/table.ts",
      "content": "import { createSearchParamsCache, parseAsArrayOf, parseAsInteger, parseAsString } from 'nuqs/server'\r\nimport { z, ZodType } from 'zod'\r\nimport { stateToSortBy } from '../table-utils'\r\nimport { Role } from '@prisma/client';\r\n\r\nconst RoleEnum = z.enum(Object.values(Role) as [string, ...string[]]);\r\n\r\nexport const searchParamsCache = createSearchParamsCache({\r\n  page: parseAsInteger.withDefault(1),\r\n  perPage: parseAsInteger.withDefault(10),\r\n  sort: parseAsString.withDefault(stateToSortBy([{ id: 'name', desc: true }])!),\r\n  name: parseAsString.withDefault(''),\r\n  role: parseAsArrayOf(RoleEnum).withDefault([]),\r\n  createdAt: parseAsArrayOf(z.coerce.number()).withDefault([])\r\n});\r\n\r\n\r\nexport type QuerySchema = Awaited<ReturnType<typeof searchParamsCache.parse>>\r\n\r\nexport class UserSchema {\r\n  static readonly CREATE: ZodType = z.object({\r\n    name: z.string(),\r\n    email: z.string().email(),\r\n    role: RoleEnum,\r\n    phone: z.string(),\r\n    image: z.string()\r\n  })\r\n\r\n  static readonly UPDATE: ZodType = z.object({\r\n    id: z.string(),\r\n    name: z.string().optional(),\r\n    email: z.string().email().optional(),\r\n    role: RoleEnum,\r\n    phone: z.string().optional(),\r\n    image: z.string().optional()\r\n  })\r\n}\r\n\r\nexport const searchParams = z.object({\r\n  page: z.number().default(1),\r\n  perPage: z.number().max(50).default(10),\r\n  sort: z.string().optional(),\r\n  name: z.string().optional(),\r\n  role: z.array(z.string()).default([]),\r\n  createdAt: z.array(z.coerce.number()).default([])\r\n})",
      "type": "registry:lib",
      "target": "lib/schema/table.ts"
    },
    {
      "path": "src/registry/blocks/server-table/lib/types/data-table.ts",
      "content": "import '@tanstack/react-table'\r\nimport {  Row, RowData } from '@tanstack/react-table'\r\nimport { ZodType, ZodTypeDef } from 'zod'\r\nimport { DataTableConfig } from '../config/table'\r\n\r\nexport interface PendingCreate<TData> {\r\n  data: TData\r\n  index: number\r\n}\r\n\r\ndeclare module '@tanstack/react-table' {\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    disabled?: boolean | ((row: Row<TData>) => boolean)\r\n    variant?: FilterVariant\r\n    label?: string\r\n    placeholder?: string\r\n    schema?: ZodType<any, ZodTypeDef, any>\r\n    options?: Option[]\r\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>\r\n  }\r\n\r\n  interface TableMeta<TData extends RowData> {\r\n    editedRows?: Record<string, boolean>\r\n    setEditedRows?: React.Dispatch<React.SetStateAction<Record<string, boolean>>>\r\n    validRows?: Record<string, Record<string, boolean>>\r\n    setValidRows?: React.Dispatch<React.SetStateAction<Record<string, Record<string, boolean>>>>\r\n    rowOriginal?: TData | undefined\r\n    setRowOriginal?: React.Dispatch<React.SetStateAction<TData | undefined>>\r\n    revertData?: (rowIndex: number) => void\r\n    updateRow?: (rowIndex: number, rowId: string) => void\r\n    updateData?: (rowIndex: number, columnId: string, value: TData, isValid: boolean) => void\r\n    createRow?: () => void\r\n    removeRow?: (rowIndex: number, rowId: string) => void\r\n    removeSelectedRows?: (rowIds: string[]) => void\r\n    onRemove?: (id: string) => void\r\n    onUpdate?: (payload: TData) => void\r\n    pendingCreate?: PendingCreate<TData> | null\r\n    setPendingCreate?: React.Dispatch<React.SetStateAction<PendingCreate<TData> | null>>\r\n  }\r\n}\r\n\r\nexport type Option = {\r\n  label: string\r\n  value: string\r\n  count?: number\r\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>\r\n}\r\n\r\nexport type FilterVariant = DataTableConfig['filterVariants'][number]\r\n",
      "type": "registry:lib",
      "target": "lib/types/table.ts"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-date-filter.tsx",
      "content": "'use client'\r\n\r\nimport type { Column } from '@tanstack/react-table'\r\nimport { CalendarIcon, XCircle } from 'lucide-react'\r\nimport * as React from 'react'\r\nimport type { DateRange } from 'react-day-picker'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Calendar } from '@/registry/ui/calendar'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { formatDate } from '@/registry/lib/format'\r\n\r\ntype DateSelection = Date[] | DateRange\r\n\r\nfunction getIsDateRange(value: DateSelection): value is DateRange {\r\n  return value && typeof value === 'object' && !Array.isArray(value)\r\n}\r\n\r\nfunction parseAsDate(timestamp: number | string | undefined): Date | undefined {\r\n  if (!timestamp) return undefined\r\n  const numericTimestamp = typeof timestamp === 'string' ? Number(timestamp) : timestamp\r\n  const date = new Date(numericTimestamp)\r\n  return !Number.isNaN(date.getTime()) ? date : undefined\r\n}\r\n\r\nfunction parseColumnFilterValue(value: unknown) {\r\n  if (value === null || value === undefined) {\r\n    return []\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.map((item) => {\r\n      if (typeof item === 'number' || typeof item === 'string') {\r\n        return item\r\n      }\r\n      return undefined\r\n    })\r\n  }\r\n\r\n  if (typeof value === 'string' || typeof value === 'number') {\r\n    return [value]\r\n  }\r\n\r\n  return []\r\n}\r\n\r\ninterface DataTableDateFilterProps<TData> {\r\n  column: Column<TData, unknown>\r\n  title?: string\r\n  multiple?: boolean\r\n}\r\n\r\nexport function DataTableDateFilter<TData>({ column, title, multiple }: DataTableDateFilterProps<TData>) {\r\n  const columnFilterValue = column.getFilterValue()\r\n\r\n  const selectedDates = React.useMemo<DateSelection>(() => {\r\n    if (!columnFilterValue) {\r\n      return multiple ? { from: undefined, to: undefined } : []\r\n    }\r\n\r\n    if (multiple) {\r\n      const timestamps = parseColumnFilterValue(columnFilterValue)\r\n      return {\r\n        from: parseAsDate(timestamps[0]),\r\n        to: parseAsDate(timestamps[1])\r\n      }\r\n    }\r\n\r\n    const timestamps = parseColumnFilterValue(columnFilterValue)\r\n    const date = parseAsDate(timestamps[0])\r\n    return date ? [date] : []\r\n  }, [columnFilterValue, multiple])\r\n\r\n  const onSelect = React.useCallback(\r\n    (date: Date | DateRange | undefined) => {\r\n      if (!date) {\r\n        column.setFilterValue(undefined)\r\n        return\r\n      }\r\n\r\n      if (multiple && !('getTime' in date)) {\r\n        const from = date.from?.getTime()\r\n        const to = date.to?.getTime()\r\n        column.setFilterValue(from || to ? [from, to] : undefined)\r\n      } else if (!multiple && 'getTime' in date) {\r\n        column.setFilterValue(date.getTime())\r\n      }\r\n    },\r\n    [column, multiple]\r\n  )\r\n\r\n  const onReset = React.useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.stopPropagation()\r\n      column.setFilterValue(undefined)\r\n    },\r\n    [column]\r\n  )\r\n\r\n  const hasValue = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return false\r\n      return selectedDates.from || selectedDates.to\r\n    }\r\n    if (!Array.isArray(selectedDates)) return false\r\n    return selectedDates.length > 0\r\n  }, [multiple, selectedDates])\r\n\r\n  const formatDateRange = React.useCallback((range: DateRange) => {\r\n    if (!range.from && !range.to) return ''\r\n    if (range.from && range.to) {\r\n      return `${formatDate(range.from)} - ${formatDate(range.to)}`\r\n    }\r\n    return formatDate(range.from ?? range.to)\r\n  }, [])\r\n\r\n  const label = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return null\r\n\r\n      const hasSelectedDates = selectedDates.from || selectedDates.to\r\n      const dateText = hasSelectedDates ? formatDateRange(selectedDates) : 'Select date range'\r\n\r\n      return (\r\n        <span className=\"flex items-center gap-2\">\r\n          <span>{title}</span>\r\n          {hasSelectedDates && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"mx-0.5 data-[orientation=vertical]:h-4\" />\r\n              <span>{dateText}</span>\r\n            </>\r\n          )}\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (getIsDateRange(selectedDates)) return null\r\n\r\n    const hasSelectedDate = selectedDates.length > 0\r\n    const dateText = hasSelectedDate ? formatDate(selectedDates[0]) : 'Select date'\r\n\r\n    return (\r\n      <span className=\"flex items-center gap-2\">\r\n        <span>{title}</span>\r\n        {hasSelectedDate && (\r\n          <>\r\n            <Separator orientation=\"vertical\" className=\"mx-0.5 data-[orientation=vertical]:h-4\" />\r\n            <span>{dateText}</span>\r\n          </>\r\n        )}\r\n      </span>\r\n    )\r\n  }, [selectedDates, multiple, formatDateRange, title])\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\r\n          {hasValue ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              onClick={onReset}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <CalendarIcon />\r\n          )}\r\n          {label}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n        {multiple ? (\r\n          <Calendar\r\n            autoFocus\r\n            mode=\"range\"\r\n            selected={getIsDateRange(selectedDates) ? selectedDates : { from: undefined, to: undefined }}\r\n            onSelect={onSelect}\r\n          />\r\n        ) : (\r\n          <Calendar\r\n            autoFocus\r\n            mode=\"single\"\r\n            selected={!getIsDateRange(selectedDates) ? selectedDates[0] : undefined}\r\n            onSelect={onSelect}\r\n          />\r\n        )}\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-date-filter.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/columns.tsx",
      "content": "import { ColumnDef } from '@tanstack/react-table'\r\nimport { DataTableColumnHeader } from '@/registry/blocks/server-table/block/data-table-column-header'\r\nimport { EditTableCell } from '@/registry/blocks/server-table/block/edit-table-cell'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\nimport { Role, User } from '@prisma/client'\r\nimport { EditedCell } from '@/registry/blocks/server-table/block/edit-table-row-action'\r\nimport { z } from 'zod'\r\nimport { CalendarIcon, Text, User as Guest, UserCog, UserCheck, CircleDashed } from 'lucide-react'\r\n\r\nexport function getRoleIcon(status: User['role']) {\r\n  const statusIcons = {\r\n    guest: Guest,\r\n    admin: UserCog,\r\n    user: UserCheck\r\n  }\r\n\r\n  return statusIcons[status] || Guest\r\n}\r\n\r\ntype ColumnUsersProps = {\r\n  roleCount: Record<User['role'], number>\r\n}\r\n\r\nexport function COLUMNS_USERS({ roleCount }: ColumnUsersProps): ColumnDef<User>[] {\r\n  return [\r\n    {\r\n      id: 'select',\r\n      header: ({ table }) => (\r\n        <Checkbox\r\n          checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\r\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n          aria-label=\"Select all\"\r\n          className=\"translate-y-[2px] mb-2\"\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <Checkbox\r\n          checked={row.getIsSelected()}\r\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n          aria-label=\"Select row\"\r\n          className=\"translate-y-[2px] mb-2\"\r\n        />\r\n      ),\r\n      minSize: 30,\r\n      maxSize: 30,\r\n      enableResizing: false,\r\n      enablePinning: false,\r\n      enableSorting: false,\r\n      enableHiding: false\r\n    },\r\n    {\r\n      accessorKey: 'no',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"No\" />,\r\n      cell: ({ row }) => <div>{row.index + 1}</div>,\r\n      minSize: 40,\r\n      maxSize: 40,\r\n      enableSorting: false,\r\n      enablePinning: false,\r\n      enableHiding: false\r\n    },\r\n    {\r\n      id: 'name',\r\n      accessorKey: 'name',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Full Name\" />,\r\n      cell: ({ column, getValue, row, table }) => (\r\n        <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n      ),\r\n      meta: {\r\n        label: 'Name',\r\n        placeholder: 'Search Name...',\r\n        variant: 'text',\r\n        icon: Text,\r\n        schema: z\r\n          .string()\r\n          .min(1, 'minumum 1')\r\n          .regex(/^[^0-9]*$/, 'Name must not contain numbers')\r\n      },\r\n      enableColumnFilter: true\r\n    },\r\n    {\r\n      accessorKey: 'email',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Email\" />,\r\n      cell: ({ column, getValue, row, table }) => (\r\n        <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n      ),\r\n      meta: {\r\n        variant: 'text',\r\n        schema: z.string().email('Invalid email address')\r\n      }\r\n    },\r\n    {\r\n      accessorKey: 'phone',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Phone\" />,\r\n      cell: ({ column, getValue, row, table }) => (\r\n        <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n      ),\r\n      meta: {\r\n        variant: 'text'\r\n      }\r\n    },\r\n    {\r\n      id: 'role',\r\n      accessorKey: 'role',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Roles\" />,\r\n      cell: ({ cell, getValue, row, table, column }) => {\r\n        const role = Object.values(Role).find((role) => role === cell.getValue<User['role']>())\r\n        if (!role) return null\r\n\r\n        const Icon = getRoleIcon(role)\r\n\r\n        return <EditTableCell icon={Icon} column={column} getValue={getValue} row={row} table={table} />\r\n      },\r\n      meta: {\r\n        label: 'Roles',\r\n        variant: 'multiSelect',\r\n        options: Object.values(Role).map((role) => ({\r\n          label: role.charAt(0).toUpperCase() + role.slice(1),\r\n          value: role,\r\n          count: roleCount[role],\r\n          icon: getRoleIcon(role)\r\n        })),\r\n        icon: CircleDashed\r\n      },\r\n      enableColumnFilter: true\r\n    },\r\n    {\r\n      accessorKey: 'image',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Avatar\" />,\r\n      cell: ({ column, getValue, row, table }) => (\r\n        <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n      ),\r\n      meta: {\r\n        variant: 'text'\r\n      }\r\n    },\r\n    {\r\n      id: 'createdAt',\r\n      accessorKey: 'createdAt',\r\n      header: ({ column }) => <DataTableColumnHeader column={column} title=\"Created At\" />,\r\n      cell: ({ row }) => <span>{String(row.getValue('createdAt'))}</span>,\r\n      meta: {\r\n        label: 'Created At',\r\n        variant: 'dateRange',\r\n        icon: CalendarIcon\r\n      },\r\n      enableColumnFilter: true\r\n    },\r\n    {\r\n      id: 'actions',\r\n      cell: ({ row, table }) => <EditedCell title={row.getValue('name')} row={row} table={table} />,\r\n      minSize: 90,\r\n      maxSize: 90,\r\n\r\n      enableResizing: false,\r\n      enableHiding: false\r\n    }\r\n  ]\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/columns.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-date-filter.tsx",
      "content": "'use client'\r\n\r\nimport type { Column } from '@tanstack/react-table'\r\nimport { CalendarIcon, XCircle } from 'lucide-react'\r\nimport * as React from 'react'\r\nimport type { DateRange } from 'react-day-picker'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Calendar } from '@/registry/ui/calendar'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { formatDate } from '@/registry/lib/format'\r\n\r\ntype DateSelection = Date[] | DateRange\r\n\r\nfunction getIsDateRange(value: DateSelection): value is DateRange {\r\n  return value && typeof value === 'object' && !Array.isArray(value)\r\n}\r\n\r\nfunction parseAsDate(timestamp: number | string | undefined): Date | undefined {\r\n  if (!timestamp) return undefined\r\n  const numericTimestamp = typeof timestamp === 'string' ? Number(timestamp) : timestamp\r\n  const date = new Date(numericTimestamp)\r\n  return !Number.isNaN(date.getTime()) ? date : undefined\r\n}\r\n\r\nfunction parseColumnFilterValue(value: unknown) {\r\n  if (value === null || value === undefined) {\r\n    return []\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.map((item) => {\r\n      if (typeof item === 'number' || typeof item === 'string') {\r\n        return item\r\n      }\r\n      return undefined\r\n    })\r\n  }\r\n\r\n  if (typeof value === 'string' || typeof value === 'number') {\r\n    return [value]\r\n  }\r\n\r\n  return []\r\n}\r\n\r\ninterface DataTableDateFilterProps<TData> {\r\n  column: Column<TData, unknown>\r\n  title?: string\r\n  multiple?: boolean\r\n}\r\n\r\nexport function DataTableDateFilter<TData>({ column, title, multiple }: DataTableDateFilterProps<TData>) {\r\n  const columnFilterValue = column.getFilterValue()\r\n\r\n  const selectedDates = React.useMemo<DateSelection>(() => {\r\n    if (!columnFilterValue) {\r\n      return multiple ? { from: undefined, to: undefined } : []\r\n    }\r\n\r\n    if (multiple) {\r\n      const timestamps = parseColumnFilterValue(columnFilterValue)\r\n      return {\r\n        from: parseAsDate(timestamps[0]),\r\n        to: parseAsDate(timestamps[1])\r\n      }\r\n    }\r\n\r\n    const timestamps = parseColumnFilterValue(columnFilterValue)\r\n    const date = parseAsDate(timestamps[0])\r\n    return date ? [date] : []\r\n  }, [columnFilterValue, multiple])\r\n\r\n  const onSelect = React.useCallback(\r\n    (date: Date | DateRange | undefined) => {\r\n      if (!date) {\r\n        column.setFilterValue(undefined)\r\n        return\r\n      }\r\n\r\n      if (multiple && !('getTime' in date)) {\r\n        const from = date.from?.getTime()\r\n        const to = date.to?.getTime()\r\n        column.setFilterValue(from || to ? [from, to] : undefined)\r\n      } else if (!multiple && 'getTime' in date) {\r\n        column.setFilterValue(date.getTime())\r\n      }\r\n    },\r\n    [column, multiple]\r\n  )\r\n\r\n  const onReset = React.useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.stopPropagation()\r\n      column.setFilterValue(undefined)\r\n    },\r\n    [column]\r\n  )\r\n\r\n  const hasValue = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return false\r\n      return selectedDates.from || selectedDates.to\r\n    }\r\n    if (!Array.isArray(selectedDates)) return false\r\n    return selectedDates.length > 0\r\n  }, [multiple, selectedDates])\r\n\r\n  const formatDateRange = React.useCallback((range: DateRange) => {\r\n    if (!range.from && !range.to) return ''\r\n    if (range.from && range.to) {\r\n      return `${formatDate(range.from)} - ${formatDate(range.to)}`\r\n    }\r\n    return formatDate(range.from ?? range.to)\r\n  }, [])\r\n\r\n  const label = React.useMemo(() => {\r\n    if (multiple) {\r\n      if (!getIsDateRange(selectedDates)) return null\r\n\r\n      const hasSelectedDates = selectedDates.from || selectedDates.to\r\n      const dateText = hasSelectedDates ? formatDateRange(selectedDates) : 'Select date range'\r\n\r\n      return (\r\n        <span className=\"flex items-center gap-2\">\r\n          <span>{title}</span>\r\n          {hasSelectedDates && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"mx-0.5 data-[orientation=vertical]:h-4\" />\r\n              <span>{dateText}</span>\r\n            </>\r\n          )}\r\n        </span>\r\n      )\r\n    }\r\n\r\n    if (getIsDateRange(selectedDates)) return null\r\n\r\n    const hasSelectedDate = selectedDates.length > 0\r\n    const dateText = hasSelectedDate ? formatDate(selectedDates[0]) : 'Select date'\r\n\r\n    return (\r\n      <span className=\"flex items-center gap-2\">\r\n        <span>{title}</span>\r\n        {hasSelectedDate && (\r\n          <>\r\n            <Separator orientation=\"vertical\" className=\"mx-0.5 data-[orientation=vertical]:h-4\" />\r\n            <span>{dateText}</span>\r\n          </>\r\n        )}\r\n      </span>\r\n    )\r\n  }, [selectedDates, multiple, formatDateRange, title])\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\r\n          {hasValue ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              onClick={onReset}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <CalendarIcon />\r\n          )}\r\n          {label}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n        {multiple ? (\r\n          <Calendar\r\n            autoFocus\r\n            mode=\"range\"\r\n            selected={getIsDateRange(selectedDates) ? selectedDates : { from: undefined, to: undefined }}\r\n            onSelect={onSelect}\r\n          />\r\n        ) : (\r\n          <Calendar\r\n            autoFocus\r\n            mode=\"single\"\r\n            selected={!getIsDateRange(selectedDates) ? selectedDates[0] : undefined}\r\n            onSelect={onSelect}\r\n          />\r\n        )}\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-date-filter.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-column-header.tsx",
      "content": "'use client'\r\n\r\nimport type { Column } from '@tanstack/react-table'\r\nimport { ChevronDown, ChevronUp, ChevronsUpDown, EyeOff, X } from 'lucide-react'\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { cn } from '@/lib/utils'\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue> extends React.ComponentProps<typeof DropdownMenuTrigger> {\r\n  column: Column<TData, TValue>\r\n  title: string\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  title,\r\n  className,\r\n  ...props\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort() && !column.getCanHide()) {\r\n    return <div className={cn(className)}>{title}</div>\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger\r\n        className={cn(\r\n          '-ml-1.5 flex h-8 items-center gap-1.5 rounded-sm px-2 py-1.5 hover:bg-accent focus:outline-none focus:ring-1 focus:ring-ring data-[state=open]:bg-accent [&_svg]:size-4 [&_svg]:shrink-0 [&_svg]:text-muted-foreground',\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {title}\r\n        {column.getCanSort() &&\r\n          (column.getIsSorted() === 'desc' ? (\r\n            <ChevronDown />\r\n          ) : column.getIsSorted() === 'asc' ? (\r\n            <ChevronUp />\r\n          ) : (\r\n            <ChevronsUpDown />\r\n          ))}\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent  align=\"start\" side='right' className=\"min-w-auto\">\r\n        {column.getCanSort() && (\r\n          <>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === 'asc'}\r\n              onClick={() => column.toggleSorting(false)}\r\n            >\r\n              <ChevronUp />\r\n              Asc\r\n            </DropdownMenuCheckboxItem>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === 'desc'}\r\n              onClick={() => column.toggleSorting(true)}\r\n            >\r\n              <ChevronDown />\r\n              Desc\r\n            </DropdownMenuCheckboxItem>\r\n            {column.getIsSorted() && (\r\n              <DropdownMenuItem className=\"pl-2 [&_svg]:text-muted-foreground\" onClick={() => column.clearSorting()}>\r\n                <X />\r\n                Reset\r\n              </DropdownMenuItem>\r\n            )}\r\n          </>\r\n        )}\r\n        {column.getCanHide() && (\r\n          <DropdownMenuCheckboxItem\r\n            className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n            checked={!column.getIsVisible()}\r\n            onClick={() => column.toggleVisibility(false)}\r\n          >\r\n            <EyeOff />\r\n            Hide\r\n          </DropdownMenuCheckboxItem>\r\n        )}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-column-header.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-faceted-filter.tsx",
      "content": "'use client'\r\n\r\nimport type { Column } from '@tanstack/react-table'\r\nimport { Check, PlusCircle, XCircle } from 'lucide-react'\r\n\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator\r\n} from '@/components/ui/command'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Separator } from '@/components/ui/separator'\r\nimport { cn } from '@/lib/utils'\r\nimport * as React from 'react'\r\nimport { Option } from '../lib/types/data-table'\r\n\r\ninterface DataTableFacetedFilterProps<TData, TValue> {\r\n  column?: Column<TData, TValue>\r\n  title?: string\r\n  options: Option[]\r\n  multiple?: boolean\r\n}\r\n\r\nexport function DataTableFacetedFilter<TData, TValue>({\r\n  column,\r\n  title,\r\n  options,\r\n  multiple\r\n}: DataTableFacetedFilterProps<TData, TValue>) {\r\n  const [open, setOpen] = React.useState(false)\r\n\r\n  const columnFilterValue = column?.getFilterValue()\r\n  const selectedValues = new Set(Array.isArray(columnFilterValue) ? columnFilterValue : [])\r\n\r\n  const onItemSelect = React.useCallback(\r\n    (option: Option, isSelected: boolean) => {\r\n      if (!column) return\r\n\r\n      if (multiple) {\r\n        const newSelectedValues = new Set(selectedValues)\r\n        if (isSelected) {\r\n          newSelectedValues.delete(option.value)\r\n        } else {\r\n          newSelectedValues.add(option.value)\r\n        }\r\n        const filterValues = Array.from(newSelectedValues)\r\n        column.setFilterValue(filterValues.length ? filterValues : undefined)\r\n      } else {\r\n        column.setFilterValue(isSelected ? undefined : [option.value])\r\n        setOpen(false)\r\n      }\r\n    },\r\n    [column, multiple, selectedValues]\r\n  )\r\n\r\n  const onReset = React.useCallback(\r\n    (event?: React.MouseEvent) => {\r\n      event?.stopPropagation()\r\n      column?.setFilterValue(undefined)\r\n    },\r\n    [column]\r\n  )\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\r\n          {selectedValues?.size > 0 ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              onClick={onReset}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <PlusCircle />\r\n          )}\r\n          {title}\r\n          {selectedValues?.size > 0 && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"mx-0.5 data-[orientation=vertical]:h-4\" />\r\n              <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal lg:hidden\">\r\n                {selectedValues.size}\r\n              </Badge>\r\n              <div className=\"hidden items-center gap-1 lg:flex\">\r\n                {selectedValues.size > 2 ? (\r\n                  <Badge variant=\"secondary\" className=\"rounded-sm px-1 font-normal\">\r\n                    {selectedValues.size} selected\r\n                  </Badge>\r\n                ) : (\r\n                  options\r\n                    .filter((option) => selectedValues.has(option.value))\r\n                    .map((option) => (\r\n                      <Badge variant=\"secondary\" key={option.value} className=\"rounded-sm px-1 font-normal\">\r\n                        {option.label}\r\n                      </Badge>\r\n                    ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[12.5rem] p-0\" align=\"start\">\r\n        <Command>\r\n          <CommandInput placeholder={title} />\r\n          <CommandList className=\"max-h-full\">\r\n            <CommandEmpty>No results found.</CommandEmpty>\r\n            <CommandGroup className=\"max-h-[18.75rem] overflow-y-auto overflow-x-hidden\">\r\n              {options.map((option) => {\r\n                const isSelected = selectedValues.has(option.value)\r\n\r\n                return (\r\n                  <CommandItem key={option.value} onSelect={() => onItemSelect(option, isSelected)}>\r\n                    <div\r\n                      className={cn(\r\n                        'flex size-4 items-center justify-center rounded-sm border border-primary',\r\n                        isSelected ? 'bg-primary' : 'opacity-50 [&_svg]:invisible'\r\n                      )}\r\n                    >\r\n                      <Check />\r\n                    </div>\r\n                    {option.icon && <option.icon />}\r\n                    <span className=\"truncate\">{option.label}</span>\r\n                    {option.count && <span className=\"ml-auto font-mono text-xs\">{option.count}</span>}\r\n                  </CommandItem>\r\n                )\r\n              })}\r\n            </CommandGroup>\r\n            {selectedValues.size > 0 && (\r\n              <>\r\n                <CommandSeparator />\r\n                <CommandGroup>\r\n                  <CommandItem onSelect={() => onReset()} className=\"justify-center text-center\">\r\n                    Clear filters\r\n                  </CommandItem>\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-faceted-filter.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n} from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\ninterface DataTablePaginationProps<TData> {\r\n  table: Table<TData>;\r\n  pageSizeOptions?: number[];\r\n}\r\n\r\nexport function DataTablePagination<TData>({\r\n  table,\r\n  pageSizeOptions = [10, 20, 30, 40, 50],\r\n}: DataTablePaginationProps<TData>) {\r\n  return (\r\n    <div className=\"flex items-center justify-between px-2\">\r\n      <div className=\"flex-1 text-sm text-muted-foreground\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s) selected.\r\n      </div>\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value))\r\n            }}\r\n          >\r\n            <SelectTrigger size=\"sm\" className=\"w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\" className=\"min-w-[70px]\">\r\n              {pageSizeOptions.map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-pagination.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-toolbar.tsx",
      "content": "'use client'\r\n\r\nimport { Column, Table } from '@tanstack/react-table'\r\nimport { X } from 'lucide-react'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { DataTableViewOptions } from './data-table-view-options'\r\nimport { DataTableFacetedFilter } from '@/registry/blocks/server-table/block/data-table-faceted-filter'\r\nimport { cn } from '@/lib/utils'\r\nimport React from 'react'\r\nimport { DataTableDateFilter } from './data-table-date-filter'\r\nimport { Input } from '@/registry/ui/input'\r\n\r\ninterface DataTableToolbarProps<TData> extends React.HTMLAttributes<HTMLDivElement> {\r\n  table: Table<TData>\r\n}\r\nexport function DataTableToolbar<TData>({ table, children, className, ...props }: DataTableToolbarProps<TData>) {\r\n  const isFiltered = table.getState().columnFilters.length > 0\r\n\r\n  const meta = table.options.meta\r\n  const selectedRows = table.getSelectedRowModel().rows\r\n\r\n  const columns = React.useMemo(() => table.getAllColumns().filter((column) => column.getCanFilter()), [table])\r\n\r\n  const onReset = React.useCallback(() => {\r\n    table.resetColumnFilters()\r\n  }, [table])\r\n\r\n  const removeRows = () => {\r\n    if (meta?.removeSelectedRows) {\r\n      const rowIds = table.getSelectedRowModel().rows.map((row) => row.id)\r\n      meta?.removeSelectedRows(rowIds)\r\n      table.resetRowSelection()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex w-full items-center justify-between gap-2 overflow-auto p-1', className)} {...props}>\r\n      <div className=\"flex flex-1 items-center space-x-2\">\r\n        <div className=\"flex flex-1 flex-wrap items-center gap-2\">\r\n          {columns.map((column) => (\r\n            <DataTableToolbarFilter key={column.id} column={column} />\r\n          ))}\r\n          {isFiltered && (\r\n            <Button aria-label=\"Reset filters\" variant=\"outline\" size=\"sm\" className=\"border-dashed\" onClick={onReset}>\r\n              <X />\r\n              Reset\r\n            </Button>\r\n          )}\r\n        </div>\r\n        {selectedRows.length > 0 && (\r\n          <Button variant=\"destructive\" size={'sm'} onClick={removeRows}>\r\n            {`Delete ${selectedRows.length} Selected`}\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        {children}\r\n        <DataTableViewOptions table={table} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface DataTableToolbarFilterProps<TData> {\r\n  column: Column<TData>\r\n}\r\n\r\nfunction DataTableToolbarFilter<TData>({ column }: DataTableToolbarFilterProps<TData>) {\r\n  {\r\n    const columnMeta = column.columnDef.meta\r\n    const onFilterRender = React.useCallback(() => {\r\n      if (!columnMeta?.variant) return null\r\n\r\n      switch (columnMeta.variant) {\r\n        case 'text':\r\n          return (\r\n            <Input\r\n              placeholder={columnMeta.placeholder ?? columnMeta.label}\r\n              value={(column.getFilterValue() as string) ?? ''}\r\n              onChange={(event) => column.setFilterValue(event.target.value)}\r\n              className=\"h-8 w-40 lg:w-56\"\r\n            />\r\n          )\r\n\r\n        case 'date':\r\n        case 'dateRange':\r\n          return (\r\n            <DataTableDateFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n              multiple={columnMeta.variant === 'dateRange'}\r\n            />\r\n          )\r\n\r\n        case 'select':\r\n        case 'multiSelect':\r\n          return (\r\n            <DataTableFacetedFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n              options={columnMeta.options ?? []}\r\n              multiple={columnMeta.variant === 'multiSelect'}\r\n            />\r\n          )\r\n\r\n        default:\r\n          return null\r\n      }\r\n    }, [column, columnMeta])\r\n\r\n    return onFilterRender()\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-toolbar.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table-view-options.tsx",
      "content": "\"use client\";\r\n\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport { Settings2 } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\ninterface DataTableViewOptionsProps<TData> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n}: DataTableViewOptionsProps<TData>) {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"ml-auto hidden h-8 lg:flex\"\r\n        >\r\n          <Settings2 />\r\n          View\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\r\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {table\r\n          .getAllColumns()\r\n          .filter(\r\n            (column) =>\r\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\r\n          )\r\n          .map((column) => {\r\n            return (\r\n              <DropdownMenuCheckboxItem\r\n                key={column.id}\r\n                className=\"capitalize\"\r\n                checked={column.getIsVisible()}\r\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n              >\r\n                {column.id}\r\n              </DropdownMenuCheckboxItem>\r\n            );\r\n          })}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table-view-options.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/data-table.tsx",
      "content": "import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'\r\nimport { type Table as TanstackTable, Column, flexRender, Header, Row } from '@tanstack/react-table'\r\nimport React, { CSSProperties } from 'react'\r\nimport { DataTablePagination } from './data-table-pagination'\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { ArrowLeftToLineIcon, ArrowRightToLineIcon, EllipsisIcon, PinOffIcon } from 'lucide-react'\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\r\n\r\nexport interface DataTableProps<TData> extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The table instance returned from useDataTable hook with pagination, sorting, filtering, etc.\r\n   * @type TanstackTable<TData>\r\n   */\r\n  table: TanstackTable<TData>\r\n  /**\r\n   * Callback for handling row clicks.\r\n   * @param row - The row data that was clicked.\r\n   */\r\n  onRowClick?: (row: TData) => void\r\n\r\n  /**\r\n   * Function to render a sub-component for expandable rows.\r\n   * @param props - The row properties.\r\n   * @returns A React element.\r\n   */\r\n  renderSubComponent?: (props: { row: Row<TData> }) => React.ReactElement\r\n\r\n  /**\r\n   * Whether to show pagination controls.\r\n   * @default true\r\n   */\r\n  showPagination?: boolean\r\n}\r\n\r\nexport function DataTable<TData>({\r\n  table,\r\n  onRowClick,\r\n  renderSubComponent,\r\n  showPagination = true,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableProps<TData>) {\r\n  // Helper function to compute pinning styles for columns\r\n  const getPinningStyles = (column: Column<TData>, header?: Header<TData, unknown>): CSSProperties => {\r\n    const isPinned = column.getIsPinned()\r\n    return {\r\n      left: isPinned === 'left' ? `${column.getStart('left')}px` : undefined,\r\n      right: isPinned === 'right' ? `${column.getAfter('right')}px` : undefined,\r\n      position: isPinned ? 'sticky' : 'relative',\r\n      width: header?.getSize() !== 150 ? header?.getSize() : undefined,\r\n      zIndex: isPinned ? 1 : 0\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('w-full space-y-2.5 overflow-auto', className)} {...props}>\r\n      {children}\r\n      <div className=\"rounded-md border\">\r\n        <Table\r\n          className=\"[&_td]:border-border [&_th]:border-border table-fixed border-separate border-spacing-0 [&_tfoot_td]:border-t [&_th]:border-b [&_tr]:border-none [&_tr:not(:last-child)_td]:border-b\"\r\n        >\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id} className=\"bg-muted/50\">\r\n                {headerGroup.headers.map((header) => {\r\n                  const { column } = header\r\n                  const isPinned = column.getIsPinned()\r\n                  const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left')\r\n                  const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right')\r\n\r\n                  return (\r\n                    <TableHead\r\n                      key={header.id}\r\n                      colSpan={header.colSpan}\r\n                      className=\"[&[data-pinned][data-last-col]]:border-border data-pinned:bg-muted/90 relative h-10 truncate  data-pinned:backdrop-blur-xs [&:not([data-pinned]):has(+[data-pinned])_div.cursor-col-resize:last-child]:opacity-0 [&[data-last-col=left]_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=left][data-last-col=left]]:border-r [&[data-pinned=right]:last-child_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=right][data-last-col=right]]:border-l\"\r\n                      style={{ ...getPinningStyles(column, header) }}\r\n                      data-pinned={isPinned || undefined}\r\n                      data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\r\n                    >\r\n                      <div className=\"flex items-center justify-between gap-2\">\r\n                        <span>\r\n                          {header.isPlaceholder\r\n                            ? null\r\n                            : flexRender(header.column.columnDef.header, header.getContext())}\r\n                        </span>\r\n                        {/* Pin/Unpin column controls with enhanced accessibility */}\r\n                        {!header.isPlaceholder &&\r\n                          header.column.getCanPin() &&\r\n                          (header.column.getIsPinned() ? (\r\n                            <Button\r\n                              size=\"icon\"\r\n                              variant=\"ghost\"\r\n                              className=\"-mr-1 size-7 shadow-none\"\r\n                              onClick={() => header.column.pin(false)}\r\n                              aria-label={`Unpin ${header.column.id as string} column`}\r\n                              title={`Unpin ${header.column.id as string} column`}\r\n                            >\r\n                              <PinOffIcon className=\"opacity-60\" size={16} aria-hidden=\"true\" />\r\n                            </Button>\r\n                          ) : (\r\n                            <DropdownMenu>\r\n                              <DropdownMenuTrigger asChild>\r\n                                <Button\r\n                                  size=\"icon\"\r\n                                  variant=\"ghost\"\r\n                                  className=\"-mr-1 size-7 shadow-none\"\r\n                                  aria-label={`Pin options for ${header.column.id as string} column`}\r\n                                  title={`Pin options for ${header.column.id as string} column`}\r\n                                >\r\n                                  <EllipsisIcon className=\"opacity-60\" size={16} aria-hidden=\"true\" />\r\n                                </Button>\r\n                              </DropdownMenuTrigger>\r\n                              <DropdownMenuContent align=\"end\">\r\n                                <DropdownMenuItem onClick={() => header.column.pin('left')}>\r\n                                  <ArrowLeftToLineIcon size={16} className=\"opacity-60\" aria-hidden=\"true\" />\r\n                                  Stick to left\r\n                                </DropdownMenuItem>\r\n                                <DropdownMenuItem onClick={() => header.column.pin('right')}>\r\n                                  <ArrowRightToLineIcon size={16} className=\"opacity-60\" aria-hidden=\"true\" />\r\n                                  Stick to right\r\n                                </DropdownMenuItem>\r\n                              </DropdownMenuContent>\r\n                            </DropdownMenu>\r\n                          ))}\r\n                        {header.column.getCanResize() && (\r\n                          <div\r\n                            {...{\r\n                              onDoubleClick: () => header.column.resetSize(),\r\n                              onMouseDown: header.getResizeHandler(),\r\n                              onTouchStart: header.getResizeHandler(),\r\n                              className:\r\n                                'absolute top-0 h-full w-4 cursor-col-resize user-select-none touch-none -right-2 z-10 flex justify-center before:absolute before:w-px before:inset-y-0 before:bg-border before:-translate-x-px'\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    </TableHead>\r\n                  )\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <React.Fragment key={`fragment-${row.id}`}>\r\n                  <TableRow\r\n                    className={onRowClick ? 'cursor-pointer' : ''}\r\n                    onClick={() => onRowClick && onRowClick(row.original)}\r\n                    data-state={row.getIsSelected() && 'selected'}\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => {\r\n                      const { column } = cell\r\n                      const isPinned = column.getIsPinned()\r\n                      const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left')\r\n                      const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right')\r\n                      return (\r\n                        <TableCell\r\n                          key={cell.id}\r\n                          className=\"[&[data-pinned][data-last-col]]:border-border data-pinned:bg-background/90 truncate data-pinned:backdrop-blur-xs [&[data-pinned=left][data-last-col=left]]:border-r [&[data-pinned=right][data-last-col=right]]:border-l\"\r\n                          style={{ ...getPinningStyles(column) }}\r\n                          data-pinned={isPinned || undefined}\r\n                          data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\r\n                        >\r\n                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                        </TableCell>\r\n                      )\r\n                    })}\r\n                  </TableRow>\r\n                  {row.getIsExpanded() && renderSubComponent && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={row.getVisibleCells().length}>{renderSubComponent({ row })}</TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={table.getAllColumns().length} className=\"h-24 text-center\">\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {showPagination && <DataTablePagination table={table} />}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/data-table.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/edit-table-cell.tsx",
      "content": "import { Input } from '@/registry/ui/input'\r\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { cn } from '@/lib/utils'\r\nimport { Column, Row, Table } from '@tanstack/react-table'\r\nimport { useState, useEffect, ChangeEvent, createElement } from 'react'\r\nimport { ZodError } from 'zod'\r\nimport { Option } from '../lib/types/data-table'\r\nimport { Badge } from '@/components/ui/badge'\r\n\r\ntype EditTableCellProps<TData> = {\r\n  getValue: () => any\r\n  row: Row<TData>\r\n  column: Column<TData>\r\n  table: Table<TData>\r\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>\r\n}\r\n\r\nexport function EditTableCell<TData>({ getValue, row, column, table, icon }: EditTableCellProps<TData>) {\r\n  const initValue = getValue()\r\n  const columnMeta = column.columnDef.meta\r\n  const tableMeta = table.options.meta\r\n  const [value, setValue] = useState(initValue)\r\n  const [valMsg, setvalMsg] = useState('')\r\n\r\n  if (!tableMeta || !columnMeta || !tableMeta.editedRows) {\r\n    throw new Error('Table meta or column meta is not defined')\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (tableMeta.editedRows && tableMeta.editedRows[row.id]) {\r\n      validateInput(initValue)\r\n    }\r\n  }, [tableMeta.editedRows[row.id]])\r\n\r\n  useEffect(() => {\r\n    setValue(initValue)\r\n    if (tableMeta.editedRows && tableMeta.editedRows[row.id]) {\r\n      validateInput(initValue)\r\n    }\r\n  }, [initValue])\r\n\r\n  const validateInput = (inputValue: any) => {\r\n    let message = ''\r\n    let isValid = true\r\n\r\n    // Zod validation\r\n    if (columnMeta.schema) {\r\n      try {\r\n        columnMeta.schema.parse(inputValue)\r\n      } catch (error) {\r\n        if (error instanceof ZodError) {\r\n          message = error.errors[0]?.message ?? 'Invalid input'\r\n          isValid = false\r\n        }\r\n      }\r\n    }\r\n\r\n    setvalMsg(message)\r\n    tableMeta.updateData!(row.index, column.id, inputValue, isValid)\r\n    return isValid\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value\r\n    setValue(newValue)\r\n    validateInput(newValue)\r\n  }\r\n\r\n  const handleSelectChange = (newValue: string) => {\r\n    setValue(newValue)\r\n    validateInput(newValue)\r\n  }\r\n\r\n  const isDisabled = typeof columnMeta.disabled === 'function' ? columnMeta.disabled(row) : columnMeta.disabled\r\n\r\n  const renderInputField = () => {\r\n    switch (columnMeta.variant) {\r\n      case 'multiSelect':\r\n      case 'select':\r\n        return (\r\n          <div className=\"w-full\">\r\n            <Select onValueChange={handleSelectChange} defaultValue={initValue}>\r\n              <SelectTrigger\r\n                data-error={!!valMsg}\r\n                title={valMsg}\r\n                disabled={isDisabled}\r\n                className={cn(\r\n                  'w-full data-[error=true]:text-destructive data-[error=true]:ring-destructive data-[error=true]:border-none'\r\n                )}\r\n              >\r\n                <SelectValue placeholder=\"Select an option\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectGroup>\r\n                  {columnMeta.options!.map((option: Option) => (\r\n                    <SelectItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectGroup>\r\n              </SelectContent>\r\n            </Select>\r\n            {valMsg && <p className=\"text-[10px] mt-0.5 text-destructive\">{valMsg}</p>}\r\n          </div>\r\n        )\r\n\r\n      default:\r\n        return (\r\n          <div className=\"w-full\">\r\n            <Input\r\n              className={cn(\r\n                'h-9 data-[error=true]:text-destructive data-[error=true]:ring-destructive data-[error=true]:border-none'\r\n              )}\r\n              value={value}\r\n              data-error={!!valMsg}\r\n              title={valMsg}\r\n              disabled={isDisabled}\r\n              onChange={handleChange}\r\n              type={columnMeta.variant || 'text'}\r\n            />\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  const renderLabel = () => {\r\n    switch (columnMeta.variant) {\r\n      case 'select':\r\n      case 'multiSelect':\r\n        return (\r\n          <Badge variant=\"outline\" className=\"py-1 [&>svg]:size-3.5\">\r\n            {icon && createElement(icon)}\r\n            <span className=\"capitalize\">{value}</span>\r\n          </Badge>\r\n        )\r\n\r\n      default:\r\n        return (\r\n          <span className=\"w-auto\">{value}</span>\r\n        )\r\n    }\r\n  }\r\n\r\n  if (!tableMeta.editedRows[row.id]) {\r\n    return renderLabel()\r\n  }\r\n\r\n  return renderInputField()\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/edit-table-cell.tsx"
    },
    {
      "path": "src/registry/blocks/server-table/components/edit-table-row-action.tsx",
      "content": "import { MouseEvent, useEffect, useCallback } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Check, Pencil, Trash, X } from 'lucide-react'\r\nimport { Row, Table } from '@tanstack/react-table'\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger\r\n} from '@/components/ui/alert-dialog'\r\n\r\ninterface EditedCellProps<TData> {\r\n  title: string\r\n  row: Row<TData>\r\n  table: Table<TData>\r\n}\r\n\r\nexport function EditedCell<TData>({ row, table, title }: EditedCellProps<TData>) {\r\n  const meta = table.options.meta\r\n\r\n  if (!meta || !meta.validRows || !meta.editedRows) {\r\n    throw new Error('Table meta is not defined')\r\n  }\r\n\r\n  const validRow = meta.validRows[row.id]\r\n  const removeRow = () => {\r\n    if (meta.removeRow) meta.removeRow(row.index, row.id)\r\n  }\r\n\r\n\r\n  const disableSubmit = validRow ? Object.values(validRow).some((item) => !item) : false\r\n\r\n  const handleAction = useCallback(\r\n    (action: 'edit' | 'cancel' | 'done') => {\r\n      meta.setEditedRows!((old: Record<string, boolean>) => ({\r\n        ...old,\r\n        [row.id]: action === 'edit' ? true : false\r\n      }))\r\n\r\n      if (action !== 'edit') {\r\n        if (action === 'cancel' && meta.revertData) {\r\n          meta.revertData(row.index)\r\n        } else if (meta.updateRow) {\r\n          meta.updateRow(row.index, row.id)\r\n        }\r\n      }\r\n    },\r\n    [row.id, row.index, meta]\r\n  )\r\n\r\n  const setEditedRows = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      const action = e.currentTarget.name as 'edit' | 'cancel' | 'done'\r\n      handleAction(action)\r\n    },\r\n    [handleAction]\r\n  )\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault()\r\n        if (meta.editedRows && meta.editedRows[row.id] && !disableSubmit) {\r\n          handleAction('done')\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener('keydown', handleKeyDown)\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  }, [handleAction, row.id, meta.editedRows, disableSubmit])\r\n\r\n  return meta.editedRows[row.id] ? (\r\n    <div className=\"flex items-center space-x-0.5\">\r\n      <Button title=\"Cancel\" variant={'ghost'} size={'sm'} onClick={setEditedRows} name=\"cancel\">\r\n        <X className='text-red-600' size={16} />\r\n      </Button>\r\n\r\n      <Button\r\n        size={'sm'}\r\n        variant={'ghost'}\r\n        onClick={setEditedRows}\r\n        name=\"done\"\r\n        title=\"Done\"\r\n        disabled={disableSubmit}\r\n        className={disableSubmit ? 'cursor-not-allowed' : ''}\r\n      >\r\n        <Check className='text-green-600' size={16} />\r\n      </Button>\r\n    </div>\r\n  ) : (\r\n    <div className=\"flex items-center space-x-0.5\">\r\n      <Button title=\"Edit\" variant={'ghost'} size={'sm'} onClick={setEditedRows} name=\"edit\">\r\n        <Pencil size={16} />\r\n      </Button>\r\n\r\n      <AlertDialog>\r\n        <AlertDialogTrigger title=\"Delete\" asChild>\r\n          <Button size={'sm'} variant={'ghost'} name=\"delete\">\r\n            <Trash className=\"text-red-600\" size={16} />\r\n          </Button>\r\n        </AlertDialogTrigger>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Apakah Kamu yakin?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              Menghapus data <span className=\"font-bold\">{title}</span>?.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction onClick={removeRow}>Continue</AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/server-table/edit-table-row-action.tsx"
    }
  ]
}