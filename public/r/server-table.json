{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "server-table",
  "type": "registry:block",
  "title": "Server Side Table",
  "description": "A simple Server Side Table",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-table",
    "zod",
    "sonner",
    "@tanstack/react-query"
  ],
  "registryDependencies": [
    "table",
    "button",
    "dropdown-menu",
    "checkbox",
    "badge",
    "command",
    "popover",
    "separator",
    "select",
    "alert-dialog",
    "input",
    "sonner"
  ],
  "files": [
    {
      "path": "./src/registry/blocks/server-table/hooks/use-data-table.ts",
      "content": "import {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  ExpandedState,\r\n  SortingState,\r\n  VisibilityState,\r\n  getCoreRowModel,\r\n  getExpandedRowModel,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useReactTable,\r\n  Row,\r\n  PaginationState,\r\n  Updater,\r\n} from \"@tanstack/react-table\";\r\nimport React from \"react\";\r\nimport { parseAsInteger, parseAsString, useQueryState } from \"nuqs\";\r\n\r\ninterface UseDataTableProps<TData extends { id: string }> {\r\n  columns: ColumnDef<TData>[];\r\n  data: TData[];\r\n  originalData?: TData[];\r\n  createEmptyRow?: () => TData;\r\n  setData?: React.Dispatch<React.SetStateAction<TData[]>>;\r\n  updateRow?: (id: string, payload: TData) => void;\r\n  createRow?: (payload: TData) => void;\r\n  removeRow?: (id: string) => void;\r\n  getRowCanExpand?: (row: Row<TData>) => boolean;\r\n  onRemove?: (id: string) => void;\r\n  onUpdate?: (payload: TData) => void;\r\n  pageCount?: number;\r\n}\r\n\r\nexport function useDataTable<TData extends { id: string }>({\r\n  columns,\r\n  data,\r\n  originalData,\r\n  createEmptyRow,\r\n  setData,\r\n  updateRow,\r\n  createRow,\r\n  removeRow,\r\n  getRowCanExpand,\r\n  onRemove,\r\n  onUpdate,\r\n  pageCount = -1,\r\n  ...props\r\n}: UseDataTableProps<TData>) {\r\n  // * states\r\n  const [rowSelection, setRowSelection] = React.useState({});\r\n  const [columnVisibility, setColumnVisibility] =\r\n    React.useState<VisibilityState>({});\r\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\r\n    []\r\n  );\r\n\r\n  const [sorting, setSorting] = React.useState<SortingState>([]);\r\n  const [editedRows, setEditedRows] = React.useState<Record<string, boolean>>(\r\n    {}\r\n  );\r\n  const [validRows, setValidRows] = React.useState<\r\n    Record<string, Record<string, boolean>>\r\n  >({});\r\n  const [pendingCreate, setPendingCreate] = React.useState<{\r\n    data: TData;\r\n    index: number;\r\n  } | null>(null);\r\n  const [expanded, setExpanded] = React.useState<ExpandedState>({});\r\n\r\n  const [page, setPage] = useQueryState(\r\n    \"page\",\r\n    parseAsInteger.withDefault(1).withOptions({ shallow: false })\r\n  );\r\n  const [perPage, setPerPage] = useQueryState(\r\n    \"perPage\",\r\n    parseAsInteger.withDefault(10).withOptions({ shallow: false })\r\n  );\r\n\r\n  const [globalFilter, setGlobalFilter] = useQueryState(\r\n    \"search\",\r\n    parseAsString.withDefault(\"\").withOptions({ shallow: false })\r\n  );\r\n\r\n  // * helper functions\r\n  const initializeValidationState = () => {\r\n    const validationState: Record<string, boolean> = {};\r\n    columns.forEach((column: any) => {\r\n      if (column.meta?.required) {\r\n        validationState[column.accessorKey as string] = false;\r\n      }\r\n    });\r\n    return validationState;\r\n  };\r\n\r\n  // * row actions\r\n  const handleOnRemove = (id: string) => {\r\n    onRemove!(id);\r\n  };\r\n\r\n  const handleUpdate = (payload: TData) => {\r\n    onUpdate!(payload);\r\n  };\r\n\r\n  // * paginate\r\n  const pagination: PaginationState = {\r\n    pageIndex: page - 1, // zero-based index -> one-based index\r\n    pageSize: perPage,\r\n  };\r\n\r\n  function onPaginationChange(updaterOrValue: Updater<PaginationState>) {\r\n    if (typeof updaterOrValue === \"function\") {\r\n      const newPagination = updaterOrValue(pagination);\r\n      void setPage(newPagination.pageIndex + 1);\r\n      void setPerPage(newPagination.pageSize);\r\n    } else {\r\n      void setPage(updaterOrValue.pageIndex + 1);\r\n      void setPerPage(updaterOrValue.pageSize);\r\n    }\r\n  }\r\n\r\n  // * editable functions\r\n  const handleRevertData = (rowIndex: number) => {\r\n    if (pendingCreate?.index === rowIndex) {\r\n      setData!((old) => old.filter((_, index) => index !== rowIndex));\r\n      setPendingCreate(null);\r\n      setValidRows((old) => {\r\n        const newValidRows = { ...old };\r\n        delete newValidRows[rowIndex];\r\n        return newValidRows;\r\n      });\r\n    } else {\r\n      setData!((old) =>\r\n        old.map((row, index) =>\r\n          index === rowIndex ? originalData![rowIndex]! : row\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleUpdateRow = (rowIndex: number) => {\r\n    if (pendingCreate?.index === rowIndex) {\r\n      createRow!(data[rowIndex]!);\r\n      setPendingCreate(null);\r\n    } else {\r\n      updateRow!(data[rowIndex]!.id, data[rowIndex]!);\r\n    }\r\n  };\r\n\r\n  const handleUpdateData = (\r\n    rowIndex: number,\r\n    columnId: string,\r\n    value: TData,\r\n    isValid: boolean\r\n  ) => {\r\n    setData!((old: TData[]) =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex]!,\r\n            [columnId]: value,\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n    setValidRows((old) => ({\r\n      ...old,\r\n      [rowIndex]: { ...old[rowIndex], [columnId]: isValid },\r\n    }));\r\n  };\r\n\r\n  const handleCreateRow = () => {\r\n    const newRow = createEmptyRow!();\r\n    setData!((old) => [newRow, ...old]);\r\n\r\n    setPendingCreate({\r\n      data: newRow,\r\n      index: 0,\r\n    });\r\n\r\n    setEditedRows((old) => ({\r\n      ...old,\r\n      0: true,\r\n    }));\r\n\r\n    const initialValidation = initializeValidationState();\r\n    setValidRows((old) => ({\r\n      ...old,\r\n      0: initialValidation,\r\n    }));\r\n  };\r\n\r\n  const handleRemoveRow = (rowIndex: number) => {\r\n    if (pendingCreate?.index === rowIndex) {\r\n      setData!((old) => old.filter((_, index) => index !== rowIndex));\r\n      setPendingCreate(null);\r\n      setValidRows((old) => {\r\n        const newValidRows = { ...old };\r\n        delete newValidRows[rowIndex];\r\n        return newValidRows;\r\n      });\r\n    } else {\r\n      removeRow!(data[rowIndex]!.id);\r\n    }\r\n  };\r\n\r\n  const handleRemoveSelectedRows = (selectedRows: number[]) => {\r\n    selectedRows.forEach((rowIndex) => {\r\n      if (pendingCreate?.index !== rowIndex) {\r\n        removeRow!(data[rowIndex]!.id);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   ** Table Configuration\r\n   */\r\n  const table = useReactTable({\r\n    ...props,\r\n    data,\r\n    columns,\r\n    pageCount,\r\n    state: {\r\n      pagination,\r\n      sorting,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n      expanded,\r\n      globalFilter,\r\n    },\r\n    globalFilterFn: \"includesString\",\r\n    enableRowSelection: true,\r\n    onPaginationChange,\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange: setSorting,\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n    onExpandedChange: setExpanded,\r\n    getExpandedRowModel: getExpandedRowModel(),\r\n    getRowCanExpand,\r\n    meta: {\r\n      editedRows,\r\n      setEditedRows,\r\n      validRows,\r\n      setValidRows,\r\n      pendingCreate,\r\n      setPendingCreate,\r\n      onRemove: handleOnRemove,\r\n      onUpdate: handleUpdate,\r\n      revertData: handleRevertData,\r\n      updateRow: handleUpdateRow,\r\n      updateData: handleUpdateData,\r\n      createRow: handleCreateRow,\r\n      removeRow: handleRemoveRow,\r\n      removeSelectedRows: handleRemoveSelectedRows,\r\n    },\r\n    manualPagination: true,\r\n    manualFiltering: true,\r\n    debugTable: true,\r\n  });\r\n\r\n  return { table };\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/blocks/server-table/hooks/use-querry.ts",
      "content": "import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\r\nexport interface Student {\r\n  id: string;\r\n  studentNumber: string;\r\n  name: string;\r\n  dateOfBirth: string;\r\n  major: string;\r\n  createdAt: string;\r\n}\r\n\r\nconst url = \"http://localhost:5000/students\";\r\n\r\nasync function updateRequest(id: string, data: Student) {\r\n  const response = await fetch(`${url}/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function addRequest(data: Student) {\r\n  const response = await fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function deleteRequest(id: string) {\r\n  const response = await fetch(`${url}/${id}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function getRequest() {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  // Mengurutkan data secara descending berdasarkan createdAt\r\n  const sortedData = data.sort(\r\n    (a: Student, b: Student) =>\r\n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\r\n  );\r\n\r\n  return sortedData;\r\n}\r\n\r\nexport default function useStudents() {\r\n  const queryClient = useQueryClient();\r\n\r\n  // Query for fetching students\r\n  const { data, isLoading } = useQuery({\r\n    queryKey: [\"students\"],\r\n    queryFn: getRequest,\r\n    initialData: [],\r\n  });\r\n\r\n  // Mutation for updating a student\r\n  const updateMutation = useMutation({\r\n    mutationFn: ({ id, data }: { id: string; data: Student }) =>\r\n      updateRequest(id, data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  // Mutation for deleting a student\r\n  const deleteMutation = useMutation({\r\n    mutationFn: (id: string) => deleteRequest(id),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  // Mutation for adding a student\r\n  const addMutation = useMutation({\r\n    mutationFn: (data: Student) => addRequest(data),\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: [\"students\"] });\r\n    },\r\n  });\r\n\r\n  return {\r\n    data: data ?? [],\r\n    isLoading,\r\n    createRow: (postData: Student) => addMutation.mutate(postData),\r\n    updateRow: (id: string, postData: Student) =>\r\n      updateMutation.mutate({ id, data: postData }),\r\n    removeRow: (id: string) => deleteMutation.mutate(id),\r\n  };\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/schema/table.ts",
      "content": "import {\r\n  createSearchParamsCache,\r\n  parseAsInteger,\r\n  parseAsString,\r\n} from \"nuqs/server\";\r\nimport { z, ZodType } from \"zod\";\r\n\r\nexport const searchParamsCache = createSearchParamsCache({\r\n  page: parseAsInteger.withDefault(1),\r\n  perPage: parseAsInteger.withDefault(10),\r\n  search: parseAsString.withDefault(\"\"),\r\n});\r\n\r\nexport type QuerySchema = Awaited<ReturnType<typeof searchParamsCache.parse>>;\r\n\r\n\r\nexport class UserSchema {\r\n  static readonly CREATE: ZodType = z.object({\r\n    name: z.string(),\r\n    email: z.string().email(),\r\n    phone: z.string(),\r\n    image: z.string(),\r\n  });\r\n\r\n  static readonly UPDATE: ZodType = z.object({\r\n    id: z.string(),\r\n    name: z.string().optional(),\r\n    email: z.string().email().optional(),\r\n    phone: z.string().optional(),\r\n    image: z.string().optional(),\r\n  });\r\n}\r\n\r\nexport const searchParams = z.object({\r\n  page: z.number().default(1),\r\n  perPage: z.number().max(50).default(10),\r\n  search: z.string().optional(),\r\n});\r\n",
      "type": "registry:lib",
      "target": "lib/schema/table.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/types/data-table.d.ts",
      "content": "import \"@tanstack/react-table\";\r\nimport { ColumnDef, Row, RowData } from \"@tanstack/react-table\";\r\n\r\nexport interface BaseData {\r\n  id: string;\r\n}\r\n\r\nexport interface PendingCreate<TData> {\r\n  data: TData;\r\n  index: number;\r\n}\r\n\r\nexport interface RowValidationState {\r\n  isValid: boolean;\r\n  fields: Record<string, boolean>;\r\n}\r\n\r\ndeclare module \"@tanstack/react-table\" {\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    required?: boolean;\r\n    disabled?: boolean | ((row: Row<TData>) => boolean);\r\n    type?: \"text\" | \"number\" | \"date\" | \"select\" | \"combobox\" | \"password\";\r\n    pattern?: string;\r\n    validationMessage?: string;\r\n    options?: { label: string; value: string }[];\r\n    validate?: (value: TData) => boolean;\r\n  }\r\n\r\n  interface TableMeta<TData extends RowData> {\r\n    editedRows?: Record<string, boolean>;\r\n    setEditedRows?: React.Dispatch<\r\n      React.SetStateAction<Record<string, boolean>>\r\n    >;\r\n    validRows?: Record<string, Record<string, boolean>>;\r\n    setValidRows?: React.Dispatch<\r\n      React.SetStateAction<Record<string, Record<string, boolean>>>\r\n    >;\r\n    rowOriginal?: TData | undefined;\r\n    setRowOriginal?: React.Dispatch<React.SetStateAction<TData | undefined>>;\r\n    revertData?: (rowIndex: number) => void;\r\n    updateRow?: (rowIndex: number) => void;\r\n    updateData?: (\r\n      rowIndex: number,\r\n      columnId: string,\r\n      value: TData,\r\n      isValid: boolean\r\n    ) => void;\r\n    createRow?: () => void;\r\n    removeRow?: (rowIndex: number) => void;\r\n    removeSelectedRows?: (selectedRows: number[]) => void;\r\n    onRemove?: (id: string) => void;\r\n    onUpdate?: (payload: TData) => void;\r\n    pendingCreate?: PendingCreate<TData> | null;\r\n    setPendingCreate?: React.Dispatch<\r\n      React.SetStateAction<PendingCreate<TData> | null>\r\n    >;\r\n  }\r\n}",
      "type": "registry:lib",
      "target": "lib/types/table.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/lib/types/index.ts",
      "content": "export type Option = {\r\n  label: string;\r\n  value: string;\r\n};\r\n",
      "type": "registry:lib",
      "target": "lib/types/index.ts"
    },
    {
      "path": "./src/registry/blocks/server-table/block/columns.tsx",
      "content": "import { ColumnDef } from '@tanstack/react-table'\r\nimport { DataTableColumnHeader } from '@/registry/blocks/server-table/block/data-table-column-header'\r\nimport { EditedCell } from './edit-table-row-action'\r\nimport { EditTableCell } from '@/registry/blocks/server-table/block/edit-table-cell'\r\nimport { Checkbox } from '@/components/ui/checkbox'\r\nimport { Student } from '@/registry/blocks/server-table/hooks/use-querry'\r\n\r\nexport const columns: ColumnDef<Student>[] = [\r\n  {\r\n    id: 'select',\r\n    header: ({ table }) => (\r\n      <Checkbox\r\n        checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\r\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\r\n        aria-label=\"Select all\"\r\n        className=\"translate-y-[2px]\"\r\n      />\r\n    ),\r\n    cell: ({ row }) => (\r\n      <Checkbox\r\n        checked={row.getIsSelected()}\r\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n        aria-label=\"Select row\"\r\n        className=\"translate-y-[2px]\"\r\n      />\r\n    ),\r\n    enableSorting: false,\r\n    enableHiding: false\r\n  },\r\n  {\r\n    accessorKey: 'no',\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"No\" />,\r\n    cell: ({ row }) => <div className=\"w-[80px]\">{row.index + 1}</div>,\r\n    enableSorting: false,\r\n    enableHiding: false\r\n  },\r\n  {\r\n    accessorKey: 'name',\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Full Name\" />,\r\n    cell: ({ column, getValue, row, table }) => (\r\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n    ),\r\n    meta: {\r\n      type: 'text',\r\n      required: true,\r\n      validationMessage: 'Name is required'\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'dateOfBirth',\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Date Of Birth\" />,\r\n    cell: ({ column, getValue, row, table }) => (\r\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n    ),\r\n    meta: {\r\n      type: 'date',\r\n      required: true,\r\n      validationMessage: 'Invalid date format (YYYY-MM-DD)'\r\n    }\r\n  },\r\n  {\r\n    accessorKey: 'major',\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Major\" />,\r\n    cell: ({ column, getValue, row, table }) => (\r\n      <EditTableCell column={column} getValue={getValue} row={row} table={table} />\r\n    ),\r\n    meta: {\r\n      type: 'select',\r\n      options: [\r\n        { value: 'Computer Science', label: 'Computer Science' },\r\n        { value: 'Communications', label: 'Communications' },\r\n        { value: 'Business', label: 'Business' },\r\n        { value: 'Psychology', label: 'Psychology' }\r\n      ],\r\n      required: true,\r\n      validationMessage: 'Major is required'\r\n    }\r\n  },\r\n  {\r\n    id: 'actions',\r\n    cell: ({ row, table }) => <EditedCell title={row.getValue('name')} row={row} table={table} />\r\n  }\r\n]\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/columns.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\";\r\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue>\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  column: Column<TData, TValue>;\r\n  title: string;\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  title,\r\n  className,\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort()) {\r\n    return <div className={cn(className)}>{title}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center space-x-2\", className)}>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\r\n          >\r\n            <span>{title}</span>\r\n            {column.getIsSorted() === \"desc\" ? (\r\n              <ArrowDown />\r\n            ) : column.getIsSorted() === \"asc\" ? (\r\n              <ArrowUp />\r\n            ) : (\r\n              <ChevronsUpDown />\r\n            )}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"start\">\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\r\n            <ArrowUp className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Asc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\r\n            <ArrowDown className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Desc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuSeparator />\r\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\r\n            <EyeOff className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Hide\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-column-header.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-faceted-filter.tsx",
      "content": "import * as React from \"react\";\r\nimport { Column } from \"@tanstack/react-table\";\r\nimport { Check, PlusCircle } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\n\r\ninterface DataTableFacetedFilterProps<TData, TValue> {\r\n  column?: Column<TData, TValue>;\r\n  title?: string;\r\n  options: {\r\n    label: string;\r\n    value: string;\r\n    icon?: React.ComponentType<{ className?: string }>;\r\n  }[];\r\n}\r\n\r\nexport function DataTableFacetedFilter<TData, TValue>({\r\n  column,\r\n  title,\r\n  options,\r\n}: DataTableFacetedFilterProps<TData, TValue>) {\r\n  const facets = column?.getFacetedUniqueValues();\r\n  const selectedValues = new Set(column?.getFilterValue() as string[]);\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\r\n          <PlusCircle />\r\n          {title}\r\n          {selectedValues?.size > 0 && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\r\n              >\r\n                {selectedValues.size}\r\n              </Badge>\r\n              <div className=\"hidden space-x-1 lg:flex\">\r\n                {selectedValues.size > 2 ? (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"rounded-sm px-1 font-normal\"\r\n                  >\r\n                    {selectedValues.size} selected\r\n                  </Badge>\r\n                ) : (\r\n                  options\r\n                    .filter((option) => selectedValues.has(option.value))\r\n                    .map((option) => (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        key={option.value}\r\n                        className=\"rounded-sm px-1 font-normal\"\r\n                      >\r\n                        {option.label}\r\n                      </Badge>\r\n                    ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\r\n        <Command>\r\n          <CommandInput placeholder={title} />\r\n          <CommandList>\r\n            <CommandEmpty>No results found.</CommandEmpty>\r\n            <CommandGroup>\r\n              {options.map((option) => {\r\n                const isSelected = selectedValues.has(option.value);\r\n                return (\r\n                  <CommandItem\r\n                    key={option.value}\r\n                    onSelect={() => {\r\n                      if (isSelected) {\r\n                        selectedValues.delete(option.value);\r\n                      } else {\r\n                        selectedValues.add(option.value);\r\n                      }\r\n                      const filterValues = Array.from(selectedValues);\r\n                      column?.setFilterValue(\r\n                        filterValues.length ? filterValues : undefined\r\n                      );\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className={cn(\r\n                        \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\r\n                        isSelected\r\n                          ? \"bg-primary text-primary-foreground\"\r\n                          : \"opacity-50 [&_svg]:invisible\"\r\n                      )}\r\n                    >\r\n                      <Check />\r\n                    </div>\r\n                    {option.icon && (\r\n                      <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\r\n                    )}\r\n                    <span>{option.label}</span>\r\n                    {facets?.get(option.value) && (\r\n                      <span className=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\">\r\n                        {facets.get(option.value)}\r\n                      </span>\r\n                    )}\r\n                  </CommandItem>\r\n                );\r\n              })}\r\n            </CommandGroup>\r\n            {selectedValues.size > 0 && (\r\n              <>\r\n                <CommandSeparator />\r\n                <CommandGroup>\r\n                  <CommandItem\r\n                    onSelect={() => column?.setFilterValue(undefined)}\r\n                    className=\"justify-center text-center\"\r\n                  >\r\n                    Clear filters\r\n                  </CommandItem>\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-faceted-filter.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\";\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n} from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\n\r\ninterface DataTablePaginationProps<TData> {\r\n  table: Table<TData>;\r\n  pageSizeOptions?: number[];\r\n}\r\n\r\nexport function DataTablePagination<TData>({\r\n  table,\r\n  pageSizeOptions = [10, 20, 30, 40, 50],\r\n}: DataTablePaginationProps<TData>) {\r\n  return (\r\n    <div className=\"flex items-center justify-between px-2\">\r\n      <div className=\"flex-1 text-sm text-muted-foreground\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s) selected.\r\n      </div>\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value))\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {pageSizeOptions.map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-pagination.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-toolbar.tsx",
      "content": "'use client'\r\n\r\nimport { Table } from '@tanstack/react-table'\r\nimport { X } from 'lucide-react'\r\n\r\nimport { Button } from '@/components/ui/button'\r\nimport { Input } from '@/components/ui/input'\r\nimport { DataTableViewOptions } from './data-table-view-options'\r\nimport { DataTableFacetedFilter } from '@/registry/blocks/server-table/block/data-table-faceted-filter'\r\nimport { cn } from '@/lib/utils'\r\nimport { DebouncedInput } from '@/registry/ui/debounce-input'\r\n\r\ninterface DataTableToolbarProps<TData> extends React.HTMLAttributes<HTMLDivElement> {\r\n  table: Table<TData>\r\n  facetedFilters?: {\r\n    column: string\r\n    title: string\r\n    options: {\r\n      label: string\r\n      value: string\r\n      icon?: React.ComponentType<{ className?: string }>\r\n    }[]\r\n  }[]\r\n}\r\nexport function DataTableToolbar<TData>({\r\n  table,\r\n  facetedFilters,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableToolbarProps<TData>) {\r\n  const isFiltered = table.getState().columnFilters.length > 0\r\n  const meta = table.options.meta\r\n  const selectedRows = table.getSelectedRowModel().rows\r\n\r\n  const removeRows = () => {\r\n    meta?.removeSelectedRows!(table.getSelectedRowModel().rows.map((row) => row.index))\r\n    table.resetRowSelection()\r\n  }\r\n  const global = table.getState().globalFilter\r\n\r\n  return (\r\n    <div className={cn('flex w-full items-center justify-between gap-2 overflow-auto p-1', className)} {...props}>\r\n      <div className=\"flex flex-1 items-center space-x-2\">\r\n        <DebouncedInput\r\n          className=\"-ms-1 h-8 w-[150px] lg:w-[250px]\"\r\n          value={global}\r\n          placeholder=\"Search...\"\r\n          onChange={(value) => table.setGlobalFilter(String(value).trim())}\r\n        />\r\n        {facetedFilters?.map((filter) => (\r\n          <DataTableFacetedFilter\r\n            key={filter.column}\r\n            column={table.getColumn(filter.column)}\r\n            title={filter.title}\r\n            options={filter.options}\r\n          />\r\n        ))}\r\n        {isFiltered && (\r\n          <Button variant=\"ghost\" onClick={() => table.resetColumnFilters()} className=\"h-8 px-2 lg:px-3\">\r\n            Reset\r\n            <X />\r\n          </Button>\r\n        )}\r\n        {selectedRows.length > 0 && (\r\n          <Button variant=\"destructive\" size={'sm'} onClick={removeRows}>\r\n            {`Delete ${selectedRows.length} Selected`}\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        {children}\r\n        <DataTableViewOptions table={table} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-toolbar.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table-view-options.tsx",
      "content": "\"use client\";\r\n\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport { Settings2 } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\n\r\ninterface DataTableViewOptionsProps<TData> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n}: DataTableViewOptionsProps<TData>) {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"ml-auto hidden h-8 lg:flex\"\r\n        >\r\n          <Settings2 />\r\n          View\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\r\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {table\r\n          .getAllColumns()\r\n          .filter(\r\n            (column) =>\r\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\r\n          )\r\n          .map((column) => {\r\n            return (\r\n              <DropdownMenuCheckboxItem\r\n                key={column.id}\r\n                className=\"capitalize\"\r\n                checked={column.getIsVisible()}\r\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n              >\r\n                {column.id}\r\n              </DropdownMenuCheckboxItem>\r\n            );\r\n          })}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table-view-options.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/data-table.tsx",
      "content": "import {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  type Table as TanstackTable,\r\n  flexRender,\r\n  Row,\r\n} from \"@tanstack/react-table\";\r\nimport React from \"react\";\r\nimport { DataTablePagination } from \"./data-table-pagination\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface DataTableProps<TData>\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * The table instance returned from useDataTable hook with pagination, sorting, filtering, etc.\r\n   * @type TanstackTable<TData>\r\n   */\r\n  table: TanstackTable<TData>;\r\n  /**\r\n   * Callback for handling row clicks.\r\n   * @param row - The row data that was clicked.\r\n   */\r\n  onRowClick?: (row: TData) => void;\r\n\r\n  /**\r\n   * Function to render a sub-component for expandable rows.\r\n   * @param props - The row properties.\r\n   * @returns A React element.\r\n   */\r\n  renderSubComponent?: (props: { row: Row<TData> }) => React.ReactElement;\r\n\r\n  /**\r\n   * Whether to show pagination controls.\r\n   * @default true\r\n   */\r\n  showPagination?: boolean;\r\n}\r\n\r\nexport function DataTable<TData>({\r\n  table,\r\n  onRowClick,\r\n  renderSubComponent,\r\n  showPagination = true,\r\n  children,\r\n  className,\r\n  ...props\r\n}: DataTableProps<TData>) {\r\n  return (\r\n    <div className={cn('w-full space-y-2.5 overflow-auto', className)} {...props}>\r\n      {children}\r\n      <div className=\"rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <TableHead key={header.id} colSpan={header.colSpan}>\r\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <React.Fragment key={`fragment-${row.id}`}>\r\n                  <TableRow\r\n                    className={onRowClick ? 'cursor-pointer' : ''}\r\n                    onClick={() => onRowClick && onRowClick(row.original)}\r\n                    data-state={row.getIsSelected() && 'selected'}\r\n                  >\r\n                    {row.getVisibleCells().map((cell) => (\r\n                      <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                  {row.getIsExpanded() && renderSubComponent && (\r\n                    <TableRow>\r\n                      <TableCell colSpan={row.getVisibleCells().length}>{renderSubComponent({ row })}</TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </React.Fragment>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={table.getAllColumns().length} className=\"h-24 text-center\">\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      {showPagination && <DataTablePagination table={table} />}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/data-table.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/edit-table-cell.tsx",
      "content": "import { Input } from '@/components/ui/input'\r\nimport { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { cn } from '@/lib/utils'\r\nimport { Column, Row, Table } from '@tanstack/react-table'\r\nimport { useState, useEffect, ChangeEvent } from 'react'\r\nimport { Option } from '@/registry/blocks/server-table/lib/types'\r\n\r\ntype EditTableCellProps<TData> = {\r\n  getValue: () => any\r\n  row: Row<TData>\r\n  column: Column<TData>\r\n  table: Table<TData>\r\n}\r\n\r\nexport function EditTableCell<TData>({ getValue, row, column, table }: EditTableCellProps<TData>) {\r\n  const initialValue = getValue()\r\n  const columnMeta = column.columnDef.meta\r\n  const tableMeta = table.options.meta\r\n  const [value, setValue] = useState(initialValue)\r\n  const [validationMessage, setValidationMessage] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (tableMeta?.editedRows![row.id]) {\r\n      validateInput(initialValue)\r\n    }\r\n  }, [tableMeta?.editedRows![row.id]])\r\n\r\n  useEffect(() => {\r\n    setValue(initialValue)\r\n    if (tableMeta?.editedRows![row.id]) {\r\n      validateInput(initialValue)\r\n    }\r\n  }, [initialValue])\r\n\r\n  const validateInput = (inputValue: any) => {\r\n    let message = ''\r\n    if (columnMeta?.required && (!inputValue || !inputValue.trim())) {\r\n      message = columnMeta.validationMessage || 'This field is required'\r\n    } else if (inputValue && inputValue.trim()) {\r\n      if (columnMeta?.pattern) {\r\n        const regex = new RegExp(columnMeta.pattern)\r\n        if (!regex.test(inputValue)) {\r\n          message = columnMeta.validationMessage || 'Invalid format'\r\n        }\r\n      }\r\n\r\n      if (columnMeta?.validate) {\r\n        const isValid = columnMeta.validate(inputValue)\r\n        if (!isValid) {\r\n          message = columnMeta.validationMessage || 'Validation failed'\r\n        }\r\n      }\r\n    }\r\n\r\n    setValidationMessage(message)\r\n    tableMeta?.updateData!(row.index, column.id, inputValue, message === '')\r\n    return message === ''\r\n  }\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = e.target.value\r\n    setValue(newValue)\r\n    validateInput(newValue)\r\n  }\r\n\r\n  const handleSelectChange = (newValue: string) => {\r\n    setValue(newValue)\r\n    validateInput(newValue)\r\n  }\r\n\r\n  const isDisabled = typeof columnMeta?.disabled === 'function' ? columnMeta.disabled(row) : columnMeta?.disabled\r\n\r\n  const renderInputField = () => {\r\n    switch (columnMeta?.type) {\r\n      case 'select':\r\n        return (\r\n          <div className=\"w-full\">\r\n            <Select onValueChange={handleSelectChange} defaultValue={initialValue}>\r\n              <SelectTrigger\r\n                title={validationMessage}\r\n                disabled={isDisabled}\r\n                className={cn('w-full', validationMessage && 'border-destructive')}\r\n              >\r\n                <SelectValue placeholder=\"Select an option\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectGroup>\r\n                  {columnMeta?.options?.map((option: Option) => (\r\n                    <SelectItem key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectGroup>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        )\r\n\r\n      default:\r\n        return (\r\n          <div className=\"w-full\">\r\n            <Input\r\n              className={cn('h-9', validationMessage && 'border-destructive')}\r\n              value={value}\r\n              title={validationMessage}\r\n              disabled={isDisabled}\r\n              onChange={handleChange}\r\n              type={columnMeta?.type || 'text'}\r\n              required={columnMeta?.required}\r\n              pattern={columnMeta?.pattern}\r\n            />\r\n          </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  if (!tableMeta?.editedRows![row.id]) {\r\n    return <span className=\"w-auto\">{value}</span>\r\n  }\r\n\r\n  return renderInputField()\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/edit-table-cell.tsx"
    },
    {
      "path": "./src/registry/blocks/server-table/block/edit-table-row-action.tsx",
      "content": "import { MouseEvent, useEffect, useCallback } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Check, Pencil, Trash, X } from 'lucide-react'\r\nimport { Row, Table } from '@tanstack/react-table'\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger\r\n} from '@/components/ui/alert-dialog'\r\n\r\ninterface EditedCellProps<TData> {\r\n  title: string\r\n  row: Row<TData>\r\n  table: Table<TData>\r\n}\r\n\r\nexport function EditedCell<TData>({ row, table, title }: EditedCellProps<TData>) {\r\n  const meta = table.options.meta\r\n  const validRow = meta?.validRows![row.id]\r\n  const removeRow = () => {\r\n    meta?.removeRow!(row.index)\r\n  }\r\n\r\n\r\n  const disableSubmit = validRow ? Object.values(validRow)?.some((item) => !item) : false\r\n\r\n  const handleAction = useCallback(\r\n    (action: 'edit' | 'cancel' | 'done') => {\r\n      meta?.setEditedRows!((old: Record<string, boolean>) => ({\r\n        ...old,\r\n        [row.id]: action === 'edit' ? true : false\r\n      }))\r\n\r\n      if (action !== 'edit') {\r\n        if (action === 'cancel') {\r\n          meta?.revertData!(row.index)\r\n        } else {\r\n          meta?.updateRow!(row.index)\r\n        }\r\n      }\r\n    },\r\n    [row.id, row.index, meta]\r\n  )\r\n\r\n  const setEditedRows = useCallback(\r\n    (e: MouseEvent<HTMLButtonElement>) => {\r\n      const action = e.currentTarget.name as 'edit' | 'cancel' | 'done'\r\n      handleAction(action)\r\n    },\r\n    [handleAction]\r\n  )\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault()\r\n        if (meta?.editedRows![row.id] && !disableSubmit) {\r\n          handleAction('done')\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener('keydown', handleKeyDown)\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  }, [handleAction, row.id, meta?.editedRows, disableSubmit])\r\n\r\n  return meta?.editedRows![row.id] ? (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Button title=\"Cancel\" size={'icon'} onClick={setEditedRows} name=\"cancel\">\r\n        <X size={16} />\r\n      </Button>\r\n\r\n      <Button\r\n        size={'icon'}\r\n        onClick={setEditedRows}\r\n        name=\"done\"\r\n        title=\"Done\"\r\n        disabled={disableSubmit}\r\n        className={disableSubmit ? 'cursor-not-allowed' : ''}\r\n      >\r\n        <Check size={16} />\r\n      </Button>\r\n    </div>\r\n  ) : (\r\n    <div className=\"flex items-center gap-2\">\r\n      <Button title=\"Edit\" size={'icon'} onClick={setEditedRows} name=\"edit\">\r\n        <Pencil size={16} />\r\n      </Button>\r\n\r\n      <AlertDialog>\r\n        <AlertDialogTrigger title=\"Delete\" asChild>\r\n          <Button size={'icon'} variant={'destructive'} name=\"delete\">\r\n            <Trash size={16} />\r\n          </Button>\r\n        </AlertDialogTrigger>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Apakah Kamu yakin?</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              Menghapus data <span className=\"font-bold\">{title}</span>?.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n            <AlertDialogAction onClick={removeRow}>Continue</AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/server-table/edit-table-row-action.tsx"
    }
  ]
}