{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:ui",
  "title": "Modal",
  "description": "A simple Responsive Modal",
  "dependencies": [
    "@radix-ui/react-visually-hidden"
  ],
  "registryDependencies": [
    "dialog",
    "drawer",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/hooks/use-media-query.tsx",
      "content": "import * as React from \"react\";\r\n\r\nexport function useMediaQuery(query: string) {\r\n  const [value, setValue] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    function onChange(event: MediaQueryListEvent) {\r\n      setValue(event.matches);\r\n    }\r\n\r\n    const result = matchMedia(query);\r\n    result.addEventListener(\"change\", onChange);\r\n    setValue(result.matches);\r\n\r\n    return () => result.removeEventListener(\"change\", onChange);\r\n  }, [query]);\r\n\r\n  return value;\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/hooks/use-modal.tsx",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  type ReactNode,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\n\r\ntype ModalContextType = {\r\n  title: string;\r\n  isOpen: boolean;\r\n  content: ReactNode | null;\r\n  openModal: (title: string, content: ReactNode) => void;\r\n  closeModal: () => void;\r\n};\r\n\r\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\r\n\r\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<ReactNode | null>(null);\r\n\r\n  const openModal = useCallback((title: string, content: ReactNode) => {\r\n    setTitle(title);\r\n    setContent(content);\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setTitle(\"\");\r\n    setIsOpen(false);\r\n    setContent(null);\r\n  }, []);\r\n\r\n  const value = useMemo(\r\n    () => ({ title, isOpen, content, openModal, closeModal }),\r\n    [title, isOpen, content, openModal, closeModal]\r\n  );\r\n\r\n  return (\r\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useModal = () => {\r\n  const context = useContext(ModalContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useModal must be used within a ModalProvider. \" +\r\n        \"Please wrap your component with <ModalProvider>\"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n",
      "type": "registry:hook"
    },
    {
      "path": "src/registry/ui/modals.tsx",
      "content": "import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog'\r\nimport {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle\r\n} from '@/components/ui/drawer'\r\nimport { useModal } from '@/registry/hooks/use-modal'\r\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden'\r\nimport React from 'react'\r\nimport { useMediaQuery } from '@/registry/hooks/use-media-query'\r\nimport { Button } from '@/components/ui/button'\r\n\r\nexport function Modals() {\r\n  const { isOpen, title, content, closeModal } = useModal()\r\n\r\n  const isDesktop = useMediaQuery('(min-width: 768px)')\r\n\r\n  if (!title || !content) {\r\n    return null\r\n  }\r\n\r\n  if (isDesktop) {\r\n    return (\r\n      <Dialog open={isOpen} onOpenChange={closeModal}>\r\n        <DialogContent className=\"flex flex-col gap-0 p-0 min-w-sm sm:max-h-[min(640px,80vh)] w-auto sm:max-w-lg md:max-w-5xl [&>button:last-child]:top-3.5\">\r\n          <DialogHeader className=\"contents space-y-0 text-left\">\r\n            <DialogTitle className=\"capitalize border-b border-border px-6 py-4 text-base\">{title}</DialogTitle>\r\n            <VisuallyHidden>\r\n              <DialogDescription>@Hilmarch</DialogDescription>\r\n            </VisuallyHidden>\r\n            <div className=\"overflow-y-auto\">\r\n              <div className=\"p-6 text-base\">{content}</div>\r\n            </div>\r\n          </DialogHeader>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Drawer open={isOpen} onOpenChange={closeModal}>\r\n      <DrawerContent className=\"max-h-[min(640px,80vh)]\">\r\n        <DrawerHeader className=\"text-left\">\r\n          <DrawerTitle>{title}</DrawerTitle>\r\n          <VisuallyHidden>\r\n            <DrawerDescription>@Hilmarch</DrawerDescription>\r\n          </VisuallyHidden>\r\n        </DrawerHeader>\r\n        <div className=\"overflow-y-auto\">\r\n          <div className=\"text-base px-4\">{content}</div>\r\n        </div>\r\n        <DrawerFooter>\r\n          <DrawerClose asChild>\r\n            <Button size={'sm'} variant=\"outline\">\r\n              Cancel\r\n            </Button>\r\n          </DrawerClose>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}