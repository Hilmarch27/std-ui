{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:ui",
  "title": "Modal",
  "description": "A simple Responsive Modal",
  "dependencies": [
    "@radix-ui/react-visually-hidden"
  ],
  "registryDependencies": [
    "dialog",
    "drawer",
    "button"
  ],
  "files": [
    {
      "path": "./src/registry/hooks/use-media-query.tsx",
      "content": "import * as React from \"react\";\n\nexport function useMediaQuery(query: string) {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    function onChange(event: MediaQueryListEvent) {\n      setValue(event.matches);\n    }\n\n    const result = matchMedia(query);\n    result.addEventListener(\"change\", onChange);\n    setValue(result.matches);\n\n    return () => result.removeEventListener(\"change\", onChange);\n  }, [query]);\n\n  return value;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/hooks/use-modal.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport {\n  createContext,\n  useState,\n  useContext,\n  type ReactNode,\n  useCallback,\n  useMemo,\n} from \"react\";\n\ntype ModalContextType = {\n  title: string;\n  isOpen: boolean;\n  content: ReactNode | null;\n  openModal: (title: string, content: ReactNode) => void;\n  closeModal: () => void;\n};\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<ReactNode | null>(null);\n\n  const openModal = useCallback((title: string, content: ReactNode) => {\n    setTitle(title);\n    setContent(content);\n    setIsOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setTitle(\"\");\n    setIsOpen(false);\n    setContent(null);\n  }, []);\n\n  const value = useMemo(\n    () => ({ title, isOpen, content, openModal, closeModal }),\n    [title, isOpen, content, openModal, closeModal]\n  );\n\n  return (\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n  );\n};\n\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useModal must be used within a ModalProvider. \" +\n        \"Please wrap your component with <ModalProvider>\"\n    );\n  }\n  return context;\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "./src/registry/ui/modals.tsx",
      "content": "import {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n} from \"@/components/ui/drawer\";\nimport { useModal } from \"@/registry/hooks/use-modal\";\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\";\nimport React from \"react\";\nimport { useMediaQuery } from \"@/registry/hooks/use-media-query\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Modals() {\n  const { isOpen, title, content, closeModal } = useModal();\n\n  const isDesktop = useMediaQuery(\"(min-width: 768px)\");\n\n  if (!title || !content) {\n    return null;\n  }\n\n  if (isDesktop) {\n    return (\n      <Dialog open={isOpen} onOpenChange={closeModal}>\n        <DialogContent className=\"flex flex-col gap-0 p-0 min-w-sm sm:max-h-[min(640px,80vh)] w-auto sm:max-w-lg md:max-w-5xl [&>button:last-child]:top-3.5\">\n          <DialogHeader className=\"contents space-y-0 text-left\">\n            <DialogTitle className=\"capitalize border-b border-border px-6 py-4 text-base\">\n              {title}\n            </DialogTitle>\n            <VisuallyHidden>\n              <DialogDescription>@Hilmarch</DialogDescription>\n            </VisuallyHidden>\n            <div className=\"overflow-y-auto\">\n              <div className=\"p-6 text-base\">{content}</div>\n            </div>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Drawer open={isOpen} onOpenChange={closeModal}>\n      <DrawerContent className=\"max-h-[min(640px,80vh)]\">\n        <DrawerHeader className=\"text-left\">\n          <DrawerTitle>{title}</DrawerTitle>\n          <VisuallyHidden>\n            <DrawerDescription>@Hilmarch</DrawerDescription>\n          </VisuallyHidden>\n        </DrawerHeader>\n        <div className=\"overflow-y-auto\">\n          <div className=\"text-base px-4\">{content}</div>\n        </div>\n        <DrawerFooter>\n          <DrawerClose asChild>\n            <Button size={'sm'} variant=\"outline\">\n              Cancel\n            </Button>\n          </DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}