{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker",
  "type": "registry:ui",
  "title": "Date Time Picker",
  "description": "A simple Date Time Picker",
  "dependencies": [
    "lucide-react",
    "date-fns",
    "react-day-picker"
  ],
  "registryDependencies": [
    "label",
    "input",
    "button",
    "popover",
    "select",
    "https://std-ui.vercel.app/r/calendar"
  ],
  "files": [
    {
      "path": "./src/registry/ui/date-time-picker.tsx",
      "content": "'use client'\n\nimport type React from 'react'\n\nimport { useState, useId } from 'react'\nimport { format, set } from 'date-fns'\nimport { CalendarIcon, ClockIcon } from 'lucide-react'\nimport { Calendar } from '@/registry/ui/calendar'\nimport { Button } from '@/components/ui/button'\nimport { Label } from '@/components/ui/label'\nimport { Input } from '@/registry/ui/input'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { cn } from '@/lib/utils'\nimport type { DropdownNavProps, DropdownProps } from 'react-day-picker'\nimport { id as indonesianLocale } from 'date-fns/locale'\n\ntype DateTimePickerProps = {\n  label?: string\n  value?: Date\n  onChange?: (date: Date) => void\n  locale?: 'en' | 'id'\n  dateTimeFormat?: string\n}\n\nexport function DateTimePicker({\n  label = 'Date and Time',\n  value,\n  onChange,\n  locale = 'en',\n  dateTimeFormat\n}: DateTimePickerProps) {\n  const id = useId()\n  const [dateTime, setDateTime] = useState<Date | undefined>(value || new Date())\n\n  // Format time as HH:MM:SS for the time input\n  const timeString = dateTime ? format(dateTime, 'HH:mm:ss') : '12:00:00'\n\n  const handleDateChange = (date: Date | undefined) => {\n    if (!date) return\n\n    // Preserve the time from the current dateTime\n    if (dateTime) {\n      const newDateTime = set(date, {\n        hours: dateTime.getHours(),\n        minutes: dateTime.getMinutes(),\n        seconds: dateTime.getSeconds()\n      })\n      setDateTime(newDateTime)\n      onChange?.(newDateTime)\n    } else {\n      setDateTime(date)\n      onChange?.(date)\n    }\n  }\n\n  const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const timeValue = e.target.value\n    if (!timeValue || !dateTime) return\n\n    // Parse the time string and update the dateTime with the new time values\n    const [hours, minutes, seconds] = timeValue.split(':').map(Number)\n    const newDateTime = set(dateTime, { hours, minutes, seconds: seconds || 0 })\n\n    setDateTime(newDateTime)\n    onChange?.(newDateTime)\n  }\n\n  const handleCalendarChange = (_value: string | number, _e: React.ChangeEventHandler<HTMLSelectElement>) => {\n    const _event = {\n      target: {\n        value: String(_value)\n      }\n    } as React.ChangeEvent<HTMLSelectElement>\n    _e(_event)\n  }\n\n  const getLocale = () => {\n    switch (locale) {\n      case 'id':\n        return indonesianLocale\n      default:\n        return undefined // Default English locale\n    }\n  }\n\n  const getDefaultFormat = () => {\n    switch (locale) {\n      case 'id':\n        return 'dd MMMM yyyy, HH:mm:ss'\n      default:\n        return 'PPP p' // Default English format\n    }\n  }\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <div className={cn('grid w-full items-center gap-1.5')}>\n          <Label htmlFor={id}>{label}</Label>\n          <Button\n            id={id}\n            variant=\"outline\"\n            className={cn(\n              'w-full min-w-[240px] justify-start text-left font-normal',\n              !dateTime && 'text-muted-foreground'\n            )}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {dateTime ? (\n              format(dateTime, dateTimeFormat || getDefaultFormat(), { locale: getLocale() })\n            ) : (\n              <span>Pick a date and time</span>\n            )}\n          </Button>\n        </div>\n      </PopoverTrigger>\n      <PopoverContent side=\"top\" className=\"p-0 w-auto\" align=\"start\">\n        <div className=\"rounded-md border\">\n          <Calendar\n            mode=\"single\"\n            selected={dateTime}\n            onSelect={handleDateChange}\n            className=\"p-2\"\n            classNames={{\n              month_caption: 'mx-0'\n            }}\n            captionLayout=\"dropdown\"\n            defaultMonth={dateTime || new Date()}\n            startMonth={new Date(1980, 6)}\n            hideNavigation\n            components={{\n              DropdownNav: (props: DropdownNavProps) => {\n                return <div className=\"flex w-full gap-2 items-center\">{props.children}</div>\n              },\n              Dropdown: (props: DropdownProps) => {\n                return (\n                  <Select\n                    value={String(props.value)}\n                    onValueChange={(value) => {\n                      if (props.onChange) {\n                        handleCalendarChange(value, props.onChange)\n                      }\n                    }}\n                  >\n                    <SelectTrigger className=\"h-8 w-fit first:grow font-medium\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"max-h-[min(26rem,var(--radix-select-content-available-height))]\">\n                      {props.options?.map((option) => (\n                        <SelectItem key={option.value} value={String(option.value)} disabled={option.disabled}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )\n              }\n            }}\n          />\n          <div className=\"border-t p-3\">\n            <div className=\"flex items-center gap-3\">\n              <Label htmlFor={`${id}-time`} className=\"text-xs\">\n                Enter time\n              </Label>\n              <div className=\"relative grow\">\n                <Input\n                  id={`${id}-time`}\n                  type=\"time\"\n                  onChange={handleTimeChange}\n                  step=\"1\"\n                  value={timeString}\n                  className=\"peer appearance-none ps-9 [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\n                />\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\n                  <ClockIcon size={16} aria-hidden=\"true\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}