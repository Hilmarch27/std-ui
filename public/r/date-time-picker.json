{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-time-picker",
  "type": "registry:ui",
  "title": "Date Time Picker",
  "description": "A simple Date Time Picker",
  "dependencies": [
    "lucide-react",
    "date-fns",
    "react-day-picker@latest"
  ],
  "registryDependencies": [
    "label",
    "input",
    "button",
    "popover",
    "select",
    "https://std-ui.vercel.app/r/calendar"
  ],
  "files": [
    {
      "path": "src/registry/ui/date-time-picker.tsx",
      "content": "'use client'\r\n\r\nimport type React from 'react'\r\n\r\nimport { useState, useId } from 'react'\r\nimport { format, set } from 'date-fns'\r\nimport { CalendarIcon, ClockIcon } from 'lucide-react'\r\nimport { Calendar } from '@/registry/ui/calendar'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Input } from '@/registry/ui/input'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\nimport { cn } from '@/lib/utils'\r\nimport type { DropdownNavProps, DropdownProps } from 'react-day-picker'\r\nimport { id as indonesianLocale } from 'date-fns/locale'\r\n\r\ntype DateTimePickerProps = {\r\n  label?: string\r\n  value?: Date\r\n  onChange?: (date: Date) => void\r\n  locale?: 'en' | 'id'\r\n  dateTimeFormat?: string\r\n}\r\n\r\nexport function DateTimePicker({\r\n  label = 'Date and Time',\r\n  value,\r\n  onChange,\r\n  locale = 'en',\r\n  dateTimeFormat\r\n}: DateTimePickerProps) {\r\n  const id = useId()\r\n  const [dateTime, setDateTime] = useState<Date | undefined>(value || new Date())\r\n\r\n  // Format time as HH:MM:SS for the time input\r\n  const timeString = dateTime ? format(dateTime, 'HH:mm:ss') : '12:00:00'\r\n\r\n  const handleDateChange = (date: Date | undefined) => {\r\n    if (!date) return\r\n\r\n    // Preserve the time from the current dateTime\r\n    if (dateTime) {\r\n      const newDateTime = set(date, {\r\n        hours: dateTime.getHours(),\r\n        minutes: dateTime.getMinutes(),\r\n        seconds: dateTime.getSeconds()\r\n      })\r\n      setDateTime(newDateTime)\r\n      onChange?.(newDateTime)\r\n    } else {\r\n      setDateTime(date)\r\n      onChange?.(date)\r\n    }\r\n  }\r\n\r\n  const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const timeValue = e.target.value\r\n    if (!timeValue || !dateTime) return\r\n\r\n    // Parse the time string and update the dateTime with the new time values\r\n    const [hours, minutes, seconds] = timeValue.split(':').map(Number)\r\n    const newDateTime = set(dateTime, { hours, minutes, seconds: seconds || 0 })\r\n\r\n    setDateTime(newDateTime)\r\n    onChange?.(newDateTime)\r\n  }\r\n\r\n  const handleCalendarChange = (_value: string | number, _e: React.ChangeEventHandler<HTMLSelectElement>) => {\r\n    const _event = {\r\n      target: {\r\n        value: String(_value)\r\n      }\r\n    } as React.ChangeEvent<HTMLSelectElement>\r\n    _e(_event)\r\n  }\r\n\r\n  const getLocale = () => {\r\n    switch (locale) {\r\n      case 'id':\r\n        return indonesianLocale\r\n      default:\r\n        return undefined // Default English locale\r\n    }\r\n  }\r\n\r\n  const getDefaultFormat = () => {\r\n    switch (locale) {\r\n      case 'id':\r\n        return 'dd MMMM yyyy, HH:mm:ss'\r\n      default:\r\n        return 'PPP p' // Default English format\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <div className={cn('grid w-full items-center gap-1.5')}>\r\n          <Label htmlFor={id}>{label}</Label>\r\n          <Button\r\n            id={id}\r\n            variant=\"outline\"\r\n            className={cn(\r\n              'w-full min-w-[240px] justify-start text-left font-normal',\r\n              !dateTime && 'text-muted-foreground'\r\n            )}\r\n          >\r\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n            {dateTime ? (\r\n              format(dateTime, dateTimeFormat || getDefaultFormat(), { locale: getLocale() })\r\n            ) : (\r\n              <span>Pick a date and time</span>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </PopoverTrigger>\r\n      <PopoverContent side=\"top\" className=\"p-0 w-auto\" align=\"start\">\r\n        <div className=\"rounded-md border\">\r\n          <Calendar\r\n            mode=\"single\"\r\n            selected={dateTime}\r\n            onSelect={handleDateChange}\r\n            className=\"p-2\"\r\n            classNames={{\r\n              month_caption: 'mx-0'\r\n            }}\r\n            captionLayout=\"dropdown\"\r\n            defaultMonth={dateTime || new Date()}\r\n            startMonth={new Date(1980, 6)}\r\n            hideNavigation\r\n            components={{\r\n              DropdownNav: (props: DropdownNavProps) => {\r\n                return <div className=\"flex w-full gap-2 items-center\">{props.children}</div>\r\n              },\r\n              Dropdown: (props: DropdownProps) => {\r\n                return (\r\n                  <Select\r\n                    value={String(props.value)}\r\n                    onValueChange={(value) => {\r\n                      if (props.onChange) {\r\n                        handleCalendarChange(value, props.onChange)\r\n                      }\r\n                    }}\r\n                  >\r\n                    <SelectTrigger className=\"h-8 w-fit first:grow font-medium\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent className=\"max-h-[min(26rem,var(--radix-select-content-available-height))]\">\r\n                      {props.options?.map((option) => (\r\n                        <SelectItem key={option.value} value={String(option.value)} disabled={option.disabled}>\r\n                          {option.label}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                )\r\n              }\r\n            }}\r\n          />\r\n          <div className=\"border-t p-3\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Label htmlFor={`${id}-time`} className=\"text-xs\">\r\n                Enter time\r\n              </Label>\r\n              <div className=\"relative grow\">\r\n                <Input\r\n                  id={`${id}-time`}\r\n                  type=\"time\"\r\n                  onChange={handleTimeChange}\r\n                  step=\"1\"\r\n                  value={timeString}\r\n                  className=\"peer appearance-none ps-9 [&::-webkit-calendar-picker-indicator]:hidden [&::-webkit-calendar-picker-indicator]:appearance-none\"\r\n                />\r\n                <div className=\"text-muted-foreground/80 pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 peer-disabled:opacity-50\">\r\n                  <ClockIcon size={16} aria-hidden=\"true\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    }
  ]
}