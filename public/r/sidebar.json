{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:block",
  "title": "Sidebar",
  "description": "A simple sidebar",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "sidebar",
    "button",
    "collapsible",
    "badge",
    "input",
    "dropdown-menu",
    "avatar"
  ],
  "files": [
    {
      "path": "src/registry/blocks/sidebar/block/app-sidebar.tsx",
      "content": "'use client'\nimport React from 'react'\nimport { Sidebar, SidebarContent, SidebarFooter, SidebarHeader, SidebarRail } from '@/components/ui/sidebar'\nimport { NavGroup } from '@/registry/blocks/sidebar/block/nav-group'\nimport { NavUser } from '@/registry/blocks/sidebar/block/nav-user'\nimport { TeamSwitcher } from '@/registry/blocks/sidebar/block/team-switcher'\nimport { sidebarData } from '@/registry/blocks/sidebar/lib/data/sidebar'\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar\n      // className=\"h-[700px] absolute top-1/2  2xl:top-[38%] left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\n      collapsible=\"icon\"\n      variant=\"floating\"\n      {...props}\n    >\n      <SidebarHeader>\n        <TeamSwitcher teams={sidebarData.teams} />\n      </SidebarHeader>\n      <SidebarContent>\n        {sidebarData.navGroups.map((props) => (\n          <NavGroup key={props.title} {...props} />\n        ))}\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={sidebarData.user} />\n      </SidebarFooter>\n      <SidebarRail />\n    </Sidebar>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/sidebar/app-sidebar.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/lib/data/sidebar.ts",
      "content": "import {\n  Aperture,\n  AudioWaveform,\n  BadgeHelp,\n  Ban,\n  Bug,\n  BugPlay,\n  Check,\n  CircleHelp,\n  Command,\n  Construction,\n  X\n} from 'lucide-react'\nimport { type SidebarData } from '@/registry/blocks/sidebar/lib/types/sidebar'\n\nexport const sidebarData: SidebarData = {\n  user: {\n    name: 'hilman',\n    email: 'hilmarch03@gmail.com',\n    avatar: '/logo.jpg'\n  },\n  teams: [\n    {\n      name: 'Std-UI',\n      logo: Aperture,\n      plan: 'Components'\n    },\n    {\n      name: 'Std-FN',\n      logo: AudioWaveform,\n      plan: 'Functions'\n    }\n  ],\n  navGroups: [\n    {\n      title: 'General',\n      items: [\n        {\n          title: 'Demo',\n          url: '/demo',\n          icon: Command\n        },\n        {\n          title: 'Tasks',\n          url: '/tasks',\n          icon: Check\n        }\n      ]\n    },\n    {\n      title: 'Pages',\n      items: [\n        {\n          title: 'Errors',\n          icon: Bug,\n          items: [\n            {\n              title: 'Unauthorized',\n              url: '/401',\n              icon: Ban\n            },\n            {\n              title: 'Forbidden',\n              url: '/403',\n              icon: X\n            },\n            {\n              title: 'Not Found',\n              url: '/404',\n              icon: BadgeHelp\n            },\n            {\n              title: 'Internal Server Error',\n              url: '/500',\n              icon: BugPlay\n            },\n            {\n              title: 'Maintenance Error',\n              url: '/503',\n              icon: Construction\n            }\n          ]\n        }\n      ]\n    },\n    {\n      title: 'Other',\n      items: [\n        {\n          title: 'Help Center',\n          url: '/help-center',\n          icon: CircleHelp\n        }\n      ]\n    }\n  ]\n}\n",
      "type": "registry:lib",
      "target": "lib/data/sidebar.ts"
    },
    {
      "path": "src/registry/blocks/sidebar/lib/types/sidebar.ts",
      "content": "import { LinkProps } from 'next/link'\n\ninterface User {\n  name: string\n  email: string\n  avatar: string\n}\n\ninterface Team {\n  name: string\n  logo: React.ElementType\n  plan: string\n}\n\ninterface BaseNavItem {\n  title: string\n  badge?: string\n  icon?: React.ElementType\n}\n\ntype NavLink = BaseNavItem & {\n  url: LinkProps['href']\n  items?: never\n}\n\ntype NavCollapsible = BaseNavItem & {\n  items: (BaseNavItem & { url: LinkProps['href'] })[]\n  url?: never\n}\n\ntype NavItem = NavCollapsible | NavLink\n\ninterface NavGroup {\n  title: string\n  items: NavItem[]\n}\n\ninterface SidebarData {\n  user: User\n  teams: Team[]\n  navGroups: NavGroup[]\n}\n\nexport type { SidebarData, NavGroup, NavItem, NavCollapsible, NavLink }",
      "type": "registry:lib",
      "target": "lib/types/sidebar.ts"
    },
    {
      "path": "src/registry/blocks/sidebar/block/nav-group.tsx",
      "content": "'use client'\nimport { ReactNode } from 'react'\nimport { ChevronRight } from 'lucide-react'\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  useSidebar\n} from '@/components/ui/sidebar'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu'\nimport { NavCollapsible, NavLink, type NavGroup } from '@/registry/blocks/sidebar/lib/types/sidebar'\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\n\nexport function NavGroup({ title, items }: NavGroup) {\n  const { state } = useSidebar()\n  const pathname = usePathname()\n\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel>{title}</SidebarGroupLabel>\n      <SidebarMenu>\n        {items.map((item) => {\n          const key = `${item.title}-${item.url}`\n\n          if (!item.items) return <SidebarMenuLink key={key} item={item} href={pathname} />\n\n          if (state === 'collapsed') return <SidebarMenuCollapsedDropdown key={key} item={item} href={pathname} />\n\n          return <SidebarMenuCollapsible key={key} item={item} href={pathname} />\n        })}\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n\nconst NavBadge = ({ children }: { children: ReactNode }) => (\n  <Badge className=\"text-xs rounded-full px-1 py-0\">{children}</Badge>\n)\n\nconst SidebarMenuLink = ({ item, href }: { item: NavLink; href: string }) => {\n  const { setOpenMobile } = useSidebar()\n  return (\n    <SidebarMenuItem>\n      <SidebarMenuButton asChild isActive={checkIsActive(href, item)} tooltip={item.title}>\n        <Link href={item.url} onClick={() => setOpenMobile(false)}>\n          {item.icon && <item.icon />}\n          <span>{item.title}</span>\n          {item.badge && <NavBadge>{item.badge}</NavBadge>}\n        </Link>\n      </SidebarMenuButton>\n    </SidebarMenuItem>\n  )\n}\n\nconst SidebarMenuCollapsible = ({ item, href }: { item: NavCollapsible; href: string }) => {\n  const { setOpenMobile } = useSidebar()\n  return (\n    <Collapsible asChild defaultOpen={checkIsActive(href, item, true)} className=\"group/collapsible\">\n      <SidebarMenuItem>\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton tooltip={item.title}>\n            {item.icon && <item.icon />}\n            <span>{item.title}</span>\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n          </SidebarMenuButton>\n        </CollapsibleTrigger>\n        <CollapsibleContent className=\"CollapsibleContent\">\n          <SidebarMenuSub>\n            {item.items.map((subItem) => (\n              <SidebarMenuSubItem key={subItem.title}>\n                <SidebarMenuSubButton\n                  className={checkIsActive(href, subItem) ? 'bg-primary' : ''}\n                  asChild\n                  isActive={checkIsActive(href, subItem)}\n                >\n                  <Link href={subItem.url} onClick={() => setOpenMobile(false)}>\n                    {subItem.icon && <subItem.icon />}\n                    <span>{subItem.title}</span>\n                    {subItem.badge && <NavBadge>{subItem.badge}</NavBadge>}\n                  </Link>\n                </SidebarMenuSubButton>\n              </SidebarMenuSubItem>\n            ))}\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </SidebarMenuItem>\n    </Collapsible>\n  )\n}\n\nconst SidebarMenuCollapsedDropdown = ({ item, href }: { item: NavCollapsible; href: string }) => {\n  return (\n    <SidebarMenuItem>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <SidebarMenuButton tooltip={item.title} isActive={checkIsActive(href, item)}>\n            {item.icon && <item.icon />}\n            <span>{item.title}</span>\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n          </SidebarMenuButton>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent side=\"right\" align=\"start\" sideOffset={4}>\n          <DropdownMenuLabel>\n            {item.title} {item.badge ? `(${item.badge})` : ''}\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator />\n          {item.items.map((sub) => (\n            <DropdownMenuItem key={`${sub.title}-${sub.url}`} asChild>\n              <Link href={sub.url} className={`${checkIsActive(href, sub) ? 'bg-secondary' : ''}`}>\n                {sub.icon && <sub.icon />}\n                <span className=\"max-w-52 text-wrap\">{sub.title}</span>\n                {sub.badge && <span className=\"ml-auto text-xs\">{sub.badge}</span>}\n              </Link>\n            </DropdownMenuItem>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </SidebarMenuItem>\n  )\n}\n\n/**\n * Checks if a navigation item is active based on the current URL path\n * @param currentPath - Current pathname from Next.js router\n * @param item - Navigation item to check\n * @param checkChildren - Whether to check child items for active state\n * @returns boolean indicating if the item is active\n */\nconst checkIsActive = (\n  currentPath: string,\n  item: NavLink | NavCollapsible | (NavLink & { url: string }),\n  checkChildren: boolean = false\n): boolean => {\n  // For items with direct URLs (NavLink)\n  if ('url' in item) {\n    // Convert both paths to strings for comparison\n    const itemPath = item.url!.toString()\n\n    // Exact match\n    if (itemPath === currentPath) {\n      return true\n    }\n\n    // Check if current path starts with item path (for nested routes)\n    // Only match if item path is not just \"/\"\n    if (itemPath !== '/' && currentPath.startsWith(itemPath)) {\n      return true\n    }\n  }\n\n  // For collapsible items with children (NavCollapsible)\n  if (checkChildren && 'items' in item && Array.isArray(item.items)) {\n    // Check if any child item is active\n    const result = item.items.some((subItem) => checkIsActive(currentPath, subItem as NavLink & { url: string }, false))\n    return result\n  }\n\n  return false\n}\n",
      "type": "registry:component",
      "target": "components/block/sidebar/nav-group.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/block/nav-user.tsx",
      "content": "'use client'\nimport { BadgeCheck, Bell, ChevronsUpDown, CreditCard, LogOut, Sparkles } from 'lucide-react'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/ui/sidebar'\nimport Link from 'next/link'\n\ntype NavUserProps = {\n  user: {\n    name: string\n    email: string\n    avatar: string\n  }\n}\n\nexport function NavUser({ user }: NavUserProps) {\n  const { isMobile } = useSidebar()\n\n  if (!user) {\n    throw new Error('NavUser: user is required')\n  }\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <Avatar className=\"h-8 w-8 rounded-lg\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback className=\"rounded-lg\">SN</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-semibold\">{user.name}</span>\n                <span className=\"truncate text-xs\">{user.email}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n            side={isMobile ? 'bottom' : 'right'}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar className=\"h-8 w-8 rounded-lg\">\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback className=\"rounded-lg\">SN</AvatarFallback>\n                </Avatar>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-semibold\">{user.name}</span>\n                  <span className=\"truncate text-xs\">{user.email}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <Sparkles />\n                Upgrade to Pro\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem asChild>\n                <Link href=\"/settings/account\">\n                  <BadgeCheck />\n                  Account\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/settings\">\n                  <CreditCard />\n                  Billing\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link href=\"/settings/notifications\">\n                  <Bell />\n                  Notifications\n                </Link>\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <LogOut />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/sidebar/nav-user.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/block/team-switcher.tsx",
      "content": "'use client'\nimport * as React from 'react'\nimport { ChevronsUpDown, Plus } from 'lucide-react'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu'\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/ui/sidebar'\n\ntype TeamSwitcherProps = {\n  teams: {\n    name: string\n    logo: React.ElementType\n    plan: string\n  }[]\n}\n\nexport function TeamSwitcher({ teams }: TeamSwitcherProps) {\n  const { isMobile } = useSidebar()\n  const [activeTeam, setActiveTeam] = React.useState(teams[0])\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n                {activeTeam && <activeTeam.logo className=\"size-4\" />}\n              </div>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-semibold\">{activeTeam?.name ?? 'Your team'}</span>\n                <span className=\"truncate text-xs\">{activeTeam?.plan ?? 'Free'}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n            align=\"start\"\n            side={isMobile ? 'bottom' : 'right'}\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">Teams</DropdownMenuLabel>\n            {teams.map((team, index) => (\n              <DropdownMenuItem key={team.name} onClick={() => setActiveTeam(team)} className=\"gap-2 p-2\">\n                <div className=\"flex size-6 items-center justify-center rounded-sm border\">\n                  <team.logo className=\"size-4 shrink-0\" />\n                </div>\n                {team.name}\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            ))}\n            <DropdownMenuSeparator />\n            <DropdownMenuItem className=\"gap-2 p-2\">\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-background\">\n                <Plus className=\"size-4\" />\n              </div>\n              <div className=\"font-medium text-muted-foreground\">Add team</div>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/block/sidebar/team-switcher.tsx"
    }
  ],
  "meta": {
    "component": "~/__registry__/preview/block/sidebar.tsx"
  }
}