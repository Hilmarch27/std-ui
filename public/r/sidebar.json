{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:block",
  "title": "Sidebar",
  "description": "A simple sidebar",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "sidebar",
    "button",
    "collapsible",
    "badge",
    "input",
    "dropdown-menu",
    "avatar"
  ],
  "files": [
    {
      "path": "src/registry/blocks/sidebar/components/app-sidebar.tsx",
      "content": "'use client'\r\nimport React from 'react'\r\nimport { Sidebar, SidebarContent, SidebarFooter, SidebarHeader, SidebarRail } from '@/components/ui/sidebar'\r\nimport { NavGroup } from '@/registry/blocks/sidebar/block/nav-group'\r\nimport { NavUser } from '@/registry/blocks/sidebar/block/nav-user'\r\nimport { TeamSwitcher } from '@/registry/blocks/sidebar/block/team-switcher'\r\nimport { sidebarData } from '@/registry/blocks/sidebar/lib/data/sidebar'\r\n\r\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\r\n  return (\r\n    <Sidebar\r\n      // className=\"h-[700px] absolute top-1/2  2xl:top-[38%] left-1/2 transform -translate-x-1/2 -translate-y-1/2\"\r\n      collapsible=\"icon\"\r\n      variant=\"floating\"\r\n      {...props}\r\n    >\r\n      <SidebarHeader>\r\n        <TeamSwitcher teams={sidebarData.teams} />\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        {sidebarData.navGroups.map((props) => (\r\n          <NavGroup key={props.title} {...props} />\r\n        ))}\r\n      </SidebarContent>\r\n      <SidebarFooter>\r\n        <NavUser user={sidebarData.user} />\r\n      </SidebarFooter>\r\n      <SidebarRail />\r\n    </Sidebar>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/sidebar/app-sidebar.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/lib/data/sidebar.ts",
      "content": "import {\r\n  Aperture,\r\n  AudioWaveform,\r\n  BadgeHelp,\r\n  Ban,\r\n  Bug,\r\n  BugPlay,\r\n  Check,\r\n  CircleHelp,\r\n  Command,\r\n  Construction,\r\n  X\r\n} from 'lucide-react'\r\nimport { type SidebarData } from '@/registry/blocks/sidebar/lib/types/sidebar'\r\n\r\nexport const sidebarData: SidebarData = {\r\n  user: {\r\n    name: 'hilman',\r\n    email: 'hilmarch03@gmail.com',\r\n    avatar: '/logo.jpg'\r\n  },\r\n  teams: [\r\n    {\r\n      name: 'Std-UI',\r\n      logo: Aperture,\r\n      plan: 'Components'\r\n    },\r\n    {\r\n      name: 'Std-FN',\r\n      logo: AudioWaveform,\r\n      plan: 'Functions'\r\n    }\r\n  ],\r\n  navGroups: [\r\n    {\r\n      title: 'General',\r\n      items: [\r\n        {\r\n          title: 'Demo',\r\n          url: '/demo',\r\n          icon: Command\r\n        },\r\n        {\r\n          title: 'Tasks',\r\n          url: '/tasks',\r\n          icon: Check\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Pages',\r\n      items: [\r\n        {\r\n          title: 'Errors',\r\n          icon: Bug,\r\n          items: [\r\n            {\r\n              title: 'Unauthorized',\r\n              url: '/401',\r\n              icon: Ban\r\n            },\r\n            {\r\n              title: 'Forbidden',\r\n              url: '/403',\r\n              icon: X\r\n            },\r\n            {\r\n              title: 'Not Found',\r\n              url: '/404',\r\n              icon: BadgeHelp\r\n            },\r\n            {\r\n              title: 'Internal Server Error',\r\n              url: '/500',\r\n              icon: BugPlay\r\n            },\r\n            {\r\n              title: 'Maintenance Error',\r\n              url: '/503',\r\n              icon: Construction\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      title: 'Other',\r\n      items: [\r\n        {\r\n          title: 'Help Center',\r\n          url: '/help-center',\r\n          icon: CircleHelp\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
      "type": "registry:lib",
      "target": "lib/data/sidebar.ts"
    },
    {
      "path": "src/registry/blocks/sidebar/lib/types/sidebar.ts",
      "content": "import { LinkProps } from 'next/link'\r\n\r\ninterface User {\r\n  name: string\r\n  email: string\r\n  avatar: string\r\n}\r\n\r\ninterface Team {\r\n  name: string\r\n  logo: React.ElementType\r\n  plan: string\r\n}\r\n\r\ninterface BaseNavItem {\r\n  title: string\r\n  badge?: string\r\n  icon?: React.ElementType\r\n}\r\n\r\ntype NavLink = BaseNavItem & {\r\n  url: LinkProps['href']\r\n  items?: never\r\n}\r\n\r\ntype NavCollapsible = BaseNavItem & {\r\n  items: (BaseNavItem & { url: LinkProps['href'] })[]\r\n  url?: never\r\n}\r\n\r\ntype NavItem = NavCollapsible | NavLink\r\n\r\ninterface NavGroup {\r\n  title: string\r\n  items: NavItem[]\r\n}\r\n\r\ninterface SidebarData {\r\n  user: User\r\n  teams: Team[]\r\n  navGroups: NavGroup[]\r\n}\r\n\r\nexport type { SidebarData, NavGroup, NavItem, NavCollapsible, NavLink }",
      "type": "registry:lib",
      "target": "lib/types/sidebar.ts"
    },
    {
      "path": "src/registry/blocks/sidebar/components/nav-group.tsx",
      "content": "'use client'\r\nimport { ReactNode } from 'react'\r\nimport { ChevronRight } from 'lucide-react'\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'\r\nimport {\r\n  SidebarGroup,\r\n  SidebarGroupLabel,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  useSidebar\r\n} from '@/components/ui/sidebar'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { NavCollapsible, NavLink, type NavGroup } from '@/registry/blocks/sidebar/lib/types/sidebar'\r\nimport Link from 'next/link'\r\nimport { usePathname } from 'next/navigation'\r\n\r\nexport function NavGroup({ title, items }: NavGroup) {\r\n  const { state } = useSidebar()\r\n  const pathname = usePathname()\r\n\r\n  return (\r\n    <SidebarGroup>\r\n      <SidebarGroupLabel>{title}</SidebarGroupLabel>\r\n      <SidebarMenu>\r\n        {items.map((item) => {\r\n          const key = `${item.title}-${item.url}`\r\n\r\n          if (!item.items) return <SidebarMenuLink key={key} item={item} href={pathname} />\r\n\r\n          if (state === 'collapsed') return <SidebarMenuCollapsedDropdown key={key} item={item} href={pathname} />\r\n\r\n          return <SidebarMenuCollapsible key={key} item={item} href={pathname} />\r\n        })}\r\n      </SidebarMenu>\r\n    </SidebarGroup>\r\n  )\r\n}\r\n\r\nconst NavBadge = ({ children }: { children: ReactNode }) => (\r\n  <Badge className=\"text-xs rounded-full px-1 py-0\">{children}</Badge>\r\n)\r\n\r\nconst SidebarMenuLink = ({ item, href }: { item: NavLink; href: string }) => {\r\n  const { setOpenMobile } = useSidebar()\r\n  return (\r\n    <SidebarMenuItem>\r\n      <SidebarMenuButton asChild isActive={checkIsActive(href, item)} tooltip={item.title}>\r\n        <Link href={item.url} onClick={() => setOpenMobile(false)}>\r\n          {item.icon && <item.icon />}\r\n          <span>{item.title}</span>\r\n          {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n        </Link>\r\n      </SidebarMenuButton>\r\n    </SidebarMenuItem>\r\n  )\r\n}\r\n\r\nconst SidebarMenuCollapsible = ({ item, href }: { item: NavCollapsible; href: string }) => {\r\n  const { setOpenMobile } = useSidebar()\r\n  return (\r\n    <Collapsible asChild defaultOpen={checkIsActive(href, item, true)} className=\"group/collapsible\">\r\n      <SidebarMenuItem>\r\n        <CollapsibleTrigger asChild>\r\n          <SidebarMenuButton tooltip={item.title}>\r\n            {item.icon && <item.icon />}\r\n            <span>{item.title}</span>\r\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\r\n          </SidebarMenuButton>\r\n        </CollapsibleTrigger>\r\n        <CollapsibleContent className=\"CollapsibleContent\">\r\n          <SidebarMenuSub>\r\n            {item.items.map((subItem) => (\r\n              <SidebarMenuSubItem key={subItem.title}>\r\n                <SidebarMenuSubButton\r\n                  className={checkIsActive(href, subItem) ? 'bg-primary' : ''}\r\n                  asChild\r\n                  isActive={checkIsActive(href, subItem)}\r\n                >\r\n                  <Link href={subItem.url} onClick={() => setOpenMobile(false)}>\r\n                    {subItem.icon && <subItem.icon />}\r\n                    <span>{subItem.title}</span>\r\n                    {subItem.badge && <NavBadge>{subItem.badge}</NavBadge>}\r\n                  </Link>\r\n                </SidebarMenuSubButton>\r\n              </SidebarMenuSubItem>\r\n            ))}\r\n          </SidebarMenuSub>\r\n        </CollapsibleContent>\r\n      </SidebarMenuItem>\r\n    </Collapsible>\r\n  )\r\n}\r\n\r\nconst SidebarMenuCollapsedDropdown = ({ item, href }: { item: NavCollapsible; href: string }) => {\r\n  return (\r\n    <SidebarMenuItem>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <SidebarMenuButton tooltip={item.title} isActive={checkIsActive(href, item)}>\r\n            {item.icon && <item.icon />}\r\n            <span>{item.title}</span>\r\n            {item.badge && <NavBadge>{item.badge}</NavBadge>}\r\n            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\r\n          </SidebarMenuButton>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent side=\"right\" align=\"start\" sideOffset={4}>\r\n          <DropdownMenuLabel>\r\n            {item.title} {item.badge ? `(${item.badge})` : ''}\r\n          </DropdownMenuLabel>\r\n          <DropdownMenuSeparator />\r\n          {item.items.map((sub) => (\r\n            <DropdownMenuItem key={`${sub.title}-${sub.url}`} asChild>\r\n              <Link href={sub.url} className={`${checkIsActive(href, sub) ? 'bg-secondary' : ''}`}>\r\n                {sub.icon && <sub.icon />}\r\n                <span className=\"max-w-52 text-wrap\">{sub.title}</span>\r\n                {sub.badge && <span className=\"ml-auto text-xs\">{sub.badge}</span>}\r\n              </Link>\r\n            </DropdownMenuItem>\r\n          ))}\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </SidebarMenuItem>\r\n  )\r\n}\r\n\r\n/**\r\n * Checks if a navigation item is active based on the current URL path\r\n * @param currentPath - Current pathname from Next.js router\r\n * @param item - Navigation item to check\r\n * @param checkChildren - Whether to check child items for active state\r\n * @returns boolean indicating if the item is active\r\n */\r\nconst checkIsActive = (\r\n  currentPath: string,\r\n  item: NavLink | NavCollapsible | (NavLink & { url: string }),\r\n  checkChildren: boolean = false\r\n): boolean => {\r\n  // For items with direct URLs (NavLink)\r\n  if ('url' in item) {\r\n    // Convert both paths to strings for comparison\r\n    const itemPath = item.url!.toString()\r\n\r\n    // Exact match\r\n    if (itemPath === currentPath) {\r\n      return true\r\n    }\r\n\r\n    // Check if current path starts with item path (for nested routes)\r\n    // Only match if item path is not just \"/\"\r\n    if (itemPath !== '/' && currentPath.startsWith(itemPath)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  // For collapsible items with children (NavCollapsible)\r\n  if (checkChildren && 'items' in item && Array.isArray(item.items)) {\r\n    // Check if any child item is active\r\n    const result = item.items.some((subItem) => checkIsActive(currentPath, subItem as NavLink & { url: string }, false))\r\n    return result\r\n  }\r\n\r\n  return false\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/sidebar/nav-group.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/components/nav-user.tsx",
      "content": "'use client'\r\nimport { BadgeCheck, Bell, ChevronsUpDown, CreditCard, LogOut, Sparkles } from 'lucide-react'\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuGroup,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/ui/sidebar'\r\nimport Link from 'next/link'\r\n\r\ntype NavUserProps = {\r\n  user: {\r\n    name: string\r\n    email: string\r\n    avatar: string\r\n  }\r\n}\r\n\r\nexport function NavUser({ user }: NavUserProps) {\r\n  const { isMobile } = useSidebar()\r\n\r\n  if (!user) {\r\n    throw new Error('NavUser: user is required')\r\n  }\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <SidebarMenuButton\r\n              size=\"lg\"\r\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\r\n            >\r\n              <Avatar className=\"h-8 w-8 rounded-lg\">\r\n                <AvatarImage src={user.avatar} alt={user.name} />\r\n                <AvatarFallback className=\"rounded-lg\">SN</AvatarFallback>\r\n              </Avatar>\r\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\r\n                <span className=\"truncate font-semibold\">{user.name}</span>\r\n                <span className=\"truncate text-xs\">{user.email}</span>\r\n              </div>\r\n              <ChevronsUpDown className=\"ml-auto size-4\" />\r\n            </SidebarMenuButton>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\r\n            side={isMobile ? 'bottom' : 'right'}\r\n            align=\"end\"\r\n            sideOffset={4}\r\n          >\r\n            <DropdownMenuLabel className=\"p-0 font-normal\">\r\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\r\n                <Avatar className=\"h-8 w-8 rounded-lg\">\r\n                  <AvatarImage src={user.avatar} alt={user.name} />\r\n                  <AvatarFallback className=\"rounded-lg\">SN</AvatarFallback>\r\n                </Avatar>\r\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\r\n                  <span className=\"truncate font-semibold\">{user.name}</span>\r\n                  <span className=\"truncate text-xs\">{user.email}</span>\r\n                </div>\r\n              </div>\r\n            </DropdownMenuLabel>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem>\r\n                <Sparkles />\r\n                Upgrade to Pro\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuGroup>\r\n              <DropdownMenuItem asChild>\r\n                <Link href=\"/settings/account\">\r\n                  <BadgeCheck />\r\n                  Account\r\n                </Link>\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem asChild>\r\n                <Link href=\"/settings\">\r\n                  <CreditCard />\r\n                  Billing\r\n                </Link>\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem asChild>\r\n                <Link href=\"/settings/notifications\">\r\n                  <Bell />\r\n                  Notifications\r\n                </Link>\r\n              </DropdownMenuItem>\r\n            </DropdownMenuGroup>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n              <LogOut />\r\n              Log out\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/sidebar/nav-user.tsx"
    },
    {
      "path": "src/registry/blocks/sidebar/components/team-switcher.tsx",
      "content": "'use client'\r\nimport * as React from 'react'\r\nimport { ChevronsUpDown, Plus } from 'lucide-react'\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuShortcut,\r\n  DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'\r\nimport { SidebarMenu, SidebarMenuButton, SidebarMenuItem, useSidebar } from '@/components/ui/sidebar'\r\n\r\ntype TeamSwitcherProps = {\r\n  teams: {\r\n    name: string\r\n    logo: React.ElementType\r\n    plan: string\r\n  }[]\r\n}\r\n\r\nexport function TeamSwitcher({ teams }: TeamSwitcherProps) {\r\n  const { isMobile } = useSidebar()\r\n  const [activeTeam, setActiveTeam] = React.useState(teams[0])\r\n\r\n  return (\r\n    <SidebarMenu>\r\n      <SidebarMenuItem>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <SidebarMenuButton\r\n              size=\"lg\"\r\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\r\n            >\r\n              <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\r\n                {activeTeam && <activeTeam.logo className=\"size-4\" />}\r\n              </div>\r\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\r\n                <span className=\"truncate font-semibold\">{activeTeam?.name ?? 'Your team'}</span>\r\n                <span className=\"truncate text-xs\">{activeTeam?.plan ?? 'Free'}</span>\r\n              </div>\r\n              <ChevronsUpDown className=\"ml-auto\" />\r\n            </SidebarMenuButton>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent\r\n            className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\r\n            align=\"start\"\r\n            side={isMobile ? 'bottom' : 'right'}\r\n            sideOffset={4}\r\n          >\r\n            <DropdownMenuLabel className=\"text-xs text-muted-foreground\">Teams</DropdownMenuLabel>\r\n            {teams.map((team, index) => (\r\n              <DropdownMenuItem key={team.name} onClick={() => setActiveTeam(team)} className=\"gap-2 p-2\">\r\n                <div className=\"flex size-6 items-center justify-center rounded-sm border\">\r\n                  <team.logo className=\"size-4 shrink-0\" />\r\n                </div>\r\n                {team.name}\r\n                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>\r\n              </DropdownMenuItem>\r\n            ))}\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem className=\"gap-2 p-2\">\r\n              <div className=\"flex size-6 items-center justify-center rounded-md border bg-background\">\r\n                <Plus className=\"size-4\" />\r\n              </div>\r\n              <div className=\"font-medium text-muted-foreground\">Add team</div>\r\n            </DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </SidebarMenuItem>\r\n    </SidebarMenu>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/block/sidebar/team-switcher.tsx"
    }
  ],
  "meta": {
    "component": "~/__registry__/preview/block/sidebar.tsx"
  }
}