{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-file",
  "type": "registry:ui",
  "title": "Input File",
  "description": "A simple Input File",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "./src/registry/ui/input-file.tsx",
      "content": "'use client'\n\nimport { useState, useRef, type ChangeEvent } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Eye, SendIcon, Trash2, Upload } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { useModal } from '../hooks/use-modal'\n\ninterface InputFileProps {\n  id: string\n  name: string\n  className?: string\n  accept?: string\n  multiple?: boolean\n  onChange?: (files: File[] | null) => void\n}\n\nexport function InputFile({\n  id,\n  name,\n  className,\n  accept,\n  multiple = false,\n  onChange,\n  ...props\n}: InputFileProps) {\n  const [files, setFiles] = useState<File[] | null>(null)\n  const [preview, setPreview] = useState<string | null>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const { openModal, closeModal } = useModal()\n\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const selectedFiles = e.target.files ? Array.from(e.target.files) : null\n    setFiles(selectedFiles)\n\n    if (preview) {\n      URL.revokeObjectURL(preview)\n      setPreview(null)\n    }\n\n    if (selectedFiles && selectedFiles.length > 0 && selectedFiles[0]?.type.startsWith('image/')) {\n      const url = URL.createObjectURL(selectedFiles[0])\n      setPreview(url)\n    }\n\n    if (onChange) {\n      onChange(selectedFiles)\n    }\n  }\n\n  const handleDelete = () => {\n    if (inputRef.current) {\n      inputRef.current.value = ''\n    }\n\n    if (preview) {\n      URL.revokeObjectURL(preview)\n    }\n\n    setFiles(null)\n    setPreview(null)\n    closeModal()\n\n    if (onChange) {\n      onChange(null)\n    }\n  }\n\n  const togglePreview = () => {\n    openModal('Preview', previewFile())\n  }\n\n  const truncateFileName = (fileName: string, maxLength: number) => {\n    if (fileName.length > maxLength) {\n      const extensionIndex = fileName.lastIndexOf('.')\n      const extension = fileName.substring(extensionIndex)\n      return `${fileName.substring(0, maxLength)}...${extension}`\n    }\n    return fileName\n  }\n\n  function previewFile() {\n    return (\n      <div className=\"p-1.5 rounded-md bg-muted/20 grid gap-1.5\">\n        <img src={preview || '/placeholder.svg'} alt=\"File preview\" className=\"max-w-full object-contain mx-auto\" />\n        {files && files.length > 0 && (\n          <div className=\"text-xs text-muted-foreground\">\n            {files.map((file, index) => (\n              <div key={index} className=\"flex items-center gap-2\">\n                <span className=\"truncate\">{truncateFileName(file.name, 30)}</span>\n                <span>({(file.size / 1024).toFixed(2)} KB)</span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn('space-y-2', className)}>\n      <div className=\"flex items-center\">\n        <div className=\"relative flex-1\">\n          <input\n            id={id}\n            ref={inputRef}\n            type=\"file\"\n            name={name}\n            accept={accept}\n            multiple={multiple}\n            onChange={handleFileChange}\n            className=\"absolute inset-0 opacity-0 w-full h-full cursor-pointer z-10\"\n            {...props}\n          />\n          <div\n            className={`${\n              files ? 'rounded-l-md' : 'rounded-md'\n            } flex items-center gap-2 p-2 border bg-background text-sm`}\n          >\n            <Upload className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground truncate\">\n              {files && files.length > 0\n                ? multiple\n                  ? `${files.length} files selected`\n                  : truncateFileName(files[0]?.name || '', 20) // Adjust `20` as needed\n                : 'Choose file...'}\n            </span>\n          </div>\n        </div>\n\n        {files && files.length > 0 && (\n          <div className=\"border border-l-0 rounded-r-md flex\">\n            <Button\n              className=\"border-none rounded-none\"\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={togglePreview}\n              disabled={!preview}\n              d-title=\"view file\"\n            >\n              <Eye size={16} />\n              <span className=\"sr-only\">View file</span>\n            </Button>\n            <Button\n              className=\"border-none rounded-none\"\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={handleDelete}\n              d-title=\"remove file\"\n            >\n              <Trash2 size={16} />\n              <span className=\"sr-only\">Delete file</span>\n            </Button>\n            <Button\n              className=\"border-none rounded-l-none rounded-r-md\"\n              type=\"button\"\n              variant=\"outline\"\n              size=\"icon\"\n              d-title=\"save file\"\n            >\n              <SendIcon size={16} />\n              <span className=\"sr-only\">Save file</span>\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "./src/registry/hooks/use-modal.tsx",
      "content": "\"use client\";\n\nimport type React from \"react\";\nimport {\n  createContext,\n  useState,\n  useContext,\n  type ReactNode,\n  useCallback,\n  useMemo,\n} from \"react\";\n\ntype ModalContextType = {\n  title: string;\n  isOpen: boolean;\n  content: ReactNode | null;\n  openModal: (title: string, content: ReactNode) => void;\n  closeModal: () => void;\n};\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<ReactNode | null>(null);\n\n  const openModal = useCallback((title: string, content: ReactNode) => {\n    setTitle(title);\n    setContent(content);\n    setIsOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setTitle(\"\");\n    setIsOpen(false);\n    setContent(null);\n  }, []);\n\n  const value = useMemo(\n    () => ({ title, isOpen, content, openModal, closeModal }),\n    [title, isOpen, content, openModal, closeModal]\n  );\n\n  return (\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n  );\n};\n\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useModal must be used within a ModalProvider. \" +\n        \"Please wrap your component with <ModalProvider>\"\n    );\n  }\n  return context;\n};\n",
      "type": "registry:hook"
    }
  ]
}