{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-file",
  "type": "registry:ui",
  "title": "Input File",
  "description": "A simple Input File",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "src/registry/ui/input-file.tsx",
      "content": "'use client'\r\n\r\nimport { useState, useRef, type ChangeEvent } from 'react'\r\nimport { Button } from '@/components/ui/button'\r\nimport { Eye, SendIcon, Trash2, Upload } from 'lucide-react'\r\nimport { cn } from '@/lib/utils'\r\nimport { useModal } from '../hooks/use-modal'\r\n\r\ninterface InputFileProps {\r\n  id: string\r\n  name: string\r\n  className?: string\r\n  accept?: string\r\n  multiple?: boolean\r\n  onChange?: (files: File[] | null) => void\r\n}\r\n\r\nexport function InputFile({\r\n  id,\r\n  name,\r\n  className,\r\n  accept,\r\n  multiple = false,\r\n  onChange,\r\n  ...props\r\n}: InputFileProps) {\r\n  const [files, setFiles] = useState<File[] | null>(null)\r\n  const [preview, setPreview] = useState<string | null>(null)\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const { openModal, closeModal } = useModal()\r\n\r\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files ? Array.from(e.target.files) : null\r\n    setFiles(selectedFiles)\r\n\r\n    if (preview) {\r\n      URL.revokeObjectURL(preview)\r\n      setPreview(null)\r\n    }\r\n\r\n    if (selectedFiles && selectedFiles.length > 0 && selectedFiles[0]?.type.startsWith('image/')) {\r\n      const url = URL.createObjectURL(selectedFiles[0])\r\n      setPreview(url)\r\n    }\r\n\r\n    if (onChange) {\r\n      onChange(selectedFiles)\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    if (inputRef.current) {\r\n      inputRef.current.value = ''\r\n    }\r\n\r\n    if (preview) {\r\n      URL.revokeObjectURL(preview)\r\n    }\r\n\r\n    setFiles(null)\r\n    setPreview(null)\r\n    closeModal()\r\n\r\n    if (onChange) {\r\n      onChange(null)\r\n    }\r\n  }\r\n\r\n  const togglePreview = () => {\r\n    openModal('Preview', previewFile())\r\n  }\r\n\r\n  const truncateFileName = (fileName: string, maxLength: number) => {\r\n    if (fileName.length > maxLength) {\r\n      const extensionIndex = fileName.lastIndexOf('.')\r\n      const extension = fileName.substring(extensionIndex)\r\n      return `${fileName.substring(0, maxLength)}...${extension}`\r\n    }\r\n    return fileName\r\n  }\r\n\r\n  function previewFile() {\r\n    return (\r\n      <div className=\"p-1.5 rounded-md bg-muted/20 grid gap-1.5\">\r\n        <img src={preview || '/placeholder.svg'} alt=\"File preview\" className=\"max-w-full object-contain mx-auto\" />\r\n        {files && files.length > 0 && (\r\n          <div className=\"text-xs text-muted-foreground\">\r\n            {files.map((file, index) => (\r\n              <div key={index} className=\"flex items-center gap-2\">\r\n                <span className=\"truncate\">{truncateFileName(file.name, 30)}</span>\r\n                <span>({(file.size / 1024).toFixed(2)} KB)</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={cn('space-y-2', className)}>\r\n      <div className=\"flex items-center\">\r\n        <div className=\"relative flex-1\">\r\n          <input\r\n            id={id}\r\n            ref={inputRef}\r\n            type=\"file\"\r\n            name={name}\r\n            accept={accept}\r\n            multiple={multiple}\r\n            onChange={handleFileChange}\r\n            className=\"absolute inset-0 opacity-0 w-full h-full cursor-pointer z-10\"\r\n            {...props}\r\n          />\r\n          <div\r\n            className={`${\r\n              files ? 'rounded-l-md' : 'rounded-md'\r\n            } flex items-center gap-2 p-2 border bg-background text-sm`}\r\n          >\r\n            <Upload className=\"h-4 w-4 text-muted-foreground\" />\r\n            <span className=\"text-muted-foreground truncate\">\r\n              {files && files.length > 0\r\n                ? multiple\r\n                  ? `${files.length} files selected`\r\n                  : truncateFileName(files[0]?.name || '', 20) // Adjust `20` as needed\r\n                : 'Choose file...'}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {files && files.length > 0 && (\r\n          <div className=\"border border-l-0 rounded-r-md flex\">\r\n            <Button\r\n              className=\"border-none rounded-none\"\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              onClick={togglePreview}\r\n              disabled={!preview}\r\n              d-title=\"view file\"\r\n            >\r\n              <Eye size={16} />\r\n              <span className=\"sr-only\">View file</span>\r\n            </Button>\r\n            <Button\r\n              className=\"border-none rounded-none\"\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              onClick={handleDelete}\r\n              d-title=\"remove file\"\r\n            >\r\n              <Trash2 size={16} />\r\n              <span className=\"sr-only\">Delete file</span>\r\n            </Button>\r\n            <Button\r\n              className=\"border-none rounded-l-none rounded-r-md\"\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              size=\"icon\"\r\n              d-title=\"save file\"\r\n            >\r\n              <SendIcon size={16} />\r\n              <span className=\"sr-only\">Save file</span>\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/hooks/use-modal.tsx",
      "content": "\"use client\";\r\n\r\nimport type React from \"react\";\r\nimport {\r\n  createContext,\r\n  useState,\r\n  useContext,\r\n  type ReactNode,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\n\r\ntype ModalContextType = {\r\n  title: string;\r\n  isOpen: boolean;\r\n  content: ReactNode | null;\r\n  openModal: (title: string, content: ReactNode) => void;\r\n  closeModal: () => void;\r\n};\r\n\r\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\r\n\r\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<ReactNode | null>(null);\r\n\r\n  const openModal = useCallback((title: string, content: ReactNode) => {\r\n    setTitle(title);\r\n    setContent(content);\r\n    setIsOpen(true);\r\n  }, []);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setTitle(\"\");\r\n    setIsOpen(false);\r\n    setContent(null);\r\n  }, []);\r\n\r\n  const value = useMemo(\r\n    () => ({ title, isOpen, content, openModal, closeModal }),\r\n    [title, isOpen, content, openModal, closeModal]\r\n  );\r\n\r\n  return (\r\n    <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useModal = () => {\r\n  const context = useContext(ModalContext);\r\n  if (context === undefined) {\r\n    throw new Error(\r\n      \"useModal must be used within a ModalProvider. \" +\r\n        \"Please wrap your component with <ModalProvider>\"\r\n    );\r\n  }\r\n  return context;\r\n};\r\n",
      "type": "registry:hook"
    }
  ]
}