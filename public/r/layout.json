{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "layout",
  "type": "registry:component",
  "title": "Layout Component",
  "description": "A simple layouts",
  "dependencies": [
    "lucide-react",
    "next-themes"
  ],
  "registryDependencies": [
    "separator",
    "sidebar",
    "dropdown-menu",
    "button",
    "avatar"
  ],
  "files": [
    {
      "path": "src/registry/components/layouts/header.tsx",
      "content": "import React from 'react'\nimport { cn } from '@/lib/utils'\nimport { Separator } from '@/components/ui/separator'\nimport { SidebarTrigger } from '@/components/ui/sidebar'\n\ntype HeaderProps = {\n    fixed?: boolean\n}\n\nexport const Header = ({ className, fixed, children, ...props }: HeaderProps & React.HTMLAttributes<HTMLElement>) => {\n    const [offset, setOffset] = React.useState(0)\n\n    React.useEffect(() => {\n        const onScroll = () => {\n            setOffset(document.body.scrollTop || document.documentElement.scrollTop)\n        }\n\n        // Add scroll listener to the body\n        document.addEventListener('scroll', onScroll, { passive: true })\n\n        // Clean up the event listener on unmount\n        return () => document.removeEventListener('scroll', onScroll)\n    }, [])\n\n    return (\n        <header\n            className={cn(\n                'flex h-16 items-center gap-3 bg-background p-4 sm:gap-4',\n                fixed && 'header-fixed peer/header fixed z-50 w-[inherit] rounded-md',\n                offset > 10 && fixed ? 'shadow' : 'shadow-none',\n                className\n            )}\n            {...props}\n        >\n            <SidebarTrigger variant=\"outline\" className=\"scale-125 sm:scale-100\" />\n            <Separator orientation=\"vertical\" className=\"h-6\" />\n            {children}\n        </header>\n    )\n}",
      "type": "registry:component",
      "target": "components/layouts/header.tsx"
    },
    {
      "path": "src/registry/components/layouts/main.tsx",
      "content": "import React from 'react'\nimport { cn } from '@/lib/utils'\n\ntype MainProps = {\n  fixed?: boolean\n}\n\nexport const Main = ({ fixed, ...props }: MainProps & React.HTMLAttributes<HTMLElement>) => {\n  return (\n    <main\n      className={cn(\n        'peer-[.header-fixed]/header:mt-16',\n        'px-4 py-6',\n        fixed && 'fixed-main flex flex-grow flex-col overflow-hidden'\n      )}\n      {...props}\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/layouts/main.tsx"
    },
    {
      "path": "src/registry/components/profile-dropdown.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuTrigger\n} from '@/components/ui/dropdown-menu'\nimport Link from 'next/link'\n\nexport function ProfileDropdown() {\n  return (\n    <DropdownMenu modal={false}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n          <Avatar className=\"h-8 w-8\">\n            <AvatarImage src=\"/avatars/01.png\" alt=\"@shadcn\" />\n            <AvatarFallback>SN</AvatarFallback>\n          </Avatar>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n        <DropdownMenuLabel className=\"font-normal\">\n          <div className=\"flex flex-col space-y-1\">\n            <p className=\"text-sm font-medium leading-none\">satnaing</p>\n            <p className=\"text-xs leading-none text-muted-foreground\">satnaingdev@gmail.com</p>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              Profile\n              <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              Billing\n              <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem asChild>\n            <Link href=\"/settings\">\n              Settings\n              <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n            </Link>\n          </DropdownMenuItem>\n          <DropdownMenuItem>New Team</DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/profile-dropdown.tsx"
    },
    {
      "path": "src/registry/components/theme-switch.tsx",
      "content": "import { useEffect } from 'react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { useTheme } from 'next-themes'\nimport { Check, Moon, Sun } from 'lucide-react'\n\nexport function ThemeSwitch() {\n  const { theme, setTheme } = useTheme()\n\n  /* Update theme-color meta tag\n   * when theme is updated */\n  useEffect(() => {\n    const themeColor = theme === 'dark' ? '#020817' : '#fff'\n    const metaThemeColor = document.querySelector(\"meta[name='theme-color']\")\n    if (metaThemeColor) metaThemeColor.setAttribute('content', themeColor)\n  }, [theme])\n\n  return (\n    <DropdownMenu modal={false}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"scale-95 rounded-full\">\n          <Sun className=\"size-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme('light')}>\n          Light <Check size={14} className={cn('ml-auto', theme !== 'light' && 'hidden')} />\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('dark')}>\n          Dark\n          <Check size={14} className={cn('ml-auto', theme !== 'dark' && 'hidden')} />\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme('system')}>\n          System\n          <Check size={14} className={cn('ml-auto', theme !== 'system' && 'hidden')} />\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/theme-switch.tsx"
    },
    {
      "path": "src/registry/components/top-nav.tsx",
      "content": "import { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Menu } from 'lucide-react'\nimport Link from 'next/link'\n\ntype TopNavProps = {\n  links: {\n    title: string\n    href: string\n    isActive: boolean\n  }[]\n}\n\nexport function TopNav({ className, links, ...props }: TopNavProps & React.HTMLAttributes<HTMLElement>) {\n  return (\n    <>\n      <div className=\"md:hidden\">\n        <DropdownMenu modal={false}>\n          <DropdownMenuTrigger asChild>\n            <Button size=\"icon\" variant=\"outline\">\n              <Menu />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent side=\"bottom\" align=\"start\">\n            {links.map(({ title, href, isActive }) => (\n              <DropdownMenuItem key={`${title}-${href}`} asChild>\n                <Link href={href} className={!isActive ? 'text-muted-foreground' : ''}>\n                  {title}\n                </Link>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <nav className={cn('hidden items-center space-x-4 md:flex lg:space-x-6', className)} {...props}>\n        {links.map(({ title, href, isActive }) => (\n          <Link\n            key={`${title}-${href}`}\n            href={href}\n            className={`text-sm font-medium transition-colors hover:text-primary ${\n              isActive ? '' : 'text-muted-foreground'\n            }`}\n          >\n            {title}\n          </Link>\n        ))}\n      </nav>\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/top-nav.tsx"
    }
  ]
}