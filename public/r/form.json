{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:ui",
  "title": "Form with tanstack form",
  "description": "A simple Enhanced Form and tanstack form",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-form",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "select",
    "label",
    "command",
    "popover",
    "https://std-ui.vercel.app/r/input",
    "https://std-ui.vercel.app/r/input-idr",
    "https://std-ui.vercel.app/r/floating-input"
  ],
  "files": [
    {
      "path": "src/registry/form/ui/form.tsx",
      "content": "'use client'\n\nimport React from 'react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { useFieldContext, useFormContext } from '@/registry/form/hooks/use-form'\nimport { FormEvent } from 'react'\nimport { Input, InputNumber } from '@/registry/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\nimport { Check, ChevronsUpDown } from 'lucide-react'\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command'\nimport { AnyFieldApi } from '@tanstack/react-form'\nimport { InputIDR } from '@/registry/ui/input-idr'\nimport { FloatingInput } from '@/registry/ui/floating-input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\n\ntype FormProps = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onSubmit'> & {\n  onSubmit?: () => Promise<void>\n  children: React.ReactNode\n  className?: string\n}\n\nfunction Form({ onSubmit, children, className, ...props }: FormProps) {\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    e.stopPropagation()\n    await onSubmit?.()\n  }\n\n  return (\n    <form\n      className={cn('space-y-4', className)}\n      onSubmit={(e: FormEvent<HTMLFormElement>) => void handleSubmit(e)}\n      {...props}\n    >\n      {children}\n    </form>\n  )\n}\n\n// ? form display error\nfunction FieldInfo({ field }: { field: AnyFieldApi }) {\n  return (\n    <>\n      {field.state.meta.isTouched && field.state.meta.errors.length ? (\n        <em className=\"text-red-600\">{field.state.meta.errors.map((err) => err.message).join(',')}</em>\n      ) : null}\n      {field.state.meta.isValidating ? 'Validating...' : null}\n    </>\n  )\n}\n\n// ? form components\ntype SubscribeButtonProps = React.ComponentProps<'button'> & {\n  label: string\n}\nfunction SubscribeButton({ label, className, ...props }: SubscribeButtonProps) {\n  const form = useFormContext()\n  return (\n    <form.Subscribe selector={(state) => state.isSubmitting}>\n      {(isSubmitting) => (\n        <Button className={cn('w-full', className)} {...props} disabled={isSubmitting}>\n          {label}\n        </Button>\n      )}\n    </form.Subscribe>\n  )\n}\n\n// ? form field\ntype TextFieldProps = React.ComponentProps<'input'> & {\n  label: string\n}\n\nfunction TextField({ className, placeholder, label, ...props }: TextFieldProps) {\n  const field = useFieldContext<string>()\n  return (\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\n      <Label htmlFor={label}>{label}</Label>\n      <Input\n        {...props}\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n        type=\"text\"\n        id={label}\n        placeholder={placeholder}\n      />\n      <FieldInfo field={field} />\n    </div>\n  )\n}\n\ntype IDRFieldProps = React.ComponentProps<'input'> & {\n  label: string\n}\n\nfunction IDRField({ className, label, ...props }: IDRFieldProps) {\n  const field = useFieldContext<number>()\n  return (\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\n      <Label htmlFor={label}>{label}</Label>\n      <InputIDR\n        {...props}\n        value={field.state.value}\n        onChange={(val) => field.handleChange(val)}\n        type=\"text\"\n        id={label}\n      />\n      <FieldInfo field={field} />\n    </div>\n  )\n}\n\ntype TextFloatingProps = React.ComponentProps<'input'> & {\n  label: string\n}\n\nfunction TextFloatingField({ label, className, ...props }: TextFloatingProps) {\n  const field = useFieldContext<string>()\n\n  return (\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\n      <FloatingInput\n        label={label}\n        {...props}\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n      />\n      <FieldInfo field={field} />\n    </div>\n  )\n}\n\ntype TextNumberFieldProps = React.ComponentProps<'input'> & {\n  label: string\n}\n\nfunction TextNumberField({ label, className, ...props }: TextNumberFieldProps) {\n  const field = useFieldContext<string>()\n\n  return (\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\n      <Label htmlFor={label}>{label}</Label>\n      <InputNumber\n        {...props}\n        type=\"text\"\n        id={label}\n        value={field.state.value}\n        onChange={(e) => field.handleChange(e.target.value)}\n      />\n      <FieldInfo field={field} />\n    </div>\n  )\n}\n\ntype SelectFieldProps = React.ComponentProps<'button'> & {\n  label: string\n  options: { label: string; value: string }[]\n}\n\nfunction SelectField({ options, className, label, ...props }: SelectFieldProps) {\n  const field = useFieldContext<string>()\n  return (\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\n      <Label htmlFor={label}>{label}</Label>\n      <Select defaultValue={field.state.value} onValueChange={(v) => field.handleChange(v)}>\n        <SelectTrigger className={cn('w-full', className)} {...props}>\n          <SelectValue placeholder=\"Select a verified email to display\" />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((opt) => (\n            <SelectItem key={opt.value} value={opt.value}>\n              {opt.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <FieldInfo field={field} />\n    </div>\n  )\n}\n\ntype ComboboxFieldProps = React.ComponentProps<'button'> & {\n  label: string\n  options: { label: string; value: string }[]\n}\n\nfunction ComboboxField({ options, className, label, ...props }: ComboboxFieldProps) {\n  const field = useFieldContext<string>()\n  const [open, setOpen] = React.useState(false)\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\n          <Label htmlFor={label}>{label}</Label>\n          <Button {...props} variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-full justify-between\">\n            {field.state.value\n              ? options.find((opt) => opt.value === field.state.value)?.label\n              : `Select ${label.toLowerCase()}...`}\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n          <FieldInfo field={field} />\n        </div>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto max-w-3xs p-0\">\n        <Command>\n          <CommandInput placeholder={`Search ${label.toLowerCase()}...`} />\n          <CommandList>\n            <CommandEmpty>Not found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((opt) => (\n                <CommandItem\n                  key={opt.value}\n                  value={opt.value}\n                  onSelect={(currentValue) => {\n                    field.setValue(currentValue === field.state.value ? '' : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn('mr-2 h-4 w-4', field.state.value === opt.value ? 'opacity-100' : 'opacity-0')}\n                  />\n                  {opt.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport { Form, FieldInfo, SubscribeButton, TextField, IDRField, TextFloatingField, TextNumberField, ComboboxField, SelectField }\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/form/hooks/use-form.ts",
      "content": "import { createFormHookContexts, createFormHook } from '@tanstack/react-form'\nimport { ComboboxField, IDRField, SelectField, SubscribeButton, TextField, TextFloatingField, TextNumberField } from '@/registry/form/ui/form'\n\n// ? this is context form\nexport const { fieldContext, useFieldContext, formContext, useFormContext } = createFormHookContexts()\n\n// ? this is hook form\nexport const { useAppForm, withForm } = createFormHook({\n  fieldComponents: {\n    TextField,\n    ComboboxField,\n    IDRField,\n    TextFloatingField,\n    TextNumberField,\n    SelectField\n  },\n  formComponents: {\n    SubscribeButton\n  },\n  fieldContext,\n  formContext\n})\n",
      "type": "registry:hook"
    }
  ]
}