{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:ui",
  "title": "Form with tanstack form",
  "description": "A simple Enhanced Form and tanstack form",
  "dependencies": [
    "lucide-react",
    "@tanstack/react-form",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "input",
    "select",
    "label",
    "command",
    "popover",
    "https://std-ui.vercel.app/r/input",
    "https://std-ui.vercel.app/r/input-idr",
    "https://std-ui.vercel.app/r/floating-input"
  ],
  "files": [
    {
      "path": "src/registry/form/ui/form.tsx",
      "content": "'use client'\r\n\r\nimport React from 'react'\r\nimport { cn } from '@/lib/utils'\r\nimport { Button } from '@/components/ui/button'\r\nimport { useFieldContext, useFormContext } from '@/registry/form/hooks/use-form'\r\nimport { FormEvent } from 'react'\r\nimport { Input, InputNumber } from '@/registry/ui/input'\r\nimport { Label } from '@/components/ui/label'\r\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'\r\nimport { Check, ChevronsUpDown } from 'lucide-react'\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command'\r\nimport { AnyFieldApi } from '@tanstack/react-form'\r\nimport { InputIDR } from '@/registry/ui/input-idr'\r\nimport { FloatingInput } from '@/registry/ui/floating-input'\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\r\n\r\ntype FormProps = Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onSubmit'> & {\r\n  onSubmit?: () => Promise<void>\r\n  children: React.ReactNode\r\n  className?: string\r\n}\r\n\r\nfunction Form({ onSubmit, children, className, ...props }: FormProps) {\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    await onSubmit?.()\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className={cn('space-y-4', className)}\r\n      onSubmit={(e: FormEvent<HTMLFormElement>) => void handleSubmit(e)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </form>\r\n  )\r\n}\r\n\r\n// ? form display error\r\nfunction FieldInfo({ field }: { field: AnyFieldApi }) {\r\n  return (\r\n    <>\r\n      {field.state.meta.isTouched && field.state.meta.errors.length ? (\r\n        <em className=\"text-red-600\">{field.state.meta.errors.map((err) => err.message).join(',')}</em>\r\n      ) : null}\r\n      {field.state.meta.isValidating ? 'Validating...' : null}\r\n    </>\r\n  )\r\n}\r\n\r\n// ? form components\r\ntype SubscribeButtonProps = React.ComponentProps<'button'> & {\r\n  label: string\r\n}\r\nfunction SubscribeButton({ label, className, ...props }: SubscribeButtonProps) {\r\n  const form = useFormContext()\r\n  return (\r\n    <form.Subscribe selector={(state) => state.isSubmitting}>\r\n      {(isSubmitting) => (\r\n        <Button className={cn('w-full', className)} {...props} disabled={isSubmitting}>\r\n          {label}\r\n        </Button>\r\n      )}\r\n    </form.Subscribe>\r\n  )\r\n}\r\n\r\n// ? form field\r\ntype TextFieldProps = React.ComponentProps<'input'> & {\r\n  label: string\r\n}\r\n\r\nfunction TextField({ className, placeholder, label, ...props }: TextFieldProps) {\r\n  const field = useFieldContext<string>()\r\n  return (\r\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\r\n      <Label htmlFor={label}>{label}</Label>\r\n      <Input\r\n        {...props}\r\n        value={field.state.value}\r\n        onChange={(e) => field.handleChange(e.target.value)}\r\n        type=\"text\"\r\n        id={label}\r\n        placeholder={placeholder}\r\n      />\r\n      <FieldInfo field={field} />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype IDRFieldProps = React.ComponentProps<'input'> & {\r\n  label: string\r\n}\r\n\r\nfunction IDRField({ className, label, ...props }: IDRFieldProps) {\r\n  const field = useFieldContext<number>()\r\n  return (\r\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\r\n      <Label htmlFor={label}>{label}</Label>\r\n      <InputIDR\r\n        {...props}\r\n        value={field.state.value}\r\n        onChange={(val) => field.handleChange(val)}\r\n        type=\"text\"\r\n        id={label}\r\n      />\r\n      <FieldInfo field={field} />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype TextFloatingProps = React.ComponentProps<'input'> & {\r\n  label: string\r\n}\r\n\r\nfunction TextFloatingField({ label, className, ...props }: TextFloatingProps) {\r\n  const field = useFieldContext<string>()\r\n\r\n  return (\r\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\r\n      <FloatingInput\r\n        label={label}\r\n        {...props}\r\n        value={field.state.value}\r\n        onChange={(e) => field.handleChange(e.target.value)}\r\n      />\r\n      <FieldInfo field={field} />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype TextNumberFieldProps = React.ComponentProps<'input'> & {\r\n  label: string\r\n}\r\n\r\nfunction TextNumberField({ label, className, ...props }: TextNumberFieldProps) {\r\n  const field = useFieldContext<string>()\r\n\r\n  return (\r\n    <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\r\n      <Label htmlFor={label}>{label}</Label>\r\n      <InputNumber\r\n        {...props}\r\n        type=\"text\"\r\n        id={label}\r\n        value={field.state.value}\r\n        onChange={(e) => field.handleChange(e.target.value)}\r\n      />\r\n      <FieldInfo field={field} />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype SelectFieldProps = React.ComponentProps<'button'> & {\r\n  label: string\r\n  options: { label: string; value: string }[]\r\n}\r\n\r\nfunction SelectField({ options, className, label, ...props }: SelectFieldProps) {\r\n  const field = useFieldContext<string>()\r\n  return (\r\n    <div className=\"grid w-full max-w-sm items-center gap-1.5\">\r\n      <Label htmlFor={label}>{label}</Label>\r\n      <Select defaultValue={field.state.value} onValueChange={(v) => field.handleChange(v)}>\r\n        <SelectTrigger className={cn('w-full', className)} {...props}>\r\n          <SelectValue placeholder=\"Select a verified email to display\" />\r\n        </SelectTrigger>\r\n        <SelectContent>\r\n          {options.map((opt) => (\r\n            <SelectItem key={opt.value} value={opt.value}>\r\n              {opt.label}\r\n            </SelectItem>\r\n          ))}\r\n        </SelectContent>\r\n      </Select>\r\n      <FieldInfo field={field} />\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ComboboxFieldProps = React.ComponentProps<'button'> & {\r\n  label: string\r\n  options: { label: string; value: string }[]\r\n}\r\n\r\nfunction ComboboxField({ options, className, label, ...props }: ComboboxFieldProps) {\r\n  const field = useFieldContext<string>()\r\n  const [open, setOpen] = React.useState(false)\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <div className={cn('grid w-full max-w-sm items-center gap-1.5', className)}>\r\n          <Label htmlFor={label}>{label}</Label>\r\n          <Button {...props} variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-full justify-between\">\r\n            {field.state.value\r\n              ? options.find((opt) => opt.value === field.state.value)?.label\r\n              : `Select ${label.toLowerCase()}...`}\r\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n          </Button>\r\n          <FieldInfo field={field} />\r\n        </div>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto max-w-3xs p-0\">\r\n        <Command>\r\n          <CommandInput placeholder={`Search ${label.toLowerCase()}...`} />\r\n          <CommandList>\r\n            <CommandEmpty>Not found.</CommandEmpty>\r\n            <CommandGroup>\r\n              {options.map((opt) => (\r\n                <CommandItem\r\n                  key={opt.value}\r\n                  value={opt.value}\r\n                  onSelect={(currentValue) => {\r\n                    field.setValue(currentValue === field.state.value ? '' : currentValue)\r\n                    setOpen(false)\r\n                  }}\r\n                >\r\n                  <Check\r\n                    className={cn('mr-2 h-4 w-4', field.state.value === opt.value ? 'opacity-100' : 'opacity-0')}\r\n                  />\r\n                  {opt.label}\r\n                </CommandItem>\r\n              ))}\r\n            </CommandGroup>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nexport { Form, FieldInfo, SubscribeButton, TextField, IDRField, TextFloatingField, TextNumberField, ComboboxField, SelectField }\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/registry/form/hooks/use-form.ts",
      "content": "import { createFormHookContexts, createFormHook } from '@tanstack/react-form'\r\nimport { ComboboxField, IDRField, SelectField, SubscribeButton, TextField, TextFloatingField, TextNumberField } from '@/registry/form/ui/form'\r\n\r\n// ? this is context form\r\nexport const { fieldContext, useFieldContext, formContext, useFormContext } = createFormHookContexts()\r\n\r\n// ? this is hook form\r\nexport const { useAppForm, withForm } = createFormHook({\r\n  fieldComponents: {\r\n    TextField,\r\n    ComboboxField,\r\n    IDRField,\r\n    TextFloatingField,\r\n    TextNumberField,\r\n    SelectField\r\n  },\r\n  formComponents: {\r\n    SubscribeButton\r\n  },\r\n  fieldContext,\r\n  formContext\r\n})\r\n",
      "type": "registry:hook"
    }
  ]
}